<launch>
    <arg name="server" default="192.168.2.50" />
    <node pkg="vrpn_client_ros" type="vrpn_client_node" name="vrpn_client_node" output="screen">
        <rosparam subst_value="true">
            server: $(arg server)
            port: 3883
            frame_id: world
            broadcast_tf: true
            # Must either specify refresh frequency > 0.0, or a list of trackers to create
            update_frequency: 120
            refresh_tracker_frequency: 1.0
            #trackers:
            #- FirstTracker
            #- SecondTracker
        </rosparam>
    </node>
    <group ns="data_recording">
        <rosparam command="load" file="$(find pushing_controller)/config/data_recording.yaml" />
    </group>
  
    <node name="dynparam" pkg="dynamic_reconfigure" type="dynparam" args="load /pushing_controller $(find pushing_controller)/config/controller_params.yaml"/>
    <node name="data_recording" pkg="data_recording" type="data_recording.py" output="screen" />
  
    <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure"/>
    <node name="pushing_state_publisher" pkg="pushing_state_publisher" type="node" output="screen">
        <param name="pub_freq" type="double" value="240" />
        <param name="robot_topic" type="string" value="/vrpn_client_node/epuck_robot_7/pose" />
        <param name="box_topic" type="string" value="/vrpn_client_node/Box/pose" />
    </node>
    <node name="pushing_controller" pkg="pushing_controller" type="pushing_controller_matlab_node" output="screen" respawn="true" respawn_delay="5">
        <remap from="/pusher/cmd_vel" to="/epuck_robot_7/mobile_base/cmd_vel" />
    </node>

    <node pkg="tf" type="static_transform_publisher" name="epuck_robot_7_tf" args="0 0 0 0 0 0 /epuck_robot_7 /epuck_robot_7/base_link 240"/>
    <!-- <node name="rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find pushing_controller)/rviz/epuck.rviz" /> -->

    <param name="box_description" textfile="$(find pushing_controller)/urdf/box_urdf.xml"/>
    
    <arg name="use_epuck_0" default="0" />
    <arg name="use_epuck_1" default="0" />
    <arg name="use_epuck_2" default="0" />
    <arg name="use_epuck_3" default="0" />
    <arg name="use_epuck_4" default="0" />
    <arg name="use_epuck_5" default="0" />
    <arg name="use_epuck_6" default="0" />
    <arg name="use_epuck_7" default="1" />

    <arg name="robot_id0" value="2041" />
    <arg name="robot_id1" value="2034" />
    <arg name="robot_id2" value="2037" />
    <arg name="robot_id3" value="2042" />
    <arg name="robot_id4" value="1702" />
    <arg name="robot_id5" value="2053" />
    <arg name="robot_id6" value="1701" />
    <arg name="robot_id7" value="2033" />

    <arg name="robot_addr0" value="10:00:E8:AD:5B:9F" /> <!--2041 address -->
    <arg name="robot_addr1" value="10:00:E8:AD:5B:A7" /> <!--2034 address -->
    <arg name="robot_addr2" value="10:00:E8:AD:5B:DA" /> <!--2037 address -->
    <arg name="robot_addr3" value="10:00:E8:AD:5B:E5" /> <!--2042 address -->
    <arg name="robot_addr4" value="10:00:E8:6C:D7:D6" /> <!--1702 address -->
    <arg name="robot_addr5" value="10:00:E8:AD:5B:A5" /> <!--2053 address -->
    <arg name="robot_addr6" value="10:00:E8:6C:D7:C3" /> <!--1701 address -->
    <arg name="robot_addr7" value="10:00:E8:AD:5B:F5" /> <!--2033 address -->

    <param name="robot_description" textfile="$(find epuck_driver_cpp)/urdf/epuck_urdf.xml" />

    <group ns="epuck_robot_0" if="$(arg use_epuck_0)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id0)" />
            <arg name="epuck_address" value="$(arg robot_addr0)" />
            <arg name="epuck_name" value="epuck_robot_0" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="-0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_0_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_0/base_link 30"/>-->
    </group>

    <group ns="epuck_robot_1" if="$(arg use_epuck_1)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id1)" />
            <arg name="epuck_address" value="$(arg robot_addr1)" />
            <arg name="epuck_name" value="epuck_robot_1" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_1_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_1/base_link 30"/>-->
    </group>


    <group ns="epuck_robot_2" if="$(arg use_epuck_2)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id2)" />
            <arg name="epuck_address" value="$(arg robot_addr2)" />
            <arg name="epuck_name" value="epuck_robot_2" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="-0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_2_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_2/base_link 30"/>-->
    </group>

    <group ns="epuck_robot_3" if="$(arg use_epuck_3)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id3)" />
            <arg name="epuck_address" value="$(arg robot_addr3)" />
            <arg name="epuck_name" value="epuck_robot_3" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_3_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_3/base_link 30"/>-->
    </group>


    <group ns="epuck_robot_4" if="$(arg use_epuck_4)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id4)" />
            <arg name="epuck_address" value="$(arg robot_addr4)" />
            <arg name="epuck_name" value="epuck_robot_4" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="-0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_4_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_4/base_link 30"/>-->
    </group>

    <group ns="epuck_robot_5" if="$(arg use_epuck_5)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id5)" />
            <arg name="epuck_address" value="$(arg robot_addr5)" />
            <arg name="epuck_name" value="epuck_robot_5" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_5_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_5/base_link 30"/>-->
    </group>

    <group ns="epuck_robot_6" if="$(arg use_epuck_6)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id6)" />
            <arg name="epuck_address" value="$(arg robot_addr6)" />
            <arg name="epuck_name" value="epuck_robot_6" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="-0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_6_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_6/base_link 30"/>-->
    </group>

    <group ns="epuck_robot_7" if="$(arg use_epuck_7)">
        <include file="$(find epuck_driver_cpp)/launch/epuck_controller.launch">
            <arg name="epuck_id" value="$(arg robot_id7)" />
            <arg name="epuck_address" value="$(arg robot_addr7)" />
            <arg name="epuck_name" value="epuck_robot_7" />
            <arg name="cam_en" value="false" />
            <arg name="acc_en" value="false" />
            <arg name="prox_en" value="true" />
            <arg name="mot_pos_en" value="true" />
            <arg name="floor_en" value="false" />
            <arg name="mot_speed_en" value="false" />
            <arg name="mic_en" value="false" />
            <arg name="xpos" value="-0.1" />
            <arg name="ypos" value="0.1" />
            <arg name="theta" value="0.0" />
            <arg name="is_single_robot" value="0" />
        </include>
        <!--<node pkg="tf" type="static_transform_publisher" name="epuck_robot_7_tf" args="0 0 0 0 0 0 /base_link /epuck_robot_7/base_link 30"/>-->
    </group>

    <!-- <remap from="cmd_vel_input" to="/joy_vel"/>
	<remap from="cmd_vel_output" to="/epuck_robot_4/mobile_base/cmd_vel"/>
  	<node pkg="prova_sw_unity_drone" name ="joy_timer_pub" type="joy_timer_pub" />
  
   <node pkg="joy" type="joy_node" name="joy_node">
      <param name="dev" value="/dev/input/js1" />
      <param name="deadzone"  value="0.4"/>
      </node>

    <arg name="teleop_config" default="$(find prova_sw_unity_drone)/config/joy_teleop_epuck.yaml"/>
      <rosparam file="$(arg teleop_config)" command="load">
      </rosparam>
    <node pkg="joy_teleop" type="joy_teleop.py" name="joy_teleop" output="screen"/> -->
</launch>