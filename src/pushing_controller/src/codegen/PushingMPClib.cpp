//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// PushingMPClib.cpp
//
// Code generation for function 'PushingMPClib'
//

// Include files
#include "PushingMPClib.h"
#include "PushingMPClib_types.h"
#include "rt_nonfinite.h"
#include <algorithm>
#include <cmath>
#include <cstring>
#include <math.h>

// Variable Definitions
static const signed char iv[9]{ 1, 0, 0, 0, 1, 0, 0, 0, 1 };

static const signed char iv1[300]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

static const short iv2[118]{ 6, 7, 13, 14, 20, 21, 27, 28, 34, 35, 41, 42, 48,
  49, 55, 56, 62, 63, 69, 70, 76, 77, 83, 84, 90, 91, 97, 98, 104, 105, 111, 112,
  118, 119, 125, 126, 132, 133, 139, 140, 146, 147, 153, 154, 160, 161, 167, 168,
  174, 175, 181, 182, 188, 189, 195, 196, 202, 203, 209, 210, 216, 217, 223, 224,
  230, 231, 237, 238, 244, 245, 251, 252, 258, 259, 265, 266, 272, 273, 279, 280,
  286, 287, 293, 294, 300, 301, 307, 308, 314, 315, 321, 322, 328, 329, 335, 336,
  342, 343, 349, 350, 351, 352, 361, 362, 371, 372, 401, 402, 411, 412, 421, 422,
  451, 453, 455, 457, 459, 461 };

static const signed char iv3[625]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

static const signed char iv4[300]{ 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

static const signed char iv5[100]{ 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
  0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
  1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
  0, 0, 1, 1, 0, 0, 1 };

static const signed char iv6[100]{ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
  1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
  1, 0, 1, 0, 1, 0, 1 };

static const signed char iv7[676]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

static const signed char iv8[312]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

// Function Declarations
namespace coder
{
  static double KWIKfactor(const double Ac[1736], const int iC[248], int nA,
    const double Linv[49], double RLinv[49], double D[49], double H[49]);
  static double b_KWIKfactor(const double Ac[2170], const int iC[310], int nA,
    const double Linv[49], double RLinv[49], double D[49], double H[49]);
  static void b_expm(double A[9], double F[9]);
  static void b_getExpmParams(const double A[9], double A2[9], double A4[9],
    double A6[9], int *m, double *s);
  static double b_log2(double x);
  static void b_mpc_customconstraintcoef(const double SuJm[450], const double
    Sx[225], const double Su1[150], const double Hv[11700], const double C[234],
    const double Dv[468], const double E[22], const double F[33], const double
    S[55], const double G[11], const double mvoff[2], const double mdoff[5],
    const double yoff[3], double Mu[1716], double Mv[44616], double Mu1[572],
    double Mx[858], double Mlim[286]);
  static void b_mpcblock_optimizer(const double rseq[75], const double vseq[156],
    const double x[3], const double old_u[2], const boolean_T iA[310], double
    Mlim[310], double Mx[930], double Mu1[620], double Mv[48360], const double
    utarget[50], const double uoff[2], const double voff[5], const double yoff[3],
    double H[49], double Ac[2170], const double ywt[75], const double uwt[50],
    const double duwt[50], const double A[234], const double Bu[156], const
    double Bv[468], const double C[234], const double Dv[468], const double Ecc
    [22], const double Fcc[33], const double Scc[55], const double Gcc[11],
    double u[2], double *cost, double useq[52], double *status, boolean_T iAout
    [310], double *slack);
  static void b_mpower(const double a[9], double b, double c[9]);
  static double b_norm(const double x[2]);
  static void b_qpkwik(const double Linv[49], const double Hinv[49], const
                       double f[7], const double Ac[2170], const double b[310],
                       boolean_T iA[310], double x[7], double lambda[310], int
                       *status);
  static void b_recomputeBlockDiag(const double A[9], double F[9], const int
    blockFormat[2]);
  static double c_norm(const double x[7]);
  static void expm(double A[25], double F[25]);
  static void getExpmParams(const double A[25], double A2[25], double A4[25],
    double A6[25], int *m, double *s);
  namespace internal
  {
    namespace blas
    {
      static void b_xgerc(int m, int n, double alpha1, int ix0, const double y[3],
                          double A[9], int ia0);
      static double b_xnrm2(int n, const double x[49], int ix0);
      static void xgerc(int m, int n, double alpha1, int ix0, const double y[7],
                        double A[49], int ia0);
      static double xnrm2(int n, const double x[25], int ix0);
      static double xnrm2(int n, const double x[3]);
    }

    namespace lapack
    {
      static int xhseqr(double h[9], double z[9]);
      static int xpotrf(double A[49]);
    }

    static double maximum(const double x[7]);
    static double minimum(const double x[7]);
    namespace reflapack
    {
      static int eml_dlahqr(double h[25], double z[25]);
      static void xdlanv2(double *a, double *b, double *c, double *d, double
                          *rt1r, double *rt1i, double *rt2r, double *rt2i,
                          double *cs, double *sn);
      static void xzlarf(int m, int n, int iv0, double tau, double C[25], int
                         ic0, double work[5]);
      static double xzlarfg(int n, double *alpha1, double x[3]);
    }

    static void trisolve(const double A[49], double B[49]);
  }

  static void mpc_checkhessian(double H[49], double L[49], double *BadH);
  static void mpc_customconstraintcoef(const double SuJm[1050], const double Sx
    [875], const double Su1[350], const double Hv[36400], const double C[910],
    const double Dv[1456], const double E[10], const double F[35], const double
    S[35], const double G[5], const double mvoff[2], const double mdoff[7],
    const double yoff[7], double Mu[780], double Mv[27040], double Mu1[260],
    double Mx[650], double Mlim[130]);
  static void mpcblock_optimizer(const double rseq[175], const double vseq[208],
    const double x[5], const double old_u[2], const boolean_T iA[248], double
    Mlim[248], double Mx[1240], double Mu1[496], double Mv[51584], const double
    utarget[50], const double uoff[2], const double voff[7], const double yoff[7],
    double H[49], double Ac[1736], const double ywt[175], const double uwt[50],
    const double duwt[50], const double A[650], const double Bu[260], const
    double Bv[1040], const double C[910], const double Dv[1456], const double
    Ecc[10], const double Fcc[35], const double Scc[35], const double Gcc[5],
    double u[2], double *cost, double useq[52], double *status, boolean_T iAout
    [248], double *slack);
  static void mpcmoveCodeGeneration(struct4_T *statedata, const double
    onlinedata_signals_ref[7], const double onlinedata_signals_md[182], const
    double onlinedata_weights_y[175], const double onlinedata_weights_u[50],
    const double onlinedata_weights_du[50], const double
    onlinedata_customconstraints_E[10], const double
    onlinedata_customconstraints_F[35], const double
    onlinedata_customconstraints_G[5], const double
    onlinedata_customconstraints_S[35], const struct10_T *onlinedata_model,
    double u[2], double Info_Uopt[52], double Info_Yopt[182], double Info_Xopt
    [130], double Info_Topt[26], double *Info_Slack, double *Info_Iterations,
    double *Info_Cost);
  static void mpower(const double a[25], double b, double c[25]);
  static void padeApproximation(const double A[25], const double A2[25], const
    double A4[25], const double A6[25], int m, double F[25]);
  static void qpkwik(const double Linv[49], const double Hinv[49], const double
                     f[7], const double Ac[1736], const double b[248], boolean_T
                     iA[248], double x[7], double lambda[248], int *status);
  static void qr(const double A[49], double Q[49], double R[49]);
  static void recomputeBlockDiag(const double A[25], double F[25], const int
    blockFormat[4]);
  static void schur(double A[25], double V[25]);
  static void schur(const double A[9], double V[9], double T[9]);
}

static int div_nde_s32_floor(int numerator, int denominator);
static void predLinObj(double ek[3], const double u[52], const double v[130],
  const struct20_T *param, double A[234], double B[546], double C[234], double
  D[546], double U[182], double Y[78], double X[78], double DX[78], double E[22],
  double F[33], double G[11], double S[55]);
static double rt_hypotd_snf(double u0, double u1);
static double rt_powd_snf(double u0, double u1);

// Function Definitions
namespace coder
{
  static double KWIKfactor(const double Ac[1736], const int iC[248], int nA,
    const double Linv[49], double RLinv[49], double D[49], double H[49])
  {
    double QQ[49];
    double RR[49];
    double Status;
    int b_i;
    int i;
    int i1;
    int qY;
    Status = 1.0;
    std::memset(&RLinv[0], 0, 49U * sizeof(double));
    for (i = 0; i < nA; i++) {
      for (b_i = 0; b_i < 7; b_i++) {
        i1 = b_i + 7 * i;
        RLinv[i1] = 0.0;
        for (qY = 0; qY < 7; qY++) {
          RLinv[i1] += Linv[b_i + 7 * qY] * Ac[(iC[i] + 248 * qY) - 1];
        }
      }
    }

    qr(RLinv, QQ, RR);
    i = 0;
    int exitg1;
    do {
      exitg1 = 0;
      if (i <= nA - 1) {
        if (std::abs(RR[i + 7 * i]) < 1.0E-12) {
          Status = -2.0;
          exitg1 = 1;
        } else {
          i++;
        }
      } else {
        double TL[49];
        for (i = 0; i < 7; i++) {
          for (int j{0}; j < 7; j++) {
            double b_Linv;
            b_Linv = 0.0;
            for (b_i = 0; b_i < 7; b_i++) {
              b_Linv += Linv[b_i + 7 * i] * QQ[b_i + 7 * j];
            }

            TL[i + 7 * j] = b_Linv;
          }
        }

        std::memset(&RLinv[0], 0, 49U * sizeof(double));
        for (int j{nA}; j >= 1; j--) {
          b_i = 7 * (j - 1);
          i1 = (j + b_i) - 1;
          RLinv[i1] = 1.0;
          for (int k{j}; k <= nA; k++) {
            qY = (j + 7 * (k - 1)) - 1;
            RLinv[qY] /= RR[i1];
          }

          if (j > 1) {
            for (i = 0; i <= j - 2; i++) {
              for (int k{j}; k <= nA; k++) {
                i1 = 7 * (k - 1);
                qY = i + i1;
                RLinv[qY] -= RR[i + b_i] * RLinv[(j + i1) - 1];
              }
            }
          }
        }

        if (nA > 2147483646) {
          qY = MAX_int32_T;
        } else {
          qY = nA + 1;
        }

        for (i = 0; i < 7; i++) {
          for (int j{i + 1}; j < 8; j++) {
            b_i = i + 7 * (j - 1);
            H[b_i] = 0.0;
            for (int k{qY}; k < 8; k++) {
              i1 = 7 * (k - 1);
              H[b_i] -= TL[i + i1] * TL[(j + i1) - 1];
            }

            H[(j + 7 * i) - 1] = H[b_i];
          }
        }

        for (int j{0}; j < nA; j++) {
          for (i = 0; i < 7; i++) {
            b_i = i + 7 * j;
            D[b_i] = 0.0;
            for (int k{j + 1}; k <= nA; k++) {
              i1 = 7 * (k - 1);
              D[b_i] += TL[i + i1] * RLinv[j + i1];
            }
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);

    return Status;
  }

  static double b_KWIKfactor(const double Ac[2170], const int iC[310], int nA,
    const double Linv[49], double RLinv[49], double D[49], double H[49])
  {
    double QQ[49];
    double RR[49];
    double Status;
    int b_i;
    int i;
    int i1;
    int qY;
    Status = 1.0;
    std::memset(&RLinv[0], 0, 49U * sizeof(double));
    for (i = 0; i < nA; i++) {
      for (b_i = 0; b_i < 7; b_i++) {
        i1 = b_i + 7 * i;
        RLinv[i1] = 0.0;
        for (qY = 0; qY < 7; qY++) {
          RLinv[i1] += Linv[b_i + 7 * qY] * Ac[(iC[i] + 310 * qY) - 1];
        }
      }
    }

    qr(RLinv, QQ, RR);
    i = 0;
    int exitg1;
    do {
      exitg1 = 0;
      if (i <= nA - 1) {
        if (std::abs(RR[i + 7 * i]) < 1.0E-12) {
          Status = -2.0;
          exitg1 = 1;
        } else {
          i++;
        }
      } else {
        double TL[49];
        for (i = 0; i < 7; i++) {
          for (int j{0}; j < 7; j++) {
            double b_Linv;
            b_Linv = 0.0;
            for (b_i = 0; b_i < 7; b_i++) {
              b_Linv += Linv[b_i + 7 * i] * QQ[b_i + 7 * j];
            }

            TL[i + 7 * j] = b_Linv;
          }
        }

        std::memset(&RLinv[0], 0, 49U * sizeof(double));
        for (int j{nA}; j >= 1; j--) {
          b_i = 7 * (j - 1);
          i1 = (j + b_i) - 1;
          RLinv[i1] = 1.0;
          for (int k{j}; k <= nA; k++) {
            qY = (j + 7 * (k - 1)) - 1;
            RLinv[qY] /= RR[i1];
          }

          if (j > 1) {
            for (i = 0; i <= j - 2; i++) {
              for (int k{j}; k <= nA; k++) {
                i1 = 7 * (k - 1);
                qY = i + i1;
                RLinv[qY] -= RR[i + b_i] * RLinv[(j + i1) - 1];
              }
            }
          }
        }

        if (nA > 2147483646) {
          qY = MAX_int32_T;
        } else {
          qY = nA + 1;
        }

        for (i = 0; i < 7; i++) {
          for (int j{i + 1}; j < 8; j++) {
            b_i = i + 7 * (j - 1);
            H[b_i] = 0.0;
            for (int k{qY}; k < 8; k++) {
              i1 = 7 * (k - 1);
              H[b_i] -= TL[i + i1] * TL[(j + i1) - 1];
            }

            H[(j + 7 * i) - 1] = H[b_i];
          }
        }

        for (int j{0}; j < nA; j++) {
          for (i = 0; i < 7; i++) {
            b_i = i + 7 * j;
            D[b_i] = 0.0;
            for (int k{j + 1}; k <= nA; k++) {
              i1 = 7 * (k - 1);
              D[b_i] += TL[i + i1] * RLinv[j + i1];
            }
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);

    return Status;
  }

  static void b_expm(double A[9], double F[9])
  {
    double A2[9];
    double U[9];
    double b_A6[9];
    double s;
    int r2;
    boolean_T recomputeDiags;
    recomputeDiags = true;
    for (r2 = 0; r2 < 9; r2++) {
      if ((!recomputeDiags) || (std::isinf(A[r2]) || std::isnan(A[r2]))) {
        recomputeDiags = false;
      }
    }

    if (!recomputeDiags) {
      for (int rtemp{0}; rtemp < 9; rtemp++) {
        F[rtemp] = rtNaN;
      }
    } else {
      int exitg1;
      int r1;
      boolean_T exitg2;
      recomputeDiags = true;
      r1 = 0;
      exitg2 = false;
      while ((!exitg2) && (r1 < 3)) {
        r2 = 0;
        do {
          exitg1 = 0;
          if (r2 < 3) {
            if ((r2 != r1) && (!(A[r2 + 3 * r1] == 0.0))) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              r2++;
            }
          } else {
            r1++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        std::memset(&F[0], 0, 9U * sizeof(double));
        F[0] = std::exp(A[0]);
        F[4] = std::exp(A[4]);
        F[8] = std::exp(A[8]);
      } else {
        recomputeDiags = true;
        r1 = 0;
        exitg2 = false;
        while ((!exitg2) && (r1 < 3)) {
          r2 = 0;
          do {
            exitg1 = 0;
            if (r2 <= r1) {
              if (!(A[r2 + 3 * r1] == A[r1 + 3 * r2])) {
                recomputeDiags = false;
                exitg1 = 1;
              } else {
                r2++;
              }
            } else {
              r1++;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }

        if (recomputeDiags) {
          double A4[9];
          double A6[9];
          double d;
          schur(A, A4, A2);
          for (r1 = 0; r1 < 3; r1++) {
            d = std::exp(A2[r1 + 3 * r1]);
            A6[3 * r1] = A4[3 * r1] * d;
            r2 = 3 * r1 + 1;
            A6[r2] = A4[r2] * d;
            r2 = 3 * r1 + 2;
            A6[r2] = A4[r2] * d;
          }

          for (int rtemp{0}; rtemp < 3; rtemp++) {
            double maxval;
            double y;
            d = A6[rtemp];
            maxval = A6[rtemp + 3];
            y = A6[rtemp + 6];
            for (int r3{0}; r3 < 3; r3++) {
              F[rtemp + 3 * r3] = (d * A4[r3] + maxval * A4[r3 + 3]) + y * A4[r3
                + 6];
            }
          }

          for (int rtemp{0}; rtemp < 3; rtemp++) {
            b_A6[3 * rtemp] = (F[3 * rtemp] + F[rtemp]) / 2.0;
            r2 = 3 * rtemp + 1;
            b_A6[r2] = (F[r2] + F[rtemp + 3]) / 2.0;
            r2 = 3 * rtemp + 2;
            b_A6[r2] = (F[r2] + F[rtemp + 6]) / 2.0;
          }

          std::copy(&b_A6[0], &b_A6[9], &F[0]);
        } else {
          double A4[9];
          double A6[9];
          double V[9];
          double b_d;
          double b_y;
          double d;
          double d1;
          double d2;
          double d3;
          double d4;
          double maxval;
          double y;
          int blockFormat[2];
          int r3;
          int rtemp;
          recomputeDiags = true;
          r1 = 3;
          while (recomputeDiags && (r1 <= 3)) {
            r2 = 3;
            while (recomputeDiags && (r2 <= 3)) {
              recomputeDiags = (A[2] == 0.0);
              r2 = 4;
            }

            r1 = 4;
          }

          if (recomputeDiags) {
            r2 = 0;
            exitg2 = false;
            while ((!exitg2) && (r2 < 2)) {
              rtemp = r2 + 3 * r2;
              if (A[rtemp + 1] != 0.0) {
                if ((r2 + 1 != 2) && (A[5] != 0.0)) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  r3 = r2 + 3 * (r2 + 1);
                  if (A[rtemp] != A[r3 + 1]) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    d = A[rtemp + 1];
                    if (!std::isnan(d)) {
                      if (A[(r2 + 3 * r2) + 1] < 0.0) {
                        d = -1.0;
                      } else {
                        d = (A[(r2 + 3 * r2) + 1] > 0.0);
                      }
                    }

                    maxval = A[r3];
                    if (!std::isnan(maxval)) {
                      if (A[r2 + 3 * (r2 + 1)] < 0.0) {
                        maxval = -1.0;
                      } else {
                        maxval = (A[r2 + 3 * (r2 + 1)] > 0.0);
                      }
                    }

                    if (d * maxval != -1.0) {
                      recomputeDiags = false;
                      exitg2 = true;
                    } else {
                      r2++;
                    }
                  }
                }
              } else {
                r2++;
              }
            }
          }

          b_getExpmParams(A, A2, A4, A6, &r2, &s);
          if (s != 0.0) {
            d = rt_powd_snf(2.0, s);
            maxval = rt_powd_snf(2.0, 2.0 * s);
            y = rt_powd_snf(2.0, 4.0 * s);
            b_y = rt_powd_snf(2.0, 6.0 * s);
            for (rtemp = 0; rtemp < 9; rtemp++) {
              A[rtemp] /= d;
              A2[rtemp] /= maxval;
              A4[rtemp] /= y;
              A6[rtemp] /= b_y;
            }
          }

          if (recomputeDiags) {
            blockFormat[1] = 0;
            if (A[1] != 0.0) {
              blockFormat[0] = 2;
              blockFormat[1] = 0;
            } else if (A[5] == 0.0) {
              blockFormat[0] = 1;
            } else {
              blockFormat[0] = 0;
            }

            if (A[5] != 0.0) {
              blockFormat[1] = 2;
            } else if ((blockFormat[0] == 0) || (blockFormat[0] == 1)) {
              blockFormat[1] = 1;
            }
          }

          if (r2 == 3) {
            std::copy(&A2[0], &A2[9], &U[0]);
            U[0] += 60.0;
            U[4] += 60.0;
            U[8] += 60.0;
            for (rtemp = 0; rtemp < 3; rtemp++) {
              d = A[rtemp];
              maxval = A[rtemp + 3];
              y = A[rtemp + 6];
              for (r3 = 0; r3 < 3; r3++) {
                b_A6[rtemp + 3 * r3] = (d * U[3 * r3] + maxval * U[3 * r3 + 1])
                  + y * U[3 * r3 + 2];
              }
            }

            for (rtemp = 0; rtemp < 9; rtemp++) {
              U[rtemp] = b_A6[rtemp];
              V[rtemp] = 12.0 * A2[rtemp];
            }

            d = 120.0;
          } else if (r2 == 5) {
            for (rtemp = 0; rtemp < 9; rtemp++) {
              U[rtemp] = A4[rtemp] + 420.0 * A2[rtemp];
            }

            U[0] += 15120.0;
            U[4] += 15120.0;
            U[8] += 15120.0;
            for (rtemp = 0; rtemp < 3; rtemp++) {
              d = A[rtemp];
              maxval = A[rtemp + 3];
              y = A[rtemp + 6];
              for (r3 = 0; r3 < 3; r3++) {
                b_A6[rtemp + 3 * r3] = (d * U[3 * r3] + maxval * U[3 * r3 + 1])
                  + y * U[3 * r3 + 2];
              }
            }

            for (rtemp = 0; rtemp < 9; rtemp++) {
              U[rtemp] = b_A6[rtemp];
              V[rtemp] = 30.0 * A4[rtemp] + 3360.0 * A2[rtemp];
            }

            d = 30240.0;
          } else if (r2 == 7) {
            for (rtemp = 0; rtemp < 9; rtemp++) {
              U[rtemp] = (A6[rtemp] + 1512.0 * A4[rtemp]) + 277200.0 * A2[rtemp];
            }

            U[0] += 8.64864E+6;
            U[4] += 8.64864E+6;
            U[8] += 8.64864E+6;
            for (rtemp = 0; rtemp < 3; rtemp++) {
              d = A[rtemp];
              maxval = A[rtemp + 3];
              y = A[rtemp + 6];
              for (r3 = 0; r3 < 3; r3++) {
                b_A6[rtemp + 3 * r3] = (d * U[3 * r3] + maxval * U[3 * r3 + 1])
                  + y * U[3 * r3 + 2];
              }
            }

            for (rtemp = 0; rtemp < 9; rtemp++) {
              U[rtemp] = b_A6[rtemp];
              V[rtemp] = (56.0 * A6[rtemp] + 25200.0 * A4[rtemp]) + 1.99584E+6 *
                A2[rtemp];
            }

            d = 1.729728E+7;
          } else if (r2 == 9) {
            for (rtemp = 0; rtemp < 3; rtemp++) {
              d = A6[rtemp];
              maxval = A6[rtemp + 3];
              y = A6[rtemp + 6];
              for (r3 = 0; r3 < 3; r3++) {
                V[rtemp + 3 * r3] = (d * A2[3 * r3] + maxval * A2[3 * r3 + 1]) +
                  y * A2[3 * r3 + 2];
              }
            }

            for (rtemp = 0; rtemp < 9; rtemp++) {
              U[rtemp] = ((V[rtemp] + 3960.0 * A6[rtemp]) + 2.16216E+6 *
                          A4[rtemp]) + 3.027024E+8 * A2[rtemp];
            }

            U[0] += 8.8216128E+9;
            U[4] += 8.8216128E+9;
            U[8] += 8.8216128E+9;
            for (rtemp = 0; rtemp < 3; rtemp++) {
              d = A[rtemp];
              maxval = A[rtemp + 3];
              y = A[rtemp + 6];
              for (r3 = 0; r3 < 3; r3++) {
                b_A6[rtemp + 3 * r3] = (d * U[3 * r3] + maxval * U[3 * r3 + 1])
                  + y * U[3 * r3 + 2];
              }
            }

            for (rtemp = 0; rtemp < 9; rtemp++) {
              U[rtemp] = b_A6[rtemp];
              V[rtemp] = ((90.0 * V[rtemp] + 110880.0 * A6[rtemp]) + 3.027024E+7
                          * A4[rtemp]) + 2.0756736E+9 * A2[rtemp];
            }

            d = 1.76432256E+10;
          } else {
            for (rtemp = 0; rtemp < 9; rtemp++) {
              d = A6[rtemp];
              maxval = A4[rtemp];
              y = A2[rtemp];
              U[rtemp] = (3.352212864E+10 * d + 1.05594705216E+13 * maxval) +
                1.1873537964288E+15 * y;
              b_A6[rtemp] = (d + 16380.0 * maxval) + 4.08408E+7 * y;
            }

            U[0] += 3.238237626624E+16;
            U[4] += 3.238237626624E+16;
            U[8] += 3.238237626624E+16;
            for (rtemp = 0; rtemp < 3; rtemp++) {
              d = A6[rtemp];
              maxval = A6[rtemp + 3];
              y = A6[rtemp + 6];
              for (r3 = 0; r3 < 3; r3++) {
                r2 = rtemp + 3 * r3;
                V[r2] = ((d * b_A6[3 * r3] + maxval * b_A6[3 * r3 + 1]) + y *
                         b_A6[3 * r3 + 2]) + U[r2];
              }
            }

            for (rtemp = 0; rtemp < 3; rtemp++) {
              d = A[rtemp];
              maxval = A[rtemp + 3];
              y = A[rtemp + 6];
              for (r3 = 0; r3 < 3; r3++) {
                U[rtemp + 3 * r3] = (d * V[3 * r3] + maxval * V[3 * r3 + 1]) + y
                  * V[3 * r3 + 2];
              }
            }

            for (rtemp = 0; rtemp < 9; rtemp++) {
              b_A6[rtemp] = (182.0 * A6[rtemp] + 960960.0 * A4[rtemp]) +
                1.32324192E+9 * A2[rtemp];
            }

            for (rtemp = 0; rtemp < 3; rtemp++) {
              for (r3 = 0; r3 < 3; r3++) {
                r2 = rtemp + 3 * r3;
                V[r2] = ((((A6[rtemp] * b_A6[3 * r3] + A6[rtemp + 3] * b_A6[3 *
                            r3 + 1]) + A6[rtemp + 6] * b_A6[3 * r3 + 2]) +
                          6.704425728E+11 * A6[r2]) + 1.29060195264E+14 * A4[r2])
                  + 7.7717703038976E+15 * A2[r2];
              }
            }

            d = 6.476475253248E+16;
          }

          V[0] += d;
          V[4] += d;
          V[8] += d;
          for (r2 = 0; r2 < 9; r2++) {
            d = U[r2];
            V[r2] -= d;
            d *= 2.0;
            U[r2] = d;
          }

          r1 = 0;
          r2 = 1;
          r3 = 2;
          maxval = std::abs(V[0]);
          d = std::abs(V[1]);
          if (d > maxval) {
            maxval = d;
            r1 = 1;
            r2 = 0;
          }

          if (std::abs(V[2]) > maxval) {
            r1 = 2;
            r2 = 1;
            r3 = 0;
          }

          V[r2] /= V[r1];
          V[r3] /= V[r1];
          V[r2 + 3] -= V[r2] * V[r1 + 3];
          V[r3 + 3] -= V[r3] * V[r1 + 3];
          V[r2 + 6] -= V[r2] * V[r1 + 6];
          V[r3 + 6] -= V[r3] * V[r1 + 6];
          if (std::abs(V[r3 + 3]) > std::abs(V[r2 + 3])) {
            rtemp = r2;
            r2 = r3;
            r3 = rtemp;
          }

          V[r3 + 3] /= V[r2 + 3];
          V[r3 + 6] -= V[r3 + 3] * V[r2 + 6];
          d = U[r1];
          maxval = U[r2] - d * V[r2];
          y = V[r3 + 3];
          b_y = V[r3 + 6];
          b_d = ((U[r3] - d * V[r3]) - maxval * y) / b_y;
          F[2] = b_d;
          d1 = V[r1 + 6];
          d -= b_d * d1;
          d2 = V[r2 + 6];
          maxval -= b_d * d2;
          d3 = V[r2 + 3];
          maxval /= d3;
          F[1] = maxval;
          d4 = V[r1 + 3];
          d -= maxval * d4;
          d /= V[r1];
          F[0] = d;
          d = U[r1 + 3];
          maxval = U[r2 + 3] - d * V[r2];
          b_d = ((U[r3 + 3] - d * V[r3]) - maxval * y) / b_y;
          F[5] = b_d;
          d -= b_d * d1;
          maxval -= b_d * d2;
          maxval /= d3;
          F[4] = maxval;
          d -= maxval * d4;
          d /= V[r1];
          F[3] = d;
          d = U[r1 + 6];
          maxval = U[r2 + 6] - d * V[r2];
          b_d = ((U[r3 + 6] - d * V[r3]) - maxval * y) / b_y;
          d -= b_d * d1;
          maxval -= b_d * d2;
          maxval /= d3;
          F[7] = maxval;
          d -= maxval * d4;
          d /= V[r1];
          F[6] = d;
          F[0]++;
          F[4]++;
          F[8] = b_d + 1.0;
          if (recomputeDiags) {
            b_recomputeBlockDiag(A, F, blockFormat);
          }

          rtemp = static_cast<int>(s);
          for (r2 = 0; r2 < rtemp; r2++) {
            for (r3 = 0; r3 < 3; r3++) {
              for (r1 = 0; r1 < 3; r1++) {
                b_A6[r3 + 3 * r1] = (F[r3] * F[3 * r1] + F[r3 + 3] * F[3 * r1 +
                                     1]) + F[r3 + 6] * F[3 * r1 + 2];
              }
            }

            std::copy(&b_A6[0], &b_A6[9], &F[0]);
            if (recomputeDiags) {
              for (r3 = 0; r3 < 9; r3++) {
                A[r3] *= 2.0;
              }

              b_recomputeBlockDiag(A, F, blockFormat);
            }
          }
        }
      }
    }
  }

  static void b_getExpmParams(const double A[9], double A2[9], double A4[9],
    double A6[9], int *m, double *s)
  {
    double b_y[9];
    double dv[9];
    double b_s;
    double c_y;
    double d6;
    double d8;
    double eta1;
    double y;
    int eint;
    int j;
    boolean_T exitg1;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    boolean_T guard3{ false };

    boolean_T guard4{ false };

    *s = 0.0;
    for (j = 0; j < 3; j++) {
      for (int i{0}; i < 3; i++) {
        A2[j + 3 * i] = (A[j] * A[3 * i] + A[j + 3] * A[3 * i + 1]) + A[j + 6] *
          A[3 * i + 2];
      }
    }

    for (j = 0; j < 3; j++) {
      for (int i{0}; i < 3; i++) {
        A4[j + 3 * i] = (A2[j] * A2[3 * i] + A2[j + 3] * A2[3 * i + 1]) + A2[j +
          6] * A2[3 * i + 2];
      }

      b_s = A4[j];
      y = A4[j + 3];
      eta1 = A4[j + 6];
      for (int i{0}; i < 3; i++) {
        A6[j + 3 * i] = (b_s * A2[3 * i] + y * A2[3 * i + 1]) + eta1 * A2[3 * i
          + 2];
      }
    }

    y = 0.0;
    j = 0;
    exitg1 = false;
    while ((!exitg1) && (j < 3)) {
      b_s = (std::abs(A6[3 * j]) + std::abs(A6[3 * j + 1])) + std::abs(A6[3 * j
        + 2]);
      if (std::isnan(b_s)) {
        y = rtNaN;
        exitg1 = true;
      } else {
        if (b_s > y) {
          y = b_s;
        }

        j++;
      }
    }

    d6 = rt_powd_snf(y, 0.16666666666666666);
    y = 0.0;
    j = 0;
    exitg1 = false;
    while ((!exitg1) && (j < 3)) {
      b_s = (std::abs(A4[3 * j]) + std::abs(A4[3 * j + 1])) + std::abs(A4[3 * j
        + 2]);
      if (std::isnan(b_s)) {
        y = rtNaN;
        exitg1 = true;
      } else {
        if (b_s > y) {
          y = b_s;
        }

        j++;
      }
    }

    eta1 = std::fmax(rt_powd_snf(y, 0.25), d6);
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    if (eta1 <= 0.01495585217958292) {
      for (j = 0; j < 9; j++) {
        dv[j] = 0.19285012468241128 * std::abs(A[j]);
      }

      b_mpower(dv, 7.0, b_y);
      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 3)) {
        b_s = (std::abs(b_y[3 * j]) + std::abs(b_y[3 * j + 1])) + std::abs(b_y[3
          * j + 2]);
        if (std::isnan(b_s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > y) {
            y = b_s;
          }

          j++;
        }
      }

      c_y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 3)) {
        b_s = (std::abs(A[3 * j]) + std::abs(A[3 * j + 1])) + std::abs(A[3 * j +
          2]);
        if (std::isnan(b_s)) {
          c_y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > c_y) {
            c_y = b_s;
          }

          j++;
        }
      }

      y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 6.0;
      if (std::fmax(std::ceil(y), 0.0) == 0.0) {
        *m = 3;
      } else {
        guard4 = true;
      }
    } else {
      guard4 = true;
    }

    if (guard4) {
      if (eta1 <= 0.253939833006323) {
        for (j = 0; j < 9; j++) {
          dv[j] = 0.12321872304378752 * std::abs(A[j]);
        }

        b_mpower(dv, 11.0, b_y);
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 3)) {
          b_s = (std::abs(b_y[3 * j]) + std::abs(b_y[3 * j + 1])) + std::abs
            (b_y[3 * j + 2]);
          if (std::isnan(b_s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > y) {
              y = b_s;
            }

            j++;
          }
        }

        c_y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 3)) {
          b_s = (std::abs(A[3 * j]) + std::abs(A[3 * j + 1])) + std::abs(A[3 * j
            + 2]);
          if (std::isnan(b_s)) {
            c_y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > c_y) {
              c_y = b_s;
            }

            j++;
          }
        }

        y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 10.0;
        if (std::fmax(std::ceil(y), 0.0) == 0.0) {
          *m = 5;
        } else {
          guard3 = true;
        }
      } else {
        guard3 = true;
      }
    }

    if (guard3) {
      b_mpower(A4, 2.0, b_y);
      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 3)) {
        b_s = (std::abs(b_y[3 * j]) + std::abs(b_y[3 * j + 1])) + std::abs(b_y[3
          * j + 2]);
        if (std::isnan(b_s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > y) {
            y = b_s;
          }

          j++;
        }
      }

      d8 = rt_powd_snf(y, 0.125);
      d6 = std::fmax(d6, d8);
      if (d6 <= 0.95041789961629319) {
        for (j = 0; j < 9; j++) {
          dv[j] = 0.090475336558796943 * std::abs(A[j]);
        }

        b_mpower(dv, 15.0, b_y);
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 3)) {
          b_s = (std::abs(b_y[3 * j]) + std::abs(b_y[3 * j + 1])) + std::abs
            (b_y[3 * j + 2]);
          if (std::isnan(b_s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > y) {
              y = b_s;
            }

            j++;
          }
        }

        c_y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 3)) {
          b_s = (std::abs(A[3 * j]) + std::abs(A[3 * j + 1])) + std::abs(A[3 * j
            + 2]);
          if (std::isnan(b_s)) {
            c_y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > c_y) {
              c_y = b_s;
            }

            j++;
          }
        }

        y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 14.0;
        if (std::fmax(std::ceil(y), 0.0) == 0.0) {
          *m = 7;
        } else {
          guard2 = true;
        }
      } else {
        guard2 = true;
      }
    }

    if (guard2) {
      if (d6 <= 2.097847961257068) {
        for (j = 0; j < 9; j++) {
          dv[j] = 0.071467735648795785 * std::abs(A[j]);
        }

        b_mpower(dv, 19.0, b_y);
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 3)) {
          b_s = (std::abs(b_y[3 * j]) + std::abs(b_y[3 * j + 1])) + std::abs
            (b_y[3 * j + 2]);
          if (std::isnan(b_s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > y) {
              y = b_s;
            }

            j++;
          }
        }

        c_y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 3)) {
          b_s = (std::abs(A[3 * j]) + std::abs(A[3 * j + 1])) + std::abs(A[3 * j
            + 2]);
          if (std::isnan(b_s)) {
            c_y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > c_y) {
              c_y = b_s;
            }

            j++;
          }
        }

        y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 18.0;
        if (std::fmax(std::ceil(y), 0.0) == 0.0) {
          *m = 9;
        } else {
          guard1 = true;
        }
      } else {
        guard1 = true;
      }
    }

    if (guard1) {
      double T[9];
      for (j = 0; j < 3; j++) {
        b_s = A4[j];
        y = A4[j + 3];
        eta1 = A4[j + 6];
        for (int i{0}; i < 3; i++) {
          b_y[j + 3 * i] = (b_s * A6[3 * i] + y * A6[3 * i + 1]) + eta1 * A6[3 *
            i + 2];
        }
      }

      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 3)) {
        *s = (std::abs(b_y[3 * j]) + std::abs(b_y[3 * j + 1])) + std::abs(b_y[3 *
          j + 2]);
        if (std::isnan(*s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (*s > y) {
            y = *s;
          }

          j++;
        }
      }

      y = b_log2(std::fmin(d6, std::fmax(d8, rt_powd_snf(y, 0.1))) /
                 5.3719203511481517);
      *s = std::fmax(std::ceil(y), 0.0);
      y = rt_powd_snf(2.0, *s);
      for (j = 0; j < 9; j++) {
        b_s = A[j] / y;
        T[j] = b_s;
        dv[j] = 0.05031554467093536 * std::abs(b_s);
      }

      b_mpower(dv, 27.0, b_y);
      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 3)) {
        b_s = (std::abs(b_y[3 * j]) + std::abs(b_y[3 * j + 1])) + std::abs(b_y[3
          * j + 2]);
        if (std::isnan(b_s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > y) {
            y = b_s;
          }

          j++;
        }
      }

      c_y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 3)) {
        b_s = (std::abs(T[3 * j]) + std::abs(T[3 * j + 1])) + std::abs(T[3 * j +
          2]);
        if (std::isnan(b_s)) {
          c_y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > c_y) {
            c_y = b_s;
          }

          j++;
        }
      }

      y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 26.0;
      *s += std::fmax(std::ceil(y), 0.0);
      if (std::isinf(*s)) {
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 3)) {
          *s = (std::abs(A[3 * j]) + std::abs(A[3 * j + 1])) + std::abs(A[3 * j
            + 2]);
          if (std::isnan(*s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (*s > y) {
              y = *s;
            }

            j++;
          }
        }

        y /= 5.3719203511481517;
        if ((!std::isinf(y)) && (!std::isnan(y))) {
          y = frexp(y, &eint);
        } else {
          eint = 0;
        }

        *s = eint;
        if (y == 0.5) {
          *s = static_cast<double>(eint) - 1.0;
        }
      }

      *m = 13;
    }
  }

  static double b_log2(double x)
  {
    double f;
    int eint;
    if (x == 0.0) {
      f = rtMinusInf;
    } else if ((!std::isinf(x)) && (!std::isnan(x))) {
      double t;
      t = frexp(x, &eint);
      if (t == 0.5) {
        f = static_cast<double>(eint) - 1.0;
      } else if ((eint == 1) && (t < 0.75)) {
        f = std::log(2.0 * t) / 0.69314718055994529;
      } else {
        f = std::log(t) / 0.69314718055994529 + static_cast<double>(eint);
      }
    } else {
      f = x;
    }

    return f;
  }

  static void b_mpc_customconstraintcoef(const double SuJm[450], const double
    Sx[225], const double Su1[150], const double Hv[11700], const double C[234],
    const double Dv[468], const double E[22], const double F[33], const double
    S[55], const double G[11], const double mvoff[2], const double mdoff[5],
    const double yoff[3], double Mu[1716], double Mv[44616], double Mu1[572],
    double Mx[858], double Mlim[286])
  {
    static double Sp1[44616];
    static double Fp1[22308];
    static double a_tmp[22308];
    static double Ep1[14872];
    static double b_Dv[12168];
    double b_Fp1[1716];
    double c_Fp1[572];
    double dv[468];
    double b_I2[312];
    double c_E[286];
    double b_C[234];
    double dv1[156];
    double B[66];
    double b_E[11];
    double d;
    int I2_tmp;
    int b_kidx;
    int kidx;
    signed char I2[2704];
    signed char Ep1_tmp[676];
    signed char I1[104];
    signed char I1_tmp[4];
    I1_tmp[1] = 0;
    I1_tmp[2] = 0;
    I1_tmp[0] = 1;
    I1_tmp[3] = 1;
    kidx = -1;
    for (int j2{0}; j2 < 2; j2++) {
      b_kidx = j2 << 1;
      for (int i1{0}; i1 < 26; i1++) {
        I1[kidx + 1] = I1_tmp[b_kidx];
        I1[kidx + 2] = I1_tmp[b_kidx + 1];
        kidx += 2;
      }
    }

    kidx = -1;
    for (int b_j1{0}; b_j1 < 26; b_j1++) {
      for (int j2{0}; j2 < 2; j2++) {
        b_kidx = j2 << 1;
        for (int i1{0}; i1 < 26; i1++) {
          I2_tmp = iv7[i1 + 26 * b_j1];
          I2[kidx + 1] = static_cast<signed char>(I2_tmp * I1_tmp[b_kidx]);
          I2[kidx + 2] = static_cast<signed char>(I2_tmp * I1_tmp[b_kidx + 1]);
          kidx += 2;
        }
      }
    }

    std::memset(&Ep1_tmp[0], 0, 676U * sizeof(signed char));
    for (b_kidx = 0; b_kidx < 26; b_kidx++) {
      Ep1_tmp[b_kidx + 26 * b_kidx] = 1;
    }

    kidx = -1;
    b_kidx = -1;
    for (int b_j1{0}; b_j1 < 26; b_j1++) {
      for (int j2{0}; j2 < 2; j2++) {
        for (int i1{0}; i1 < 26; i1++) {
          for (I2_tmp = 0; I2_tmp < 11; I2_tmp++) {
            Ep1[(kidx + I2_tmp) + 1] = static_cast<double>(Ep1_tmp[i1 + 26 *
              b_j1]) * E[I2_tmp + 11 * j2];
          }

          kidx += 11;
        }
      }

      for (int j2{0}; j2 < 3; j2++) {
        for (int i1{0}; i1 < 26; i1++) {
          for (I2_tmp = 0; I2_tmp < 11; I2_tmp++) {
            Fp1[(b_kidx + I2_tmp) + 1] = static_cast<double>(Ep1_tmp[i1 + 26 *
              b_j1]) * F[I2_tmp + 11 * j2];
          }

          b_kidx += 11;
        }
      }
    }

    for (kidx = 0; kidx < 5; kidx++) {
      std::copy(&S[kidx * 11], &S[static_cast<int>(kidx * 11 + 11U)], &B[kidx *
                11]);
    }

    std::memset(&B[55], 0, 11U * sizeof(double));
    kidx = -1;
    for (int b_j1{0}; b_j1 < 26; b_j1++) {
      for (int j2{0}; j2 < 6; j2++) {
        for (int i1{0}; i1 < 26; i1++) {
          for (I2_tmp = 0; I2_tmp < 11; I2_tmp++) {
            Sp1[(kidx + I2_tmp) + 1] = static_cast<double>(Ep1_tmp[i1 + 26 *
              b_j1]) * B[I2_tmp + 11 * j2];
          }

          kidx += 11;
        }
      }
    }

    for (kidx = 0; kidx < 52; kidx++) {
      for (int b_j1{0}; b_j1 < 6; b_j1++) {
        d = 0.0;
        for (I2_tmp = 0; I2_tmp < 52; I2_tmp++) {
          d += static_cast<double>(I2[kidx + 52 * I2_tmp] * iv8[I2_tmp + 52 *
            b_j1]);
        }

        b_I2[kidx + 52 * b_j1] = d;
      }
    }

    for (kidx = 0; kidx < 6; kidx++) {
      dv[78 * kidx] = 0.0;
      dv[78 * kidx + 1] = 0.0;
      dv[78 * kidx + 2] = 0.0;
      std::copy(&SuJm[kidx * 75], &SuJm[static_cast<int>(kidx * 75 + 75U)],
                &dv[kidx * 78 + 3]);
    }

    for (kidx = 0; kidx < 286; kidx++) {
      for (int b_j1{0}; b_j1 < 6; b_j1++) {
        d = 0.0;
        for (I2_tmp = 0; I2_tmp < 52; I2_tmp++) {
          d += Ep1[kidx + 286 * I2_tmp] * b_I2[I2_tmp + 52 * b_j1];
        }

        b_kidx = kidx + 286 * b_j1;
        Mu[b_kidx] = d;
        d = 0.0;
        for (I2_tmp = 0; I2_tmp < 78; I2_tmp++) {
          d += Fp1[kidx + 286 * I2_tmp] * dv[I2_tmp + 78 * b_j1];
        }

        b_Fp1[b_kidx] = d;
      }
    }

    for (kidx = 0; kidx < 1716; kidx++) {
      Mu[kidx] += b_Fp1[kidx];
    }

    for (kidx = 0; kidx < 22308; kidx++) {
      a_tmp[kidx] = -Fp1[kidx];
    }

    for (kidx = 0; kidx < 6; kidx++) {
      b_Dv[78 * kidx] = Dv[3 * kidx];
      b_Dv[78 * kidx + 1] = Dv[3 * kidx + 1];
      b_Dv[78 * kidx + 2] = Dv[3 * kidx + 2];
    }

    for (kidx = 0; kidx < 150; kidx++) {
      b_kidx = 78 * (kidx + 6);
      b_Dv[b_kidx] = 0.0;
      b_Dv[b_kidx + 1] = 0.0;
      b_Dv[b_kidx + 2] = 0.0;
    }

    for (kidx = 0; kidx < 156; kidx++) {
      std::copy(&Hv[kidx * 75], &Hv[static_cast<int>(kidx * 75 + 75U)],
                &b_Dv[kidx * 78 + 3]);
    }

    for (kidx = 0; kidx < 286; kidx++) {
      for (int b_j1{0}; b_j1 < 156; b_j1++) {
        d = 0.0;
        for (I2_tmp = 0; I2_tmp < 78; I2_tmp++) {
          d += a_tmp[kidx + 286 * I2_tmp] * b_Dv[I2_tmp + 78 * b_j1];
        }

        b_kidx = kidx + 286 * b_j1;
        Mv[b_kidx] = d - Sp1[b_kidx];
      }
    }

    for (kidx = 0; kidx < 3; kidx++) {
      b_C[78 * kidx] = C[3 * kidx];
      b_C[78 * kidx + 1] = C[3 * kidx + 1];
      b_C[78 * kidx + 2] = C[3 * kidx + 2];
      std::copy(&Sx[kidx * 75], &Sx[static_cast<int>(kidx * 75 + 75U)],
                &b_C[kidx * 78 + 3]);
    }

    for (kidx = 0; kidx < 286; kidx++) {
      for (int b_j1{0}; b_j1 < 3; b_j1++) {
        d = 0.0;
        for (I2_tmp = 0; I2_tmp < 78; I2_tmp++) {
          d += a_tmp[kidx + 286 * I2_tmp] * b_C[I2_tmp + 78 * b_j1];
        }

        Mx[kidx + 286 * b_j1] = d;
      }
    }

    for (kidx = 0; kidx < 14872; kidx++) {
      Ep1[kidx] = -Ep1[kidx];
    }

    for (kidx = 0; kidx < 2; kidx++) {
      dv1[78 * kidx] = 0.0;
      dv1[78 * kidx + 1] = 0.0;
      dv1[78 * kidx + 2] = 0.0;
      std::copy(&Su1[kidx * 75], &Su1[static_cast<int>(kidx * 75 + 75U)],
                &dv1[kidx * 78 + 3]);
    }

    for (kidx = 0; kidx < 286; kidx++) {
      for (int b_j1{0}; b_j1 < 2; b_j1++) {
        d = 0.0;
        for (I2_tmp = 0; I2_tmp < 52; I2_tmp++) {
          d += Ep1[kidx + 286 * I2_tmp] * static_cast<double>(I1[I2_tmp + 52 *
            b_j1]);
        }

        b_kidx = kidx + 286 * b_j1;
        Mu1[b_kidx] = d;
        d = 0.0;
        for (I2_tmp = 0; I2_tmp < 78; I2_tmp++) {
          d += Fp1[kidx + 286 * I2_tmp] * dv1[I2_tmp + 78 * b_j1];
        }

        c_Fp1[b_kidx] = d;
      }
    }

    for (kidx = 0; kidx < 572; kidx++) {
      Mu1[kidx] -= c_Fp1[kidx];
    }

    for (kidx = 0; kidx < 11; kidx++) {
      d = 0.0;
      for (int b_j1{0}; b_j1 < 5; b_j1++) {
        d += S[kidx + 11 * b_j1] * mdoff[b_j1];
      }

      b_E[kidx] = (((E[kidx] * mvoff[0] + E[kidx + 11] * mvoff[1]) + ((F[kidx] *
        yoff[0] + F[kidx + 11] * yoff[1]) + F[kidx + 22] * yoff[2])) - G[kidx])
        + d;
    }

    for (kidx = 0; kidx < 26; kidx++) {
      std::copy(&b_E[0], &b_E[11], &c_E[kidx * 11]);
    }

    for (kidx = 0; kidx < 286; kidx++) {
      Mlim[kidx] = -c_E[kidx];
    }
  }

  static void b_mpcblock_optimizer(const double rseq[75], const double vseq[156],
    const double x[3], const double old_u[2], const boolean_T iA[310], double
    Mlim[310], double Mx[930], double Mu1[620], double Mv[48360], const double
    utarget[50], const double uoff[2], const double voff[5], const double yoff[3],
    double H[49], double Ac[2170], const double ywt[75], const double uwt[50],
    const double duwt[50], const double A[234], const double Bu[156], const
    double Bv[468], const double C[234], const double Dv[468], const double Ecc
    [22], const double Fcc[33], const double Scc[55], const double Gcc[11],
    double u[2], double *cost, double useq[52], double *status, boolean_T iAout
    [310], double *slack)
  {
    static double MvCC[44616];
    static double Hv[11700];
    static double Su[3750];
    double MuCC[1716];
    double Kv[936];
    double MxCC[858];
    double Mu1CC[572];
    double SuJm[450];
    double WySuJm[450];
    double I2Jm[300];
    double WduJm[300];
    double b_WuI2Jm[300];
    double Sx[225];
    double AA[216];
    double Su1[150];
    double Wy[75];
    double Wu[50];
    double Linv[49];
    double b_Linv[49];
    double b_C[18];
    double b_Su1[12];
    double dv[12];
    double c_C[9];
    double d_C[6];
    double Wdu[2];
    double BadH;
    double WuI2Jm;
    double d;
    double d1;
    int AA_tmp;
    int Hv_tmp;
    int Su1_tmp;
    int b_Hv_tmp;
    int b_j;
    int i1;
    int kidx;
    short b_ixw;
    short ixw;
    signed char a[2500];
    signed char b_I[4];
    *cost = 0.0;
    std::memset(&iAout[0], 0, 310U * sizeof(boolean_T));
    *slack = 0.0;
    for (int i{0}; i < 3; i++) {
      d = C[i + 9];
      d1 = C[i + 12];
      WuI2Jm = C[i + 15];
      for (i1 = 0; i1 < 6; i1++) {
        b_C[i + 3 * i1] = (d * Bv[3 * i1] + d1 * Bv[3 * i1 + 1]) + WuI2Jm * Bv[3
          * i1 + 2];
      }
    }

    for (int i{0}; i < 6; i++) {
      Hv[75 * i] = b_C[3 * i];
      Hv_tmp = 75 * (i + 6);
      Hv[Hv_tmp] = Dv[3 * i + 18];
      Hv[75 * i + 1] = b_C[3 * i + 1];
      Hv[Hv_tmp + 1] = Dv[3 * i + 19];
      Hv[75 * i + 2] = b_C[3 * i + 2];
      Hv[Hv_tmp + 2] = Dv[3 * i + 20];
    }

    for (int i{0}; i < 144; i++) {
      Hv_tmp = 75 * (i + 12);
      Hv[Hv_tmp] = 0.0;
      Hv[Hv_tmp + 1] = 0.0;
      Hv[Hv_tmp + 2] = 0.0;
    }

    for (int i{0}; i < 156; i++) {
      std::memset(&Hv[i * 75 + 3], 0, 72U * sizeof(double));
    }

    for (int i{0}; i < 3; i++) {
      d = C[i + 9];
      d1 = C[i + 12];
      WuI2Jm = C[i + 15];
      for (i1 = 0; i1 < 3; i1++) {
        c_C[i + 3 * i1] = (d * A[3 * i1] + d1 * A[3 * i1 + 1]) + WuI2Jm * A[3 *
          i1 + 2];
      }
    }

    for (int i{0}; i < 3; i++) {
      Sx[75 * i] = c_C[3 * i];
      Sx[75 * i + 1] = c_C[3 * i + 1];
      Sx[75 * i + 2] = c_C[3 * i + 2];
      std::memset(&Sx[i * 75 + 3], 0, 72U * sizeof(double));
      d = C[i + 9];
      d1 = C[i + 12];
      WuI2Jm = C[i + 15];
      for (i1 = 0; i1 < 2; i1++) {
        d_C[i + 3 * i1] = (d * Bu[3 * i1] + d1 * Bu[3 * i1 + 1]) + WuI2Jm * Bu[3
          * i1 + 2];
      }
    }

    for (int i{0}; i < 2; i++) {
      Su1[75 * i] = d_C[3 * i];
      Su1_tmp = 75 * i + 1;
      Su1[Su1_tmp] = d_C[3 * i + 1];
      kidx = 75 * i + 2;
      Su1[kidx] = d_C[3 * i + 2];
      std::memset(&Su1[i * 75 + 3], 0, 72U * sizeof(double));
      Su[75 * i] = Su1[75 * i];
      Su[Su1_tmp] = Su1[Su1_tmp];
      Su[kidx] = Su1[kidx];
    }

    for (int i{0}; i < 48; i++) {
      kidx = 75 * (i + 2);
      Su[kidx] = 0.0;
      Su[kidx + 1] = 0.0;
      Su[kidx + 2] = 0.0;
    }

    for (int i{0}; i < 50; i++) {
      std::memset(&Su[i * 75 + 3], 0, 72U * sizeof(double));
    }

    for (int i{0}; i < 3; i++) {
      AA[3 * i] = A[3 * i + 9];
      AA[3 * i + 1] = A[3 * i + 10];
      AA[3 * i + 2] = A[3 * i + 11];
    }

    for (int i{0}; i < 69; i++) {
      AA_tmp = 3 * (i + 3);
      AA[AA_tmp] = 0.0;
      AA[AA_tmp + 1] = 0.0;
      AA[AA_tmp + 2] = 0.0;
    }

    for (int b_i{0}; b_i < 24; b_i++) {
      double b_AA[9];
      int i_tmp;
      signed char rows[3];
      i_tmp = (b_i + 1) * 3;
      rows[0] = static_cast<signed char>(i_tmp + 1);
      rows[1] = static_cast<signed char>(i_tmp + 2);
      rows[2] = static_cast<signed char>(i_tmp + 3);
      for (int i{0}; i < 3; i++) {
        Su1_tmp = i + 9 * (b_i + 2);
        for (i1 = 0; i1 < 2; i1++) {
          kidx = (rows[i] + 75 * i1) - 1;
          Su1[kidx] = 0.0;
          AA_tmp = 3 * i1 + 6 * (b_i + 1);
          Su1[kidx] += C[Su1_tmp] * Bu[AA_tmp];
          Su1[kidx] += C[Su1_tmp + 3] * Bu[AA_tmp + 1];
          Su1[kidx] += C[Su1_tmp + 6] * Bu[AA_tmp + 2];
        }
      }

      AA_tmp = (b_i + 1) << 1;
      for (int i{0}; i < 2; i++) {
        kidx = i_tmp + 75 * i;
        Su1_tmp = i_tmp + 75 * (i + AA_tmp);
        Su[Su1_tmp] = Su1[kidx];
        Su[Su1_tmp + 1] = Su1[kidx + 1];
        Su[Su1_tmp + 2] = Su1[kidx + 2];
      }

      for (int j{0}; j <= b_i; j++) {
        b_j = b_i - j;
        kidx = b_j * 3;
        for (int i{0}; i < 3; i++) {
          AA_tmp = 3 * (i + kidx);
          b_AA[3 * i] = AA[AA_tmp];
          b_AA[3 * i + 1] = AA[AA_tmp + 1];
          b_AA[3 * i + 2] = AA[AA_tmp + 2];
        }

        for (int i{0}; i < 3; i++) {
          i1 = i + 9 * (b_i + 2);
          for (Hv_tmp = 0; Hv_tmp < 3; Hv_tmp++) {
            c_C[i + 3 * Hv_tmp] = (C[i1] * b_AA[3 * Hv_tmp] + C[i1 + 3] * b_AA[3
              * Hv_tmp + 1]) + C[i1 + 6] * b_AA[3 * Hv_tmp + 2];
          }

          d = c_C[i];
          d1 = c_C[i + 3];
          WuI2Jm = c_C[i + 6];
          for (i1 = 0; i1 < 2; i1++) {
            Hv_tmp = 3 * i1 + 6 * b_j;
            d_C[i + 3 * i1] = Su1[(rows[i] + 75 * i1) - 1] + ((d * Bu[Hv_tmp] +
              d1 * Bu[Hv_tmp + 1]) + WuI2Jm * Bu[Hv_tmp + 2]);
          }
        }

        for (int i{0}; i < 2; i++) {
          Su1_tmp = i_tmp + 75 * i;
          Su1[Su1_tmp] = d_C[3 * i];
          Su1[Su1_tmp + 1] = d_C[3 * i + 1];
          Su1[Su1_tmp + 2] = d_C[3 * i + 2];
        }

        b_j <<= 1;
        for (int i{0}; i < 2; i++) {
          kidx = i_tmp + 75 * i;
          Su1_tmp = i_tmp + 75 * (i + b_j);
          Su[Su1_tmp] = Su1[kidx];
          Su[Su1_tmp + 1] = Su1[kidx + 1];
          Su[Su1_tmp + 2] = Su1[kidx + 2];
        }
      }

      AA_tmp = (b_i + 2) * 6;
      for (int i{0}; i < 6; i++) {
        Hv_tmp = 3 * i + 18 * (b_i + 2);
        b_Hv_tmp = i_tmp + 75 * (i + AA_tmp);
        Hv[b_Hv_tmp] = Dv[Hv_tmp];
        Hv[b_Hv_tmp + 1] = Dv[Hv_tmp + 1];
        Hv[b_Hv_tmp + 2] = Dv[Hv_tmp + 2];
      }

      AA_tmp = (b_i + 1) * 6;
      for (int i{0}; i < 3; i++) {
        Hv_tmp = i + 9 * (b_i + 2);
        for (i1 = 0; i1 < 6; i1++) {
          b_Hv_tmp = (rows[i] + 75 * (i1 + AA_tmp)) - 1;
          Hv[b_Hv_tmp] = 0.0;
          kidx = 3 * i1 + 18 * (b_i + 1);
          Hv[b_Hv_tmp] += C[Hv_tmp] * Bv[kidx];
          Hv[b_Hv_tmp] += C[Hv_tmp + 3] * Bv[kidx + 1];
          Hv[b_Hv_tmp] += C[Hv_tmp + 6] * Bv[kidx + 2];
        }
      }

      for (int j{0}; j <= b_i; j++) {
        b_j = j * 3;
        for (int i{0}; i < 3; i++) {
          AA_tmp = 3 * (i + b_j);
          b_AA[3 * i] = AA[AA_tmp];
          b_AA[3 * i + 1] = AA[AA_tmp + 1];
          b_AA[3 * i + 2] = AA[AA_tmp + 2];
        }

        b_j = j * 6;
        for (int i{0}; i < 3; i++) {
          i1 = i + 9 * (b_i + 2);
          for (Hv_tmp = 0; Hv_tmp < 3; Hv_tmp++) {
            c_C[i + 3 * Hv_tmp] = (C[i1] * b_AA[3 * Hv_tmp] + C[i1 + 3] * b_AA[3
              * Hv_tmp + 1]) + C[i1 + 6] * b_AA[3 * Hv_tmp + 2];
          }

          d = c_C[i];
          d1 = c_C[i + 3];
          WuI2Jm = c_C[i + 6];
          for (i1 = 0; i1 < 6; i1++) {
            Hv_tmp = (rows[i] + 75 * (i1 + b_j)) - 1;
            Hv[Hv_tmp] = 0.0;
            b_Hv_tmp = 3 * i1 + 18 * j;
            Hv[Hv_tmp] += d * Bv[b_Hv_tmp];
            Hv[Hv_tmp] += d1 * Bv[b_Hv_tmp + 1];
            Hv[Hv_tmp] += WuI2Jm * Bv[b_Hv_tmp + 2];
          }
        }
      }

      for (int i{0}; i < 3; i++) {
        i1 = i + 9 * (b_i + 2);
        for (Hv_tmp = 0; Hv_tmp < 3; Hv_tmp++) {
          c_C[i + 3 * Hv_tmp] = (C[i1] * AA[3 * Hv_tmp] + C[i1 + 3] * AA[3 *
            Hv_tmp + 1]) + C[i1 + 6] * AA[3 * Hv_tmp + 2];
        }

        d = c_C[i];
        d1 = c_C[i + 3];
        WuI2Jm = c_C[i + 6];
        for (i1 = 0; i1 < 3; i1++) {
          kidx = (rows[i] + 75 * i1) - 1;
          Sx[kidx] = 0.0;
          Sx[kidx] += d * A[3 * i1];
          Sx[kidx] += d1 * A[3 * i1 + 1];
          Sx[kidx] += WuI2Jm * A[3 * i1 + 2];
        }
      }

      if (b_i + 2 < 25) {
        for (kidx = 0; kidx <= b_i; kidx++) {
          b_Hv_tmp = kidx * 3;
          for (int i{0}; i < 3; i++) {
            AA_tmp = 3 * (i + b_Hv_tmp);
            b_AA[3 * i] = AA[AA_tmp];
            b_AA[3 * i + 1] = AA[AA_tmp + 1];
            b_AA[3 * i + 2] = AA[AA_tmp + 2];
          }

          for (int i{0}; i < 3; i++) {
            AA_tmp = i + 9 * (b_i + 2);
            for (i1 = 0; i1 < 3; i1++) {
              b_j = i + 3 * (i1 + b_Hv_tmp);
              AA[b_j] = 0.0;
              AA[b_j] += A[AA_tmp] * b_AA[3 * i1];
              AA[b_j] += A[AA_tmp + 3] * b_AA[3 * i1 + 1];
              AA[b_j] += A[AA_tmp + 6] * b_AA[3 * i1 + 2];
            }
          }
        }

        for (int i{0}; i < 3; i++) {
          AA_tmp = 3 * i + 9 * (b_i + 2);
          b_j = 3 * (i + i_tmp);
          AA[b_j] = A[AA_tmp];
          AA[b_j + 1] = A[AA_tmp + 1];
          AA[b_j + 2] = A[AA_tmp + 2];
        }
      }
    }

    for (int i{0}; i < 75; i++) {
      for (i1 = 0; i1 < 6; i1++) {
        d = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 50; Hv_tmp++) {
          d += Su[i + 75 * Hv_tmp] * static_cast<double>(iv1[Hv_tmp + 50 * i1]);
        }

        SuJm[i + 75 * i1] = d;
      }
    }

    b_mpc_customconstraintcoef(SuJm, Sx, Su1, Hv, C, Dv, Ecc, Fcc, Scc, Gcc,
      uoff, voff, yoff, MuCC, MvCC, Mu1CC, MxCC, *(double (*)[286])&Mlim[24]);
    for (int i{0}; i < 6; i++) {
      for (i1 = 0; i1 < 286; i1++) {
        Ac[(i1 + 310 * i) + 24] = -MuCC[i1 + 286 * i];
      }
    }

    for (int i{0}; i < 3; i++) {
      std::copy(&MxCC[i * 286], &MxCC[static_cast<int>(i * 286 + 286U)], &Mx[i *
                310 + 24]);
    }

    for (int i{0}; i < 2; i++) {
      std::copy(&Mu1CC[i * 286], &Mu1CC[static_cast<int>(i * 286 + 286U)],
                &Mu1[i * 310 + 24]);
    }

    for (int i{0}; i < 156; i++) {
      std::copy(&MvCC[i * 286], &MvCC[static_cast<int>(i * 286 + 286U)], &Mv[i *
                310 + 24]);
    }

    for (kidx = 0; kidx < 75; kidx++) {
      d = ywt[kidx];
      if (d < 0.0) {
        Wy[kidx] = 0.0;
      } else {
        Wy[kidx] = d * d;
      }
    }

    for (kidx = 0; kidx < 50; kidx++) {
      d = uwt[kidx];
      if (d < 0.0) {
        Wu[kidx] = 0.0;
      } else {
        Wu[kidx] = d * d;
      }
    }

    if (duwt[0] < 0.0) {
      Wdu[0] = 0.0;
    } else {
      Wdu[0] = duwt[0] * duwt[0];
    }

    if (duwt[1] < 0.0) {
      Wdu[1] = 0.0;
    } else {
      Wdu[1] = duwt[1] * duwt[1];
    }

    b_I[1] = 0;
    b_I[2] = 0;
    b_I[0] = 1;
    b_I[3] = 1;
    kidx = -1;
    for (AA_tmp = 0; AA_tmp < 25; AA_tmp++) {
      for (Su1_tmp = 0; Su1_tmp < 2; Su1_tmp++) {
        b_Hv_tmp = Su1_tmp << 1;
        for (b_j = 0; b_j < 25; b_j++) {
          Hv_tmp = iv3[b_j + 25 * AA_tmp];
          a[kidx + 1] = static_cast<signed char>(Hv_tmp * b_I[b_Hv_tmp]);
          a[kidx + 2] = static_cast<signed char>(Hv_tmp * b_I[b_Hv_tmp + 1]);
          kidx += 2;
        }
      }
    }

    for (int i{0}; i < 50; i++) {
      for (i1 = 0; i1 < 6; i1++) {
        d = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 50; Hv_tmp++) {
          d += static_cast<double>(a[i + 50 * Hv_tmp] * iv1[Hv_tmp + 50 * i1]);
        }

        I2Jm[i + 50 * i1] = d;
      }
    }

    ixw = 1;
    for (int b_i{0}; b_i < 75; b_i++) {
      for (int i{0}; i < 6; i++) {
        kidx = b_i + 75 * i;
        WySuJm[kidx] = Wy[ixw - 1] * SuJm[kidx];
      }

      ixw = static_cast<short>(ixw + 1);
      if (ixw > 75) {
        ixw = 73;
      }
    }

    ixw = 1;
    b_ixw = 1;
    for (int b_i{0}; b_i < 50; b_i++) {
      for (int i{0}; i < 6; i++) {
        kidx = b_i + 50 * i;
        b_WuI2Jm[kidx] = Wu[ixw - 1] * I2Jm[kidx];
      }

      ixw = static_cast<short>(ixw + 1);
      if (ixw > 50) {
        ixw = 49;
      }

      for (int i{0}; i < 6; i++) {
        kidx = b_i + 50 * i;
        WduJm[kidx] = Wdu[b_ixw - 1] * static_cast<double>(iv1[kidx]);
      }

      b_ixw = static_cast<short>(b_ixw + 1);
      if (b_ixw > 2) {
        b_ixw = 1;
      }
    }

    for (int i{0}; i < 6; i++) {
      for (i1 = 0; i1 < 6; i1++) {
        d = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 75; Hv_tmp++) {
          d += SuJm[Hv_tmp + 75 * i] * WySuJm[Hv_tmp + 75 * i1];
        }

        d1 = 0.0;
        WuI2Jm = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 50; Hv_tmp++) {
          kidx = Hv_tmp + 50 * i1;
          WuI2Jm += static_cast<double>(iv4[i + 6 * Hv_tmp]) * WduJm[kidx];
          d1 += I2Jm[Hv_tmp + 50 * i] * b_WuI2Jm[kidx];
        }

        H[i + 7 * i1] = (d + WuI2Jm) + d1;
      }
    }

    for (int i{0}; i < 2; i++) {
      for (i1 = 0; i1 < 6; i1++) {
        d = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 75; Hv_tmp++) {
          d += Su1[Hv_tmp + 75 * i] * WySuJm[Hv_tmp + 75 * i1];
        }

        Su1_tmp = i + (i1 << 1);
        b_Su1[Su1_tmp] = d;
        d = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 50; Hv_tmp++) {
          d += static_cast<double>(iv5[i + (Hv_tmp << 1)]) * b_WuI2Jm[Hv_tmp +
            50 * i1];
        }

        dv[Su1_tmp] = d;
      }
    }

    for (int i{0}; i < 12; i++) {
      b_Su1[i] += dv[i];
    }

    for (int i{0}; i < 300; i++) {
      b_WuI2Jm[i] = -b_WuI2Jm[i];
    }

    for (int i{0}; i < 3; i++) {
      for (i1 = 0; i1 < 6; i1++) {
        d = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 75; Hv_tmp++) {
          d += Sx[Hv_tmp + 75 * i] * WySuJm[Hv_tmp + 75 * i1];
        }

        b_C[i + 3 * i1] = d;
      }
    }

    for (int i{0}; i < 156; i++) {
      for (i1 = 0; i1 < 6; i1++) {
        d = 0.0;
        for (Hv_tmp = 0; Hv_tmp < 75; Hv_tmp++) {
          d += Hv[Hv_tmp + 75 * i] * WySuJm[Hv_tmp + 75 * i1];
        }

        Kv[i + 156 * i1] = d;
      }
    }

    for (int i{0}; i < 450; i++) {
      WySuJm[i] = -WySuJm[i];
    }

    std::copy(&H[0], &H[49], &Linv[0]);
    mpc_checkhessian(Linv, b_Linv, &BadH);
    if (BadH > 1.0) {
      for (int b_i{0}; b_i < 2; b_i++) {
        u[b_i] = old_u[b_i] + uoff[b_i];
        for (int i{0}; i < 26; i++) {
          useq[i + 26 * b_i] = u[b_i];
        }
      }

      *status = -2.0;
    } else {
      double b_Mlim[310];
      double b_Mu1[310];
      double c_Mlim[310];
      double aux3[50];
      double f[7];
      double zopt[7];
      double b_Kv;
      signed char c_I[49];
      for (int i{0}; i < 49; i++) {
        c_I[i] = 0;
      }

      for (kidx = 0; kidx < 7; kidx++) {
        c_I[kidx + 7 * kidx] = 1;
      }

      for (int j{0}; j < 7; j++) {
        for (int b_i{0}; b_i < 7; b_i++) {
          kidx = b_i + 7 * j;
          Linv[kidx] = c_I[kidx];
        }
      }

      internal::trisolve(b_Linv, Linv);
      for (int b_i{0}; b_i < 7; b_i++) {
        f[b_i] = 0.0;
      }

      for (int b_i{0}; b_i < 6; b_i++) {
        BadH = 0.0;
        for (int i{0}; i < 75; i++) {
          BadH += WySuJm[i + 75 * b_i] * rseq[i];
        }

        Su1_tmp = b_i << 1;
        b_Kv = 0.0;
        for (int i{0}; i < 156; i++) {
          b_Kv += Kv[i + 156 * b_i] * vseq[i];
        }

        WuI2Jm = 0.0;
        for (int i{0}; i < 50; i++) {
          WuI2Jm += b_WuI2Jm[i + 50 * b_i] * utarget[i];
        }

        f[b_i] = (((((b_C[3 * b_i] * x[0] + b_C[3 * b_i + 1] * x[1]) + b_C[3 *
                     b_i + 2] * x[2]) + BadH) + (b_Su1[Su1_tmp] * old_u[0] +
                    b_Su1[Su1_tmp + 1] * old_u[1])) + b_Kv) + WuI2Jm;
      }

      d = x[0];
      d1 = x[1];
      WuI2Jm = x[2];
      BadH = old_u[0];
      b_Kv = old_u[1];
      for (int b_i{0}; b_i < 310; b_i++) {
        iAout[b_i] = iA[b_i];
        b_Mlim[b_i] = Mlim[b_i] + ((Mx[b_i] * d + Mx[b_i + 310] * d1) + Mx[b_i +
          620] * WuI2Jm);
        b_Mu1[b_i] = Mu1[b_i] * BadH + Mu1[b_i + 310] * b_Kv;
      }

      for (int i{0}; i < 7; i++) {
        for (i1 = 0; i1 < 7; i1++) {
          d = 0.0;
          for (Hv_tmp = 0; Hv_tmp < 7; Hv_tmp++) {
            d += Linv[Hv_tmp + 7 * i] * Linv[Hv_tmp + 7 * i1];
          }

          b_Linv[i + 7 * i1] = d;
        }
      }

      for (int i{0}; i < 310; i++) {
        d = 0.0;
        for (i1 = 0; i1 < 156; i1++) {
          d += Mv[i + 310 * i1] * vseq[i1];
        }

        c_Mlim[i] = -((b_Mlim[i] + b_Mu1[i]) + d);
      }

      b_qpkwik(Linv, b_Linv, f, Ac, c_Mlim, iAout, zopt, b_Mlim, &kidx);
      if ((kidx < 0) || (kidx == 0)) {
        for (int b_i{0}; b_i < 7; b_i++) {
          zopt[b_i] = 0.0;
        }
      }

      *status = kidx;
      *slack = zopt[6];
      u[0] = (old_u[0] + zopt[0]) + uoff[0];
      u[1] = (old_u[1] + zopt[1]) + uoff[1];
      if (kidx > 0) {
        double aux2[75];
        double aux[7];
        for (int i{0}; i < 75; i++) {
          d = 0.0;
          for (i1 = 0; i1 < 156; i1++) {
            d += Hv[i + 75 * i1] * vseq[i1];
          }

          aux2[i] = ((((Sx[i] * x[0] + Sx[i + 75] * x[1]) + Sx[i + 150] * x[2])
                      + (Su1[i] * old_u[0] + Su1[i + 75] * old_u[1])) + d) -
            rseq[i];
        }

        d = old_u[0];
        d1 = old_u[1];
        for (int i{0}; i < 50; i++) {
          aux3[i] = (static_cast<double>(iv6[i]) * d + static_cast<double>(iv6[i
                      + 50]) * d1) - utarget[i];
        }

        for (int b_i{0}; b_i < 7; b_i++) {
          aux[b_i] = zopt[b_i];
        }

        BadH = 0.0;
        for (int i{0}; i < 50; i++) {
          d = aux3[i];
          BadH += d * (Wu[i] * d);
        }

        b_Kv = 0.0;
        for (int i{0}; i < 75; i++) {
          d = aux2[i];
          b_Kv += d * (Wy[i] * d);
        }

        WuI2Jm = 0.0;
        for (int i{0}; i < 7; i++) {
          d = 0.0;
          for (i1 = 0; i1 < 7; i1++) {
            d += H[i + 7 * i1] * aux[i1];
          }

          WuI2Jm += aux[i] * (d + 2.0 * f[i]);
        }

        *cost = (BadH + b_Kv) + WuI2Jm;
      }

      BadH = old_u[0] + uoff[0];
      b_Kv = old_u[1] + uoff[1];
      for (int i{0}; i < 50; i++) {
        d = 0.0;
        for (i1 = 0; i1 < 6; i1++) {
          d += I2Jm[i + 50 * i1] * zopt[i1];
        }

        aux3[i] = d + (static_cast<double>(iv6[i]) * BadH + static_cast<double>
                       (iv6[i + 50]) * b_Kv);
      }

      for (int i{0}; i < 2; i++) {
        for (i1 = 0; i1 < 25; i1++) {
          useq[i1 + 26 * i] = aux3[i + (i1 << 1)];
        }

        useq[26 * i + 25] = useq[26 * i + 24];
      }
    }
  }

  static void b_mpower(const double a[9], double b, double c[9])
  {
    double aBuffer[9];
    double b_a[9];
    double cBuffer[9];
    double e;
    e = std::abs(b);
    if (e <= 2.147483647E+9) {
      int b_n;
      int n;
      int nb;
      int nbitson;
      std::copy(&a[0], &a[9], &b_a[0]);
      n = static_cast<int>(e);
      b_n = static_cast<int>(e);
      nbitson = 0;
      nb = -2;
      while (b_n > 0) {
        nb++;
        if ((b_n & 1) != 0) {
          nbitson++;
        }

        b_n >>= 1;
      }

      if (static_cast<int>(e) <= 2) {
        if (b == 2.0) {
          for (b_n = 0; b_n < 3; b_n++) {
            for (nbitson = 0; nbitson < 3; nbitson++) {
              c[b_n + 3 * nbitson] = (a[b_n] * a[3 * nbitson] + a[b_n + 3] * a[3
                * nbitson + 1]) + a[b_n + 6] * a[3 * nbitson + 2];
            }
          }
        } else {
          boolean_T firstmult;
          firstmult = false;
          for (int k{0}; k < 9; k++) {
            if (firstmult || std::isnan(a[k])) {
              firstmult = true;
            }
          }

          if (firstmult) {
            for (b_n = 0; b_n < 9; b_n++) {
              c[b_n] = rtNaN;
            }
          } else {
            std::memset(&c[0], 0, 9U * sizeof(double));
            c[0] = 1.0;
            c[4] = 1.0;
            c[8] = 1.0;
          }
        }
      } else {
        double d;
        double d1;
        boolean_T aBufferInUse;
        boolean_T cBufferInUse;
        boolean_T firstmult;
        firstmult = true;
        aBufferInUse = false;
        cBufferInUse = ((nbitson & 1) == 0);
        for (int k{0}; k <= nb; k++) {
          if ((n & 1) != 0) {
            if (firstmult) {
              firstmult = false;
              if (cBufferInUse) {
                if (aBufferInUse) {
                  std::copy(&aBuffer[0], &aBuffer[9], &cBuffer[0]);
                } else {
                  std::copy(&b_a[0], &b_a[9], &cBuffer[0]);
                }
              } else if (aBufferInUse) {
                std::copy(&aBuffer[0], &aBuffer[9], &c[0]);
              } else {
                std::copy(&b_a[0], &b_a[9], &c[0]);
              }
            } else {
              if (aBufferInUse) {
                if (cBufferInUse) {
                  for (b_n = 0; b_n < 3; b_n++) {
                    e = cBuffer[b_n];
                    d = cBuffer[b_n + 3];
                    d1 = cBuffer[b_n + 6];
                    for (nbitson = 0; nbitson < 3; nbitson++) {
                      c[b_n + 3 * nbitson] = (e * aBuffer[3 * nbitson] + d *
                        aBuffer[3 * nbitson + 1]) + d1 * aBuffer[3 * nbitson + 2];
                    }
                  }
                } else {
                  for (b_n = 0; b_n < 3; b_n++) {
                    e = c[b_n];
                    d = c[b_n + 3];
                    d1 = c[b_n + 6];
                    for (nbitson = 0; nbitson < 3; nbitson++) {
                      cBuffer[b_n + 3 * nbitson] = (e * aBuffer[3 * nbitson] + d
                        * aBuffer[3 * nbitson + 1]) + d1 * aBuffer[3 * nbitson +
                        2];
                    }
                  }
                }
              } else if (cBufferInUse) {
                for (b_n = 0; b_n < 3; b_n++) {
                  e = cBuffer[b_n];
                  d = cBuffer[b_n + 3];
                  d1 = cBuffer[b_n + 6];
                  for (nbitson = 0; nbitson < 3; nbitson++) {
                    c[b_n + 3 * nbitson] = (e * b_a[3 * nbitson] + d * b_a[3 *
                      nbitson + 1]) + d1 * b_a[3 * nbitson + 2];
                  }
                }
              } else {
                for (b_n = 0; b_n < 3; b_n++) {
                  e = c[b_n];
                  d = c[b_n + 3];
                  d1 = c[b_n + 6];
                  for (nbitson = 0; nbitson < 3; nbitson++) {
                    cBuffer[b_n + 3 * nbitson] = (e * b_a[3 * nbitson] + d *
                      b_a[3 * nbitson + 1]) + d1 * b_a[3 * nbitson + 2];
                  }
                }
              }

              cBufferInUse = !cBufferInUse;
            }
          }

          n >>= 1;
          if (aBufferInUse) {
            for (b_n = 0; b_n < 3; b_n++) {
              for (nbitson = 0; nbitson < 3; nbitson++) {
                b_a[b_n + 3 * nbitson] = (aBuffer[b_n] * aBuffer[3 * nbitson] +
                  aBuffer[b_n + 3] * aBuffer[3 * nbitson + 1]) + aBuffer[b_n + 6]
                  * aBuffer[3 * nbitson + 2];
              }
            }
          } else {
            for (b_n = 0; b_n < 3; b_n++) {
              for (nbitson = 0; nbitson < 3; nbitson++) {
                aBuffer[b_n + 3 * nbitson] = (b_a[b_n] * b_a[3 * nbitson] +
                  b_a[b_n + 3] * b_a[3 * nbitson + 1]) + b_a[b_n + 6] * b_a[3 *
                  nbitson + 2];
              }
            }
          }

          aBufferInUse = !aBufferInUse;
        }

        if (firstmult) {
          if (aBufferInUse) {
            std::copy(&aBuffer[0], &aBuffer[9], &c[0]);
          } else {
            std::copy(&b_a[0], &b_a[9], &c[0]);
          }
        } else if (aBufferInUse) {
          for (b_n = 0; b_n < 3; b_n++) {
            e = cBuffer[b_n];
            d = cBuffer[b_n + 3];
            d1 = cBuffer[b_n + 6];
            for (nbitson = 0; nbitson < 3; nbitson++) {
              c[b_n + 3 * nbitson] = (e * aBuffer[3 * nbitson] + d * aBuffer[3 *
                nbitson + 1]) + d1 * aBuffer[3 * nbitson + 2];
            }
          }
        } else {
          for (b_n = 0; b_n < 3; b_n++) {
            e = cBuffer[b_n];
            d = cBuffer[b_n + 3];
            d1 = cBuffer[b_n + 6];
            for (nbitson = 0; nbitson < 3; nbitson++) {
              c[b_n + 3 * nbitson] = (e * b_a[3 * nbitson] + d * b_a[3 * nbitson
                + 1]) + d1 * b_a[3 * nbitson + 2];
            }
          }
        }
      }
    } else {
      std::copy(&a[0], &a[9], &b_a[0]);
      if ((!std::isinf(b)) && (!std::isnan(b))) {
        boolean_T firstmult;
        firstmult = true;
        double ed2;
        int exitg1;
        do {
          exitg1 = 0;
          ed2 = std::floor(e / 2.0);
          if (2.0 * ed2 != e) {
            if (firstmult) {
              std::copy(&b_a[0], &b_a[9], &c[0]);
              firstmult = false;
            } else {
              for (int b_n{0}; b_n < 3; b_n++) {
                double d;
                double d1;
                e = c[b_n];
                d = c[b_n + 3];
                d1 = c[b_n + 6];
                for (int nbitson{0}; nbitson < 3; nbitson++) {
                  cBuffer[b_n + 3 * nbitson] = (e * b_a[3 * nbitson] + d * b_a[3
                    * nbitson + 1]) + d1 * b_a[3 * nbitson + 2];
                }
              }

              std::copy(&cBuffer[0], &cBuffer[9], &c[0]);
            }
          }

          if (ed2 == 0.0) {
            exitg1 = 1;
          } else {
            e = ed2;
            for (int b_n{0}; b_n < 3; b_n++) {
              for (int nbitson{0}; nbitson < 3; nbitson++) {
                cBuffer[b_n + 3 * nbitson] = (b_a[b_n] * b_a[3 * nbitson] +
                  b_a[b_n + 3] * b_a[3 * nbitson + 1]) + b_a[b_n + 6] * b_a[3 *
                  nbitson + 2];
              }
            }

            std::copy(&cBuffer[0], &cBuffer[9], &b_a[0]);
          }
        } while (exitg1 == 0);
      } else {
        for (int b_n{0}; b_n < 9; b_n++) {
          c[b_n] = rtNaN;
        }
      }
    }
  }

  static double b_norm(const double x[2])
  {
    double absxk;
    double scale;
    double t;
    double y;
    scale = 3.3121686421112381E-170;
    absxk = std::abs(x[0]);
    if (absxk > 3.3121686421112381E-170) {
      y = 1.0;
      scale = absxk;
    } else {
      t = absxk / 3.3121686421112381E-170;
      y = t * t;
    }

    absxk = std::abs(x[1]);
    if (absxk > scale) {
      t = scale / absxk;
      y = y * t * t + 1.0;
      scale = absxk;
    } else {
      t = absxk / scale;
      y += t * t;
    }

    return scale * std::sqrt(y);
  }

  static void b_qpkwik(const double Linv[49], const double Hinv[49], const
                       double f[7], const double Ac[2170], const double b[310],
                       boolean_T iA[310], double x[7], double lambda[310], int
                       *status)
  {
    double cTol[310];
    double D[49];
    double H[49];
    double RLinv[49];
    double U[49];
    double Opt[14];
    double Rhs[14];
    double r[7];
    double z[7];
    double cMin;
    double cVal;
    double rMin;
    int iC[310];
    int b_exponent;
    int exponent;
    int i;
    int iSave;
    int j;
    int kDrop;
    int nA;
    int tmp;
    boolean_T ColdReset;
    boolean_T DualFeasible;
    boolean_T cTolComputed;
    boolean_T guard1{ false };

    for (i = 0; i < 7; i++) {
      x[i] = 0.0;
    }

    std::memset(&lambda[0], 0, 310U * sizeof(double));
    *status = 1;
    for (i = 0; i < 7; i++) {
      r[i] = 0.0;
    }

    rMin = 0.0;
    cTolComputed = false;
    for (i = 0; i < 310; i++) {
      cTol[i] = 1.0;
      iC[i] = 0;
    }

    nA = -1;
    for (i = 0; i < 310; i++) {
      if (iA[i]) {
        nA++;
        iC[nA] = i + 1;
      }
    }

    guard1 = false;
    if (nA + 1 > 0) {
      int exitg3;
      std::memset(&Opt[0], 0, 14U * sizeof(double));
      for (i = 0; i < 7; i++) {
        Rhs[i] = f[i];
        Rhs[i + 7] = 0.0;
      }

      DualFeasible = false;
      tmp = static_cast<int>(std::round(0.3 * static_cast<double>(nA + 1)));
      ColdReset = false;
      do {
        exitg3 = 0;
        if ((!DualFeasible) && (nA + 1 > 0) && (*status <= 1268)) {
          cVal = b_KWIKfactor(Ac, iC, nA + 1, Linv, RLinv, D, H);
          if (cVal < 0.0) {
            if (ColdReset) {
              *status = -2;
              exitg3 = 2;
            } else {
              nA = -1;
              std::memset(&iA[0], 0, 310U * sizeof(boolean_T));
              std::memset(&iC[0], 0, 310U * sizeof(int));
              ColdReset = true;
            }
          } else {
            for (j = 0; j <= nA; j++) {
              Rhs[j + 7] = b[iC[j] - 1];
              for (i = j + 1; i <= nA + 1; i++) {
                iSave = (i + 7 * j) - 1;
                U[iSave] = 0.0;
                for (int k{0}; k <= nA; k++) {
                  U[iSave] += RLinv[(i + 7 * k) - 1] * RLinv[j + 7 * k];
                }

                U[j + 7 * (i - 1)] = U[iSave];
              }
            }

            for (i = 0; i < 7; i++) {
              cVal = 0.0;
              for (j = 0; j < 7; j++) {
                cVal += H[i + 7 * j] * Rhs[j];
              }

              Opt[i] = cVal;
              for (int k{0}; k <= nA; k++) {
                Opt[i] += D[i + 7 * k] * Rhs[k + 7];
              }
            }

            for (i = 0; i <= nA; i++) {
              cVal = 0.0;
              for (j = 0; j < 7; j++) {
                cVal += D[j + 7 * i] * Rhs[j];
              }

              Opt[i + 7] = cVal;
              for (int k{0}; k <= nA; k++) {
                Opt[i + 7] += U[i + 7 * k] * Rhs[k + 7];
              }
            }

            cVal = -1.0E-12;
            kDrop = 0;
            for (i = 0; i <= nA; i++) {
              cMin = Opt[i + 7];
              lambda[iC[i] - 1] = cMin;
              if ((cMin < cVal) && (i + 1 <= nA + 1)) {
                kDrop = i + 1;
                cVal = cMin;
              }
            }

            if (kDrop <= 0) {
              DualFeasible = true;
              for (i = 0; i < 7; i++) {
                x[i] = Opt[i];
              }
            } else {
              (*status)++;
              if (tmp <= 5) {
                i = 5;
              } else {
                i = tmp;
              }

              if (*status > i) {
                nA = -1;
                std::memset(&iA[0], 0, 310U * sizeof(boolean_T));
                std::memset(&iC[0], 0, 310U * sizeof(int));
                ColdReset = true;
              } else {
                iSave = iC[kDrop - 1] - 1;
                lambda[iSave] = 0.0;
                iA[iSave] = false;
                if (kDrop < nA + 1) {
                  for (i = kDrop; i <= nA; i++) {
                    iC[i - 1] = iC[i];
                  }
                }

                iC[nA] = 0;
                nA--;
              }
            }
          }
        } else {
          if (nA + 1 <= 0) {
            std::memset(&lambda[0], 0, 310U * sizeof(double));
            for (i = 0; i < 7; i++) {
              cVal = 0.0;
              for (j = 0; j < 7; j++) {
                cVal += -Hinv[i + 7 * j] * f[j];
              }

              x[i] = cVal;
            }
          }

          exitg3 = 1;
        }
      } while (exitg3 == 0);

      if (exitg3 == 1) {
        guard1 = true;
      }
    } else {
      for (i = 0; i < 7; i++) {
        cVal = 0.0;
        for (j = 0; j < 7; j++) {
          cVal += -Hinv[i + 7 * j] * f[j];
        }

        x[i] = cVal;
      }

      guard1 = true;
    }

    if (guard1) {
      double Xnorm0;
      boolean_T exitg2;
      Xnorm0 = c_norm(x);
      exitg2 = false;
      while ((!exitg2) && (*status <= 1268)) {
        double b_Ac;
        cMin = -1.0E-6;
        tmp = -1;
        for (i = 0; i < 310; i++) {
          if (!cTolComputed) {
            for (int k{0}; k < 7; k++) {
              z[k] = std::abs(Ac[i + 310 * k] * x[k]);
            }

            cTol[i] = std::fmax(cTol[i], internal::maximum(z));
          }

          if (!iA[i]) {
            b_Ac = 0.0;
            for (j = 0; j < 7; j++) {
              b_Ac += Ac[i + 310 * j] * x[j];
            }

            cVal = (b_Ac - b[i]) / cTol[i];
            if (cVal < cMin) {
              cMin = cVal;
              tmp = i;
            }
          }
        }

        cTolComputed = true;
        if (tmp + 1 <= 0) {
          exitg2 = true;
        } else if (*status == 1268) {
          *status = 0;
          exitg2 = true;
        } else {
          int exitg1;
          do {
            exitg1 = 0;
            if ((tmp + 1 > 0) && (*status <= 1268)) {
              boolean_T guard2{ false };

              guard2 = false;
              if (nA + 1 == 0) {
                for (j = 0; j < 7; j++) {
                  cMin = 0.0;
                  for (iSave = 0; iSave < 7; iSave++) {
                    cMin += Hinv[j + 7 * iSave] * Ac[tmp + 310 * iSave];
                  }

                  z[j] = cMin;
                }

                guard2 = true;
              } else {
                cVal = b_KWIKfactor(Ac, iC, nA + 1, Linv, RLinv, D, H);
                if (cVal <= 0.0) {
                  *status = -2;
                  exitg1 = 1;
                } else {
                  for (j = 0; j < 49; j++) {
                    U[j] = -H[j];
                  }

                  for (j = 0; j < 7; j++) {
                    cMin = 0.0;
                    for (iSave = 0; iSave < 7; iSave++) {
                      cMin += U[j + 7 * iSave] * Ac[tmp + 310 * iSave];
                    }

                    z[j] = cMin;
                  }

                  for (i = 0; i <= nA; i++) {
                    b_Ac = 0.0;
                    for (j = 0; j < 7; j++) {
                      b_Ac += Ac[tmp + 310 * j] * D[j + 7 * i];
                    }

                    r[i] = b_Ac;
                  }

                  guard2 = true;
                }
              }

              if (guard2) {
                double t1;
                boolean_T exitg4;
                kDrop = 0;
                t1 = 0.0;
                ColdReset = true;
                DualFeasible = true;
                if (nA + 1 > 0) {
                  iSave = 0;
                  exitg4 = false;
                  while ((!exitg4) && (iSave <= nA)) {
                    if (r[iSave] >= 1.0E-12) {
                      DualFeasible = false;
                      exitg4 = true;
                    } else {
                      iSave++;
                    }
                  }
                }

                if ((nA + 1 != 0) && (!DualFeasible)) {
                  for (i = 0; i <= nA; i++) {
                    cMin = r[i];
                    if (cMin > 1.0E-12) {
                      cMin = lambda[iC[i] - 1] / cMin;
                      if ((kDrop == 0) || (cMin < rMin)) {
                        rMin = cMin;
                        kDrop = i + 1;
                      }
                    }
                  }

                  if (kDrop > 0) {
                    t1 = rMin;
                    ColdReset = false;
                  }
                }

                cVal = 0.0;
                for (int k{0}; k < 7; k++) {
                  cVal += z[k] * Ac[tmp + 310 * k];
                }

                if (cVal <= 0.0) {
                  cVal = 0.0;
                  DualFeasible = true;
                } else {
                  b_Ac = 0.0;
                  for (j = 0; j < 7; j++) {
                    b_Ac += Ac[tmp + 310 * j] * x[j];
                  }

                  cVal = (b[tmp] - b_Ac) / cVal;
                  DualFeasible = false;
                }

                if (ColdReset && DualFeasible) {
                  *status = -1;
                  exitg1 = 1;
                } else {
                  if (DualFeasible) {
                    cMin = t1;
                  } else if (ColdReset) {
                    cMin = cVal;
                  } else if (t1 < cVal) {
                    cMin = t1;
                  } else {
                    cMin = cVal;
                  }

                  for (i = 0; i <= nA; i++) {
                    lambda[iC[i] - 1] -= cMin * r[i];
                    if (lambda[iC[i] - 1] < 0.0) {
                      lambda[iC[i] - 1] = 0.0;
                    }
                  }

                  lambda[tmp] += cMin;
                  frexp(1.0, &exponent);
                  if ((std::abs(cMin - t1) < 2.2204460492503131E-16) && (kDrop >
                       0)) {
                    iA[iC[kDrop - 1] - 1] = false;
                    if (kDrop < nA + 1) {
                      for (i = kDrop; i <= nA; i++) {
                        iC[i - 1] = iC[i];
                      }
                    }

                    iC[nA] = 0;
                    nA--;
                  }

                  if (!DualFeasible) {
                    for (j = 0; j < 7; j++) {
                      x[j] += cMin * z[j];
                    }

                    frexp(1.0, &b_exponent);
                    if (std::abs(cMin - cVal) < 2.2204460492503131E-16) {
                      if (nA + 1 == 7) {
                        *status = -1;
                        exitg1 = 1;
                      } else {
                        nA++;
                        iC[nA] = tmp + 1;
                        i = nA;
                        exitg4 = false;
                        while ((!exitg4) && (i + 1 > 1)) {
                          j = iC[i - 1];
                          if (iC[i] > j) {
                            exitg4 = true;
                          } else {
                            iSave = iC[i];
                            iC[i] = j;
                            iC[i - 1] = iSave;
                            i--;
                          }
                        }

                        iA[tmp] = true;
                        tmp = -1;
                        (*status)++;
                      }
                    } else {
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                }
              }
            } else {
              cVal = c_norm(x);
              if (std::abs(cVal - Xnorm0) > 0.001) {
                Xnorm0 = cVal;
                for (int k{0}; k < 310; k++) {
                  cTol[k] = std::fmax(std::abs(b[k]), 1.0);
                }

                cTolComputed = false;
              }

              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      }
    }
  }

  static void b_recomputeBlockDiag(const double A[9], double F[9], const int
    blockFormat[2])
  {
    double delta;
    double expa;
    double expa22;
    double sinchdelta;
    if (blockFormat[0] != 0) {
      if (blockFormat[0] == 1) {
        sinchdelta = std::exp(A[0]);
        expa22 = std::exp(A[4]);
        expa = (A[0] + A[4]) / 2.0;
        if (std::fmax(expa, std::abs(A[0] - A[4]) / 2.0) < 709.782712893384) {
          delta = (A[4] - A[0]) / 2.0;
          if (delta == 0.0) {
            delta = 1.0;
          } else {
            delta = std::sinh(delta) / delta;
          }

          delta *= A[3] * std::exp(expa);
        } else {
          delta = A[3] * (expa22 - sinchdelta) / (A[4] - A[0]);
        }

        F[0] = sinchdelta;
        F[3] = delta;
        F[4] = expa22;
      } else {
        delta = std::sqrt(std::abs(A[1] * A[3]));
        expa = std::exp(A[0]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(delta) / delta;
        }

        F[0] = expa * std::cos(delta);
        F[1] = expa * A[1] * sinchdelta;
        F[3] = expa * A[3] * sinchdelta;
        F[4] = F[0];
      }
    }

    if (blockFormat[1] != 0) {
      if (blockFormat[1] == 1) {
        sinchdelta = std::exp(A[4]);
        expa22 = std::exp(A[8]);
        expa = (A[4] + A[8]) / 2.0;
        if (std::fmax(expa, std::abs(A[4] - A[8]) / 2.0) < 709.782712893384) {
          delta = (A[8] - A[4]) / 2.0;
          if (delta == 0.0) {
            delta = 1.0;
          } else {
            delta = std::sinh(delta) / delta;
          }

          delta *= A[7] * std::exp(expa);
        } else {
          delta = A[7] * (expa22 - sinchdelta) / (A[8] - A[4]);
        }

        F[4] = sinchdelta;
        F[7] = delta;
        F[8] = expa22;
      } else {
        delta = std::sqrt(std::abs(A[5] * A[7]));
        expa = std::exp(A[4]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(delta) / delta;
        }

        F[4] = expa * std::cos(delta);
        F[5] = expa * A[5] * sinchdelta;
        F[7] = expa * A[7] * sinchdelta;
        F[8] = F[4];
      }
    }

    if (blockFormat[1] == 0) {
      F[8] = std::exp(A[8]);
    }
  }

  static double c_norm(const double x[7])
  {
    double scale;
    double y;
    y = 0.0;
    scale = 3.3121686421112381E-170;
    for (int k{0}; k < 7; k++) {
      double absxk;
      absxk = std::abs(x[k]);
      if (absxk > scale) {
        double t;
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
      } else {
        double t;
        t = absxk / scale;
        y += t * t;
      }
    }

    return scale * std::sqrt(y);
  }

  static void expm(double A[25], double F[25])
  {
    double A2[25];
    double exptj;
    int k;
    boolean_T recomputeDiags;
    recomputeDiags = true;
    for (k = 0; k < 25; k++) {
      if ((!recomputeDiags) || (std::isinf(A[k]) || std::isnan(A[k]))) {
        recomputeDiags = false;
      }
    }

    if (!recomputeDiags) {
      for (int i{0}; i < 25; i++) {
        F[i] = rtNaN;
      }
    } else {
      int b_i;
      int exitg1;
      int j;
      boolean_T exitg2;
      recomputeDiags = true;
      j = 0;
      exitg2 = false;
      while ((!exitg2) && (j < 5)) {
        b_i = 0;
        do {
          exitg1 = 0;
          if (b_i < 5) {
            if ((b_i != j) && (!(A[b_i + 5 * j] == 0.0))) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              b_i++;
            }
          } else {
            j++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        std::memset(&F[0], 0, 25U * sizeof(double));
        for (b_i = 0; b_i < 5; b_i++) {
          k = b_i + 5 * b_i;
          F[k] = std::exp(A[k]);
        }
      } else {
        recomputeDiags = true;
        j = 0;
        exitg2 = false;
        while ((!exitg2) && (j < 5)) {
          b_i = 0;
          do {
            exitg1 = 0;
            if (b_i <= j) {
              if (!(A[b_i + 5 * j] == A[j + 5 * b_i])) {
                recomputeDiags = false;
                exitg1 = 1;
              } else {
                b_i++;
              }
            } else {
              j++;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }

        if (recomputeDiags) {
          double A4[25];
          double A6[25];
          std::copy(&A[0], &A[25], &A2[0]);
          schur(A2, A4);
          for (j = 0; j < 5; j++) {
            exptj = std::exp(A2[j + 5 * j]);
            for (b_i = 0; b_i < 5; b_i++) {
              k = b_i + 5 * j;
              A6[k] = A4[k] * exptj;
            }
          }

          for (int i{0}; i < 5; i++) {
            for (int i1{0}; i1 < 5; i1++) {
              exptj = 0.0;
              for (j = 0; j < 5; j++) {
                exptj += A6[i + 5 * j] * A4[i1 + 5 * j];
              }

              F[i + 5 * i1] = exptj;
            }
          }

          for (int i{0}; i < 5; i++) {
            for (int i1{0}; i1 < 5; i1++) {
              k = i1 + 5 * i;
              A2[k] = (F[k] + F[i + 5 * i1]) / 2.0;
            }
          }

          std::copy(&A2[0], &A2[25], &F[0]);
        } else {
          double A4[25];
          double A6[25];
          double x;
          int blockFormat[4];
          int i;
          int i1;
          recomputeDiags = true;
          j = 3;
          while (recomputeDiags && (j <= 5)) {
            b_i = j;
            while (recomputeDiags && (b_i <= 5)) {
              recomputeDiags = (A[(b_i + 5 * (j - 3)) - 1] == 0.0);
              b_i++;
            }

            j++;
          }

          if (recomputeDiags) {
            k = 0;
            exitg2 = false;
            while ((!exitg2) && (k < 4)) {
              i = k + 5 * k;
              exptj = A[i + 1];
              if (exptj != 0.0) {
                if ((k + 1 != 4) && (A[(k + 5 * (k + 1)) + 2] != 0.0)) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  i1 = k + 5 * (k + 1);
                  if (A[i] != A[i1 + 1]) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    if (!std::isnan(exptj)) {
                      if (A[(k + 5 * k) + 1] < 0.0) {
                        exptj = -1.0;
                      } else {
                        exptj = (A[(k + 5 * k) + 1] > 0.0);
                      }
                    }

                    x = A[i1];
                    if (!std::isnan(A[i1])) {
                      if (A[k + 5 * (k + 1)] < 0.0) {
                        x = -1.0;
                      } else {
                        x = (A[k + 5 * (k + 1)] > 0.0);
                      }
                    }

                    if (exptj * x != -1.0) {
                      recomputeDiags = false;
                      exitg2 = true;
                    } else {
                      k++;
                    }
                  }
                }
              } else {
                k++;
              }
            }
          }

          getExpmParams(A, A2, A4, A6, &k, &exptj);
          if (exptj != 0.0) {
            double b_y;
            double c_y;
            double y;
            x = rt_powd_snf(2.0, exptj);
            y = rt_powd_snf(2.0, 2.0 * exptj);
            b_y = rt_powd_snf(2.0, 4.0 * exptj);
            c_y = rt_powd_snf(2.0, 6.0 * exptj);
            for (i = 0; i < 25; i++) {
              A[i] /= x;
              A2[i] /= y;
              A4[i] /= b_y;
              A6[i] /= c_y;
            }
          }

          if (recomputeDiags) {
            blockFormat[0] = 0;
            blockFormat[1] = 0;
            blockFormat[2] = 0;
            blockFormat[3] = 0;
            j = 1;
            while (j < 4) {
              if (A[j + 5 * (j - 1)] != 0.0) {
                blockFormat[j - 1] = 2;
                blockFormat[j] = 0;
                j += 2;
              } else if (A[(j + 5 * j) + 1] == 0.0) {
                blockFormat[j - 1] = 1;
                j++;
              } else {
                blockFormat[j - 1] = 0;
                j++;
              }
            }

            if (A[19] != 0.0) {
              blockFormat[3] = 2;
            } else if ((blockFormat[2] == 0) || (blockFormat[2] == 1)) {
              blockFormat[3] = 1;
            }
          }

          padeApproximation(A, A2, A4, A6, k, F);
          if (recomputeDiags) {
            recomputeBlockDiag(A, F, blockFormat);
          }

          i = static_cast<int>(exptj);
          for (k = 0; k < i; k++) {
            for (i1 = 0; i1 < 5; i1++) {
              for (j = 0; j < 5; j++) {
                exptj = 0.0;
                for (b_i = 0; b_i < 5; b_i++) {
                  exptj += F[i1 + 5 * b_i] * F[b_i + 5 * j];
                }

                A2[i1 + 5 * j] = exptj;
              }
            }

            std::copy(&A2[0], &A2[25], &F[0]);
            if (recomputeDiags) {
              for (i1 = 0; i1 < 25; i1++) {
                A[i1] *= 2.0;
              }

              recomputeBlockDiag(A, F, blockFormat);
            }
          }
        }
      }
    }
  }

  static void getExpmParams(const double A[25], double A2[25], double A4[25],
    double A6[25], int *m, double *s)
  {
    double b_y[25];
    double dv[25];
    double b_s;
    double c_y;
    double d6;
    double d8;
    double eta1;
    double y;
    int eint;
    int j;
    boolean_T exitg1;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    boolean_T guard3{ false };

    boolean_T guard4{ false };

    *s = 0.0;
    for (j = 0; j < 5; j++) {
      for (int i{0}; i < 5; i++) {
        eta1 = 0.0;
        for (int b_i{0}; b_i < 5; b_i++) {
          eta1 += A[j + 5 * b_i] * A[b_i + 5 * i];
        }

        A2[j + 5 * i] = eta1;
      }
    }

    for (j = 0; j < 5; j++) {
      for (int i{0}; i < 5; i++) {
        eta1 = 0.0;
        for (int b_i{0}; b_i < 5; b_i++) {
          eta1 += A2[j + 5 * b_i] * A2[b_i + 5 * i];
        }

        A4[j + 5 * i] = eta1;
      }

      for (int i{0}; i < 5; i++) {
        eta1 = 0.0;
        for (int b_i{0}; b_i < 5; b_i++) {
          eta1 += A4[j + 5 * b_i] * A2[b_i + 5 * i];
        }

        A6[j + 5 * i] = eta1;
      }
    }

    y = 0.0;
    j = 0;
    exitg1 = false;
    while ((!exitg1) && (j < 5)) {
      b_s = 0.0;
      for (int i{0}; i < 5; i++) {
        b_s += std::abs(A6[i + 5 * j]);
      }

      if (std::isnan(b_s)) {
        y = rtNaN;
        exitg1 = true;
      } else {
        if (b_s > y) {
          y = b_s;
        }

        j++;
      }
    }

    d6 = rt_powd_snf(y, 0.16666666666666666);
    y = 0.0;
    j = 0;
    exitg1 = false;
    while ((!exitg1) && (j < 5)) {
      b_s = 0.0;
      for (int i{0}; i < 5; i++) {
        b_s += std::abs(A4[i + 5 * j]);
      }

      if (std::isnan(b_s)) {
        y = rtNaN;
        exitg1 = true;
      } else {
        if (b_s > y) {
          y = b_s;
        }

        j++;
      }
    }

    eta1 = std::fmax(rt_powd_snf(y, 0.25), d6);
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    if (eta1 <= 0.01495585217958292) {
      for (j = 0; j < 25; j++) {
        dv[j] = 0.19285012468241128 * std::abs(A[j]);
      }

      mpower(dv, 7.0, b_y);
      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 5)) {
        b_s = 0.0;
        for (int i{0}; i < 5; i++) {
          b_s += std::abs(b_y[i + 5 * j]);
        }

        if (std::isnan(b_s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > y) {
            y = b_s;
          }

          j++;
        }
      }

      c_y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 5)) {
        b_s = 0.0;
        for (int i{0}; i < 5; i++) {
          b_s += std::abs(A[i + 5 * j]);
        }

        if (std::isnan(b_s)) {
          c_y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > c_y) {
            c_y = b_s;
          }

          j++;
        }
      }

      y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 6.0;
      if (std::fmax(std::ceil(y), 0.0) == 0.0) {
        *m = 3;
      } else {
        guard4 = true;
      }
    } else {
      guard4 = true;
    }

    if (guard4) {
      if (eta1 <= 0.253939833006323) {
        for (j = 0; j < 25; j++) {
          dv[j] = 0.12321872304378752 * std::abs(A[j]);
        }

        mpower(dv, 11.0, b_y);
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 5)) {
          b_s = 0.0;
          for (int i{0}; i < 5; i++) {
            b_s += std::abs(b_y[i + 5 * j]);
          }

          if (std::isnan(b_s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > y) {
              y = b_s;
            }

            j++;
          }
        }

        c_y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 5)) {
          b_s = 0.0;
          for (int i{0}; i < 5; i++) {
            b_s += std::abs(A[i + 5 * j]);
          }

          if (std::isnan(b_s)) {
            c_y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > c_y) {
              c_y = b_s;
            }

            j++;
          }
        }

        y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 10.0;
        if (std::fmax(std::ceil(y), 0.0) == 0.0) {
          *m = 5;
        } else {
          guard3 = true;
        }
      } else {
        guard3 = true;
      }
    }

    if (guard3) {
      mpower(A4, 2.0, b_y);
      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 5)) {
        b_s = 0.0;
        for (int i{0}; i < 5; i++) {
          b_s += std::abs(b_y[i + 5 * j]);
        }

        if (std::isnan(b_s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > y) {
            y = b_s;
          }

          j++;
        }
      }

      d8 = rt_powd_snf(y, 0.125);
      d6 = std::fmax(d6, d8);
      if (d6 <= 0.95041789961629319) {
        for (j = 0; j < 25; j++) {
          dv[j] = 0.090475336558796943 * std::abs(A[j]);
        }

        mpower(dv, 15.0, b_y);
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 5)) {
          b_s = 0.0;
          for (int i{0}; i < 5; i++) {
            b_s += std::abs(b_y[i + 5 * j]);
          }

          if (std::isnan(b_s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > y) {
              y = b_s;
            }

            j++;
          }
        }

        c_y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 5)) {
          b_s = 0.0;
          for (int i{0}; i < 5; i++) {
            b_s += std::abs(A[i + 5 * j]);
          }

          if (std::isnan(b_s)) {
            c_y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > c_y) {
              c_y = b_s;
            }

            j++;
          }
        }

        y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 14.0;
        if (std::fmax(std::ceil(y), 0.0) == 0.0) {
          *m = 7;
        } else {
          guard2 = true;
        }
      } else {
        guard2 = true;
      }
    }

    if (guard2) {
      if (d6 <= 2.097847961257068) {
        for (j = 0; j < 25; j++) {
          dv[j] = 0.071467735648795785 * std::abs(A[j]);
        }

        mpower(dv, 19.0, b_y);
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 5)) {
          b_s = 0.0;
          for (int i{0}; i < 5; i++) {
            b_s += std::abs(b_y[i + 5 * j]);
          }

          if (std::isnan(b_s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > y) {
              y = b_s;
            }

            j++;
          }
        }

        c_y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 5)) {
          b_s = 0.0;
          for (int i{0}; i < 5; i++) {
            b_s += std::abs(A[i + 5 * j]);
          }

          if (std::isnan(b_s)) {
            c_y = rtNaN;
            exitg1 = true;
          } else {
            if (b_s > c_y) {
              c_y = b_s;
            }

            j++;
          }
        }

        y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 18.0;
        if (std::fmax(std::ceil(y), 0.0) == 0.0) {
          *m = 9;
        } else {
          guard1 = true;
        }
      } else {
        guard1 = true;
      }
    }

    if (guard1) {
      double T[25];
      for (j = 0; j < 5; j++) {
        for (int i{0}; i < 5; i++) {
          eta1 = 0.0;
          for (int b_i{0}; b_i < 5; b_i++) {
            eta1 += A4[j + 5 * b_i] * A6[b_i + 5 * i];
          }

          b_y[j + 5 * i] = eta1;
        }
      }

      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 5)) {
        *s = 0.0;
        for (int i{0}; i < 5; i++) {
          *s += std::abs(b_y[i + 5 * j]);
        }

        if (std::isnan(*s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (*s > y) {
            y = *s;
          }

          j++;
        }
      }

      y = b_log2(std::fmin(d6, std::fmax(d8, rt_powd_snf(y, 0.1))) /
                 5.3719203511481517);
      *s = std::fmax(std::ceil(y), 0.0);
      y = rt_powd_snf(2.0, *s);
      for (j = 0; j < 25; j++) {
        eta1 = A[j] / y;
        T[j] = eta1;
        dv[j] = 0.05031554467093536 * std::abs(eta1);
      }

      mpower(dv, 27.0, b_y);
      y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 5)) {
        b_s = 0.0;
        for (int i{0}; i < 5; i++) {
          b_s += std::abs(b_y[i + 5 * j]);
        }

        if (std::isnan(b_s)) {
          y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > y) {
            y = b_s;
          }

          j++;
        }
      }

      c_y = 0.0;
      j = 0;
      exitg1 = false;
      while ((!exitg1) && (j < 5)) {
        b_s = 0.0;
        for (int i{0}; i < 5; i++) {
          b_s += std::abs(T[i + 5 * j]);
        }

        if (std::isnan(b_s)) {
          c_y = rtNaN;
          exitg1 = true;
        } else {
          if (b_s > c_y) {
            c_y = b_s;
          }

          j++;
        }
      }

      y = b_log2(2.0 * (y / c_y) / 2.2204460492503131E-16) / 26.0;
      *s += std::fmax(std::ceil(y), 0.0);
      if (std::isinf(*s)) {
        y = 0.0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 5)) {
          *s = 0.0;
          for (int i{0}; i < 5; i++) {
            *s += std::abs(A[i + 5 * j]);
          }

          if (std::isnan(*s)) {
            y = rtNaN;
            exitg1 = true;
          } else {
            if (*s > y) {
              y = *s;
            }

            j++;
          }
        }

        y /= 5.3719203511481517;
        if ((!std::isinf(y)) && (!std::isnan(y))) {
          y = frexp(y, &eint);
        } else {
          eint = 0;
        }

        *s = eint;
        if (y == 0.5) {
          *s = static_cast<double>(eint) - 1.0;
        }
      }

      *m = 13;
    }
  }

  namespace internal
  {
    namespace blas
    {
      static void b_xgerc(int m, int n, double alpha1, int ix0, const double y[3],
                          double A[9], int ia0)
      {
        if (!(alpha1 == 0.0)) {
          int jA;
          jA = ia0;
          for (int j{0}; j < n; j++) {
            double temp;
            temp = y[j];
            if (temp != 0.0) {
              int i;
              temp *= alpha1;
              i = m + jA;
              for (int ijA{jA}; ijA < i; ijA++) {
                A[ijA - 1] += A[((ix0 + ijA) - jA) - 1] * temp;
              }
            }

            jA += 3;
          }
        }
      }

      static double b_xnrm2(int n, const double x[49], int ix0)
      {
        double y;
        y = 0.0;
        if (n >= 1) {
          if (n == 1) {
            y = std::abs(x[ix0 - 1]);
          } else {
            double scale;
            int kend;
            scale = 3.3121686421112381E-170;
            kend = (ix0 + n) - 1;
            for (int k{ix0}; k <= kend; k++) {
              double absxk;
              absxk = std::abs(x[k - 1]);
              if (absxk > scale) {
                double t;
                t = scale / absxk;
                y = y * t * t + 1.0;
                scale = absxk;
              } else {
                double t;
                t = absxk / scale;
                y += t * t;
              }
            }

            y = scale * std::sqrt(y);
          }
        }

        return y;
      }

      static void xgerc(int m, int n, double alpha1, int ix0, const double y[7],
                        double A[49], int ia0)
      {
        if (!(alpha1 == 0.0)) {
          int jA;
          jA = ia0;
          for (int j{0}; j < n; j++) {
            double temp;
            temp = y[j];
            if (temp != 0.0) {
              int i;
              temp *= alpha1;
              i = m + jA;
              for (int ijA{jA}; ijA < i; ijA++) {
                A[ijA - 1] += A[((ix0 + ijA) - jA) - 1] * temp;
              }
            }

            jA += 7;
          }
        }
      }

      static double xnrm2(int n, const double x[3])
      {
        double y;
        y = 0.0;
        if (n >= 1) {
          if (n == 1) {
            y = std::abs(x[1]);
          } else {
            double absxk;
            double scale;
            double t;
            scale = 3.3121686421112381E-170;
            absxk = std::abs(x[1]);
            if (absxk > 3.3121686421112381E-170) {
              y = 1.0;
              scale = absxk;
            } else {
              t = absxk / 3.3121686421112381E-170;
              y = t * t;
            }

            absxk = std::abs(x[2]);
            if (absxk > scale) {
              t = scale / absxk;
              y = y * t * t + 1.0;
              scale = absxk;
            } else {
              t = absxk / scale;
              y += t * t;
            }

            y = scale * std::sqrt(y);
          }
        }

        return y;
      }

      static double xnrm2(int n, const double x[25], int ix0)
      {
        double y;
        y = 0.0;
        if (n >= 1) {
          if (n == 1) {
            y = std::abs(x[ix0 - 1]);
          } else {
            double scale;
            int kend;
            scale = 3.3121686421112381E-170;
            kend = (ix0 + n) - 1;
            for (int k{ix0}; k <= kend; k++) {
              double absxk;
              absxk = std::abs(x[k - 1]);
              if (absxk > scale) {
                double t;
                t = scale / absxk;
                y = y * t * t + 1.0;
                scale = absxk;
              } else {
                double t;
                t = absxk / scale;
                y += t * t;
              }
            }

            y = scale * std::sqrt(y);
          }
        }

        return y;
      }
    }

    namespace lapack
    {
      static int xhseqr(double h[9], double z[9])
      {
        double v[3];
        double aa;
        double ab;
        double ba;
        double bb;
        double d;
        double h22;
        double rt1r;
        double s;
        double tst;
        int i;
        int info;
        boolean_T exitg1;
        info = 0;
        v[0] = 0.0;
        v[1] = 0.0;
        v[2] = 0.0;
        h[2] = 0.0;
        i = 2;
        exitg1 = false;
        while ((!exitg1) && (i + 1 >= 1)) {
          int hoffset;
          int its;
          int k;
          int m;
          int nr;
          int sum1_tmp_tmp;
          boolean_T exitg2;
          boolean_T goto150;
          k = -1;
          goto150 = false;
          its = 0;
          exitg2 = false;
          while ((!exitg2) && (its < 301)) {
            boolean_T exitg3;
            k = i - 1;
            exitg3 = false;
            while ((!exitg3) && (k + 2 > 1)) {
              sum1_tmp_tmp = k + 3 * k;
              ba = std::abs(h[sum1_tmp_tmp + 1]);
              if (ba <= 3.0062525400134592E-292) {
                exitg3 = true;
              } else {
                nr = 3 * (k + 1);
                hoffset = k + nr;
                bb = std::abs(h[hoffset + 1]);
                tst = std::abs(h[sum1_tmp_tmp]) + bb;
                if (tst == 0.0) {
                  if (k >= 1) {
                    tst = std::abs(h[k]);
                  }

                  if (k + 3 <= 3) {
                    tst += std::abs(h[nr + 2]);
                  }
                }

                if (ba <= 2.2204460492503131E-16 * tst) {
                  tst = std::abs(h[hoffset]);
                  if (ba > tst) {
                    ab = ba;
                    ba = tst;
                  } else {
                    ab = tst;
                  }

                  tst = std::abs(h[sum1_tmp_tmp] - h[hoffset + 1]);
                  if (bb > tst) {
                    aa = bb;
                    bb = tst;
                  } else {
                    aa = tst;
                  }

                  s = aa + ab;
                  if (ba * (ab / s) <= std::fmax(3.0062525400134592E-292,
                       2.2204460492503131E-16 * (bb * (aa / s)))) {
                    exitg3 = true;
                  } else {
                    k--;
                  }
                } else {
                  k--;
                }
              }
            }

            if (k + 2 > 1) {
              h[(k + 3 * k) + 1] = 0.0;
            }

            if (k + 2 >= i) {
              goto150 = true;
              exitg2 = true;
            } else {
              if (its == 10) {
                s = std::abs(h[1]) + std::abs(h[5]);
                tst = 0.75 * s + h[0];
                aa = -0.4375 * s;
                ab = s;
                h22 = tst;
              } else if (its == 20) {
                s = std::abs(h[i + 3 * (i - 1)]) + std::abs(h[i - 1]);
                tst = 0.75 * s + h[i + 3 * i];
                aa = -0.4375 * s;
                ab = s;
                h22 = tst;
              } else {
                nr = i + 3 * (i - 1);
                tst = h[nr - 1];
                ab = h[nr];
                aa = h[(i + 3 * i) - 1];
                h22 = h[i + 3 * i];
              }

              s = ((std::abs(tst) + std::abs(aa)) + std::abs(ab)) + std::abs(h22);
              if (s == 0.0) {
                rt1r = 0.0;
                tst = 0.0;
                bb = 0.0;
                ab = 0.0;
              } else {
                tst /= s;
                ab /= s;
                aa /= s;
                h22 /= s;
                ba = (tst + h22) / 2.0;
                tst = (tst - ba) * (h22 - ba) - aa * ab;
                ab = std::sqrt(std::abs(tst));
                if (tst >= 0.0) {
                  rt1r = ba * s;
                  bb = rt1r;
                  tst = ab * s;
                  ab = -tst;
                } else {
                  rt1r = ba + ab;
                  bb = ba - ab;
                  if (std::abs(rt1r - h22) <= std::abs(bb - h22)) {
                    rt1r *= s;
                    bb = rt1r;
                  } else {
                    bb *= s;
                    rt1r = bb;
                  }

                  tst = 0.0;
                  ab = 0.0;
                }
              }

              m = i - 1;
              if (i - 1 >= 1) {
                aa = h[0] - bb;
                s = (std::abs(aa) + std::abs(ab)) + std::abs(h[1]);
                ba = h[1] / s;
                v[0] = (ba * h[3] + (h[0] - rt1r) * (aa / s)) - tst * (ab / s);
                v[1] = ba * (((h[0] + h[4]) - rt1r) - bb);
                v[2] = ba * h[5];
                s = (std::abs(v[0]) + std::abs(v[1])) + std::abs(v[2]);
                v[0] /= s;
                v[1] /= s;
                v[2] /= s;
              }

              for (int b_k{m}; b_k <= i; b_k++) {
                nr = (i - b_k) + 2;
                if (nr >= 3) {
                  nr = 3;
                }

                if (b_k > i - 1) {
                  hoffset = (b_k + 3 * (b_k - 2)) - 1;
                  for (int j{0}; j < nr; j++) {
                    v[j] = h[j + hoffset];
                  }
                }

                tst = v[0];
                bb = reflapack::xzlarfg(nr, &tst, v);
                v[0] = tst;
                if (b_k > i - 1) {
                  h[b_k - 1] = tst;
                  h[b_k] = 0.0;
                  if (b_k < i) {
                    h[2] = 0.0;
                  }
                }

                s = v[1];
                tst = bb * v[1];
                if (nr == 3) {
                  d = v[2];
                  ba = bb * v[2];
                  for (int j{b_k}; j < 4; j++) {
                    sum1_tmp_tmp = 3 * (j - 1);
                    hoffset = b_k + sum1_tmp_tmp;
                    aa = (h[hoffset - 1] + s * h[hoffset]) + d * h[sum1_tmp_tmp
                      + 2];
                    h[hoffset - 1] -= aa * bb;
                    h[hoffset] -= aa * tst;
                    h[sum1_tmp_tmp + 2] -= aa * ba;
                  }

                  if (b_k + 3 <= i + 1) {
                    sum1_tmp_tmp = b_k + 2;
                  } else {
                    sum1_tmp_tmp = i;
                  }

                  for (int j{0}; j <= sum1_tmp_tmp; j++) {
                    hoffset = j + 3 * (b_k - 1);
                    nr = j + 3 * b_k;
                    aa = (h[hoffset] + s * h[nr]) + d * h[j + 6];
                    h[hoffset] -= aa * bb;
                    h[nr] -= aa * tst;
                    h[j + 6] -= aa * ba;
                  }

                  for (int j{0}; j < 3; j++) {
                    hoffset = j + 3 * (b_k - 1);
                    ab = z[hoffset];
                    nr = j + 3 * b_k;
                    aa = (ab + s * z[nr]) + d * z[j + 6];
                    z[hoffset] = ab - aa * bb;
                    z[nr] -= aa * tst;
                    z[j + 6] -= aa * ba;
                  }
                } else if (nr == 2) {
                  for (int j{b_k}; j < 4; j++) {
                    hoffset = b_k + 3 * (j - 1);
                    ab = h[hoffset - 1];
                    aa = ab + s * h[hoffset];
                    h[hoffset - 1] = ab - aa * bb;
                    h[hoffset] -= aa * tst;
                  }

                  for (int j{0}; j <= i; j++) {
                    hoffset = j + 3 * (b_k - 1);
                    nr = j + 3 * b_k;
                    aa = h[hoffset] + s * h[nr];
                    h[hoffset] -= aa * bb;
                    h[nr] -= aa * tst;
                  }

                  for (int j{0}; j < 3; j++) {
                    hoffset = j + 3 * (b_k - 1);
                    ab = z[hoffset];
                    nr = j + 3 * b_k;
                    aa = ab + s * z[nr];
                    z[hoffset] = ab - aa * bb;
                    z[nr] -= aa * tst;
                  }
                }
              }

              its++;
            }
          }

          if (!goto150) {
            info = i + 1;
            exitg1 = true;
          } else {
            if ((k + 2 != i + 1) && (k + 2 == i)) {
              sum1_tmp_tmp = i + 3 * i;
              s = h[sum1_tmp_tmp - 1];
              m = 3 * (i - 1);
              nr = i + m;
              d = h[nr];
              tst = h[sum1_tmp_tmp];
              reflapack::xdlanv2(&h[(i + 3 * (i - 1)) - 1], &s, &d, &tst, &ab,
                                 &aa, &ba, &bb, &h22, &rt1r);
              h[sum1_tmp_tmp - 1] = s;
              h[nr] = d;
              h[sum1_tmp_tmp] = tst;
              if (i + 1 < 3) {
                nr = 1 - i;
                hoffset = i + (i + 1) * 3;
                for (int b_k{0}; b_k <= nr; b_k++) {
                  sum1_tmp_tmp = hoffset + b_k * 3;
                  tst = h22 * h[sum1_tmp_tmp - 1] + rt1r * h[sum1_tmp_tmp];
                  h[sum1_tmp_tmp] = h22 * h[sum1_tmp_tmp] - rt1r *
                    h[sum1_tmp_tmp - 1];
                  h[sum1_tmp_tmp - 1] = tst;
                }
              }

              nr = i * 3;
              if (i - 1 >= 1) {
                tst = h22 * h[m] + rt1r * h[nr];
                h[nr] = h22 * h[nr] - rt1r * h[m];
                h[m] = tst;
              }

              tst = h22 * z[m] + rt1r * z[nr];
              z[nr] = h22 * z[nr] - rt1r * z[m];
              z[m] = tst;
              tst = z[nr + 1];
              ab = z[m + 1];
              z[nr + 1] = h22 * tst - rt1r * ab;
              z[m + 1] = h22 * ab + rt1r * tst;
              tst = z[nr + 2];
              ab = z[m + 2];
              z[nr + 2] = h22 * tst - rt1r * ab;
              z[m + 2] = h22 * ab + rt1r * tst;
            }

            i = k;
          }
        }

        return info;
      }

      static int xpotrf(double A[49])
      {
        int info;
        int j;
        boolean_T exitg1;
        info = 0;
        j = 0;
        exitg1 = false;
        while ((!exitg1) && (j < 7)) {
          double c;
          double ssq;
          int idxAjj;
          int k;
          idxAjj = j + j * 7;
          ssq = 0.0;
          if (j >= 1) {
            for (k = 0; k < j; k++) {
              c = A[j + k * 7];
              ssq += c * c;
            }
          }

          ssq = A[idxAjj] - ssq;
          if (ssq > 0.0) {
            ssq = std::sqrt(ssq);
            A[idxAjj] = ssq;
            if (j + 1 < 7) {
              int i;
              int ia0;
              int idxAjp1j;
              ia0 = j + 2;
              idxAjp1j = idxAjj + 2;
              if (j != 0) {
                i = (j + 7 * (j - 1)) + 2;
                for (int iac{ia0}; iac <= i; iac += 7) {
                  k = iac - j;
                  c = -A[j + div_nde_s32_floor(k - 2, 7) * 7];
                  k += 5;
                  for (int ia{iac}; ia <= k; ia++) {
                    int i1;
                    i1 = ((idxAjj + ia) - iac) + 1;
                    A[i1] += A[ia - 1] * c;
                  }
                }
              }

              ssq = 1.0 / ssq;
              i = (idxAjj - j) + 7;
              for (k = idxAjp1j; k <= i; k++) {
                A[k - 1] *= ssq;
              }
            }

            j++;
          } else {
            A[idxAjj] = ssq;
            info = j + 1;
            exitg1 = true;
          }
        }

        return info;
      }
    }

    static double maximum(const double x[7])
    {
      double ex;
      int idx;
      int k;
      if (!std::isnan(x[0])) {
        idx = 1;
      } else {
        boolean_T exitg1;
        idx = 0;
        k = 2;
        exitg1 = false;
        while ((!exitg1) && (k < 8)) {
          if (!std::isnan(x[k - 1])) {
            idx = k;
            exitg1 = true;
          } else {
            k++;
          }
        }
      }

      if (idx == 0) {
        ex = x[0];
      } else {
        ex = x[idx - 1];
        idx++;
        for (k = idx; k < 8; k++) {
          double d;
          d = x[k - 1];
          if (ex < d) {
            ex = d;
          }
        }
      }

      return ex;
    }

    static double minimum(const double x[7])
    {
      double ex;
      int idx;
      int k;
      if (!std::isnan(x[0])) {
        idx = 1;
      } else {
        boolean_T exitg1;
        idx = 0;
        k = 2;
        exitg1 = false;
        while ((!exitg1) && (k < 8)) {
          if (!std::isnan(x[k - 1])) {
            idx = k;
            exitg1 = true;
          } else {
            k++;
          }
        }
      }

      if (idx == 0) {
        ex = x[0];
      } else {
        ex = x[idx - 1];
        idx++;
        for (k = idx; k < 8; k++) {
          double d;
          d = x[k - 1];
          if (ex > d) {
            ex = d;
          }
        }
      }

      return ex;
    }

    namespace reflapack
    {
      static int eml_dlahqr(double h[25], double z[25])
      {
        double v[3];
        double aa;
        double ab;
        double ba;
        double bb;
        double rt1r;
        double rt2r;
        double s;
        double s_tmp;
        double tst;
        int i;
        int info;
        boolean_T exitg1;
        info = 0;
        v[0] = 0.0;
        v[1] = 0.0;
        v[2] = 0.0;
        h[2] = 0.0;
        h[3] = 0.0;
        h[8] = 0.0;
        h[9] = 0.0;
        h[14] = 0.0;
        i = 4;
        exitg1 = false;
        while ((!exitg1) && (i + 1 >= 1)) {
          int L;
          int b_i;
          int hoffset;
          int its;
          int j;
          int k;
          int nr;
          int sum1_tmp;
          boolean_T exitg2;
          boolean_T goto150;
          L = 1;
          goto150 = false;
          its = 0;
          exitg2 = false;
          while ((!exitg2) && (its < 301)) {
            boolean_T exitg3;
            k = i;
            exitg3 = false;
            while ((!exitg3) && (k + 1 > L)) {
              b_i = k + 5 * (k - 1);
              ba = std::abs(h[b_i]);
              if (ba <= 5.0104209000224319E-292) {
                exitg3 = true;
              } else {
                hoffset = k + 5 * k;
                bb = std::abs(h[hoffset]);
                tst = std::abs(h[b_i - 1]) + bb;
                if (tst == 0.0) {
                  if (k - 1 >= 1) {
                    tst = std::abs(h[(k + 5 * (k - 2)) - 1]);
                  }

                  if (k + 2 <= 5) {
                    tst += std::abs(h[hoffset + 1]);
                  }
                }

                if (ba <= 2.2204460492503131E-16 * tst) {
                  tst = std::abs(h[hoffset - 1]);
                  if (ba > tst) {
                    ab = ba;
                    ba = tst;
                  } else {
                    ab = tst;
                  }

                  tst = std::abs(h[b_i - 1] - h[hoffset]);
                  if (bb > tst) {
                    aa = bb;
                    bb = tst;
                  } else {
                    aa = tst;
                  }

                  s = aa + ab;
                  if (ba * (ab / s) <= std::fmax(5.0104209000224319E-292,
                       2.2204460492503131E-16 * (bb * (aa / s)))) {
                    exitg3 = true;
                  } else {
                    k--;
                  }
                } else {
                  k--;
                }
              }
            }

            L = k + 1;
            if (k + 1 > 1) {
              h[k + 5 * (k - 1)] = 0.0;
            }

            if (k + 1 >= i) {
              goto150 = true;
              exitg2 = true;
            } else {
              int m;
              if (its == 10) {
                hoffset = k + 5 * k;
                s = std::abs(h[hoffset + 1]) + std::abs(h[(k + 5 * (k + 1)) + 2]);
                tst = 0.75 * s + h[hoffset];
                aa = -0.4375 * s;
                ab = s;
                bb = tst;
              } else if (its == 20) {
                s = std::abs(h[i + 5 * (i - 1)]) + std::abs(h[(i + 5 * (i - 2))
                  - 1]);
                tst = 0.75 * s + h[i + 5 * i];
                aa = -0.4375 * s;
                ab = s;
                bb = tst;
              } else {
                hoffset = i + 5 * (i - 1);
                tst = h[hoffset - 1];
                ab = h[hoffset];
                aa = h[(i + 5 * i) - 1];
                bb = h[i + 5 * i];
              }

              s = ((std::abs(tst) + std::abs(aa)) + std::abs(ab)) + std::abs(bb);
              if (s == 0.0) {
                rt1r = 0.0;
                ba = 0.0;
                rt2r = 0.0;
                bb = 0.0;
              } else {
                tst /= s;
                ab /= s;
                aa /= s;
                bb /= s;
                ba = (tst + bb) / 2.0;
                tst = (tst - ba) * (bb - ba) - aa * ab;
                ab = std::sqrt(std::abs(tst));
                if (tst >= 0.0) {
                  rt1r = ba * s;
                  rt2r = rt1r;
                  ba = ab * s;
                  bb = -ba;
                } else {
                  rt1r = ba + ab;
                  rt2r = ba - ab;
                  if (std::abs(rt1r - bb) <= std::abs(rt2r - bb)) {
                    rt1r *= s;
                    rt2r = rt1r;
                  } else {
                    rt2r *= s;
                    rt1r = rt2r;
                  }

                  ba = 0.0;
                  bb = 0.0;
                }
              }

              m = i - 1;
              exitg3 = false;
              while ((!exitg3) && (m >= k + 1)) {
                hoffset = m + 5 * (m - 1);
                tst = h[hoffset];
                s_tmp = h[hoffset - 1];
                ab = s_tmp - rt2r;
                s = (std::abs(ab) + std::abs(bb)) + std::abs(tst);
                aa = tst / s;
                hoffset = m + 5 * m;
                v[0] = (aa * h[hoffset - 1] + (s_tmp - rt1r) * (ab / s)) - ba *
                  (bb / s);
                tst = h[hoffset];
                v[1] = aa * (((s_tmp + tst) - rt1r) - rt2r);
                v[2] = aa * h[hoffset + 1];
                s = (std::abs(v[0]) + std::abs(v[1])) + std::abs(v[2]);
                v[0] /= s;
                v[1] /= s;
                v[2] /= s;
                if (m == k + 1) {
                  exitg3 = true;
                } else {
                  b_i = m + 5 * (m - 2);
                  if (std::abs(h[b_i - 1]) * (std::abs(v[1]) + std::abs(v[2])) <=
                      2.2204460492503131E-16 * std::abs(v[0]) * ((std::abs(h[b_i
                         - 2]) + std::abs(s_tmp)) + std::abs(tst))) {
                    exitg3 = true;
                  } else {
                    m--;
                  }
                }
              }

              for (int b_k{m}; b_k <= i; b_k++) {
                hoffset = (i - b_k) + 2;
                if (hoffset >= 3) {
                  nr = 3;
                } else {
                  nr = hoffset;
                }

                if (b_k > m) {
                  hoffset = (b_k + 5 * (b_k - 2)) - 1;
                  for (j = 0; j < nr; j++) {
                    v[j] = h[j + hoffset];
                  }
                }

                tst = v[0];
                bb = xzlarfg(nr, &tst, v);
                v[0] = tst;
                if (b_k > m) {
                  h[(b_k + 5 * (b_k - 2)) - 1] = tst;
                  b_i = b_k + 5 * (b_k - 2);
                  h[b_i] = 0.0;
                  if (b_k < i) {
                    h[b_i + 1] = 0.0;
                  }
                } else if (m > k + 1) {
                  h[(b_k + 5 * (b_k - 2)) - 1] *= 1.0 - bb;
                }

                rt1r = v[1];
                tst = bb * v[1];
                if (nr == 3) {
                  s = v[2];
                  ba = bb * v[2];
                  for (j = b_k; j < 6; j++) {
                    sum1_tmp = b_k + 5 * (j - 1);
                    aa = (h[sum1_tmp - 1] + rt1r * h[sum1_tmp]) + s * h[sum1_tmp
                      + 1];
                    h[sum1_tmp - 1] -= aa * bb;
                    h[sum1_tmp] -= aa * tst;
                    h[sum1_tmp + 1] -= aa * ba;
                  }

                  if (b_k + 3 <= i + 1) {
                    b_i = b_k + 2;
                  } else {
                    b_i = i;
                  }

                  for (j = 0; j <= b_i; j++) {
                    sum1_tmp = j + 5 * (b_k - 1);
                    hoffset = j + 5 * b_k;
                    nr = j + 5 * (b_k + 1);
                    aa = (h[sum1_tmp] + rt1r * h[hoffset]) + s * h[nr];
                    h[sum1_tmp] -= aa * bb;
                    h[hoffset] -= aa * tst;
                    h[nr] -= aa * ba;
                  }

                  for (j = 0; j < 5; j++) {
                    sum1_tmp = j + 5 * (b_k - 1);
                    ab = z[sum1_tmp];
                    hoffset = j + 5 * b_k;
                    nr = j + 5 * (b_k + 1);
                    aa = (ab + rt1r * z[hoffset]) + s * z[nr];
                    z[sum1_tmp] = ab - aa * bb;
                    z[hoffset] -= aa * tst;
                    z[nr] -= aa * ba;
                  }
                } else if (nr == 2) {
                  for (j = b_k; j < 6; j++) {
                    sum1_tmp = b_k + 5 * (j - 1);
                    ab = h[sum1_tmp - 1];
                    aa = ab + rt1r * h[sum1_tmp];
                    h[sum1_tmp - 1] = ab - aa * bb;
                    h[sum1_tmp] -= aa * tst;
                  }

                  for (j = 0; j <= i; j++) {
                    sum1_tmp = j + 5 * (b_k - 1);
                    hoffset = j + 5 * b_k;
                    aa = h[sum1_tmp] + rt1r * h[hoffset];
                    h[sum1_tmp] -= aa * bb;
                    h[hoffset] -= aa * tst;
                  }

                  for (j = 0; j < 5; j++) {
                    sum1_tmp = j + 5 * (b_k - 1);
                    ab = z[sum1_tmp];
                    hoffset = j + 5 * b_k;
                    aa = ab + rt1r * z[hoffset];
                    z[sum1_tmp] = ab - aa * bb;
                    z[hoffset] -= aa * tst;
                  }
                }
              }

              its++;
            }
          }

          if (!goto150) {
            info = i + 1;
            exitg1 = true;
          } else {
            if ((L != i + 1) && (L == i)) {
              b_i = i + 5 * i;
              rt1r = h[b_i - 1];
              j = 5 * (i - 1);
              hoffset = i + j;
              s = h[hoffset];
              tst = h[b_i];
              xdlanv2(&h[(i + 5 * (i - 1)) - 1], &rt1r, &s, &tst, &ab, &aa, &ba,
                      &bb, &s_tmp, &rt2r);
              h[b_i - 1] = rt1r;
              h[hoffset] = s;
              h[b_i] = tst;
              if (i + 1 < 5) {
                hoffset = 3 - i;
                nr = i + (i + 1) * 5;
                for (k = 0; k <= hoffset; k++) {
                  sum1_tmp = nr + k * 5;
                  tst = h[sum1_tmp];
                  ab = h[sum1_tmp - 1];
                  h[sum1_tmp] = s_tmp * tst - rt2r * ab;
                  h[sum1_tmp - 1] = s_tmp * ab + rt2r * tst;
                }
              }

              hoffset = i * 5;
              if (i - 1 >= 1) {
                for (k = 0; k <= i - 2; k++) {
                  nr = hoffset + k;
                  sum1_tmp = j + k;
                  tst = s_tmp * h[sum1_tmp] + rt2r * h[nr];
                  h[nr] = s_tmp * h[nr] - rt2r * h[sum1_tmp];
                  h[sum1_tmp] = tst;
                }
              }

              for (k = 0; k < 5; k++) {
                nr = hoffset + k;
                tst = z[nr];
                sum1_tmp = j + k;
                ab = z[sum1_tmp];
                z[nr] = s_tmp * tst - rt2r * ab;
                z[sum1_tmp] = s_tmp * ab + rt2r * tst;
              }
            }

            i = L - 2;
          }
        }

        return info;
      }

      static void xdlanv2(double *a, double *b, double *c, double *d, double
                          *rt1r, double *rt1i, double *rt2r, double *rt2i,
                          double *cs, double *sn)
      {
        if (*c == 0.0) {
          *cs = 1.0;
          *sn = 0.0;
        } else if (*b == 0.0) {
          double bcmax;
          *cs = 0.0;
          *sn = 1.0;
          bcmax = *d;
          *d = *a;
          *a = bcmax;
          *b = -*c;
          *c = 0.0;
        } else {
          double tau;
          tau = *a - *d;
          if ((tau == 0.0) && ((*b < 0.0) != (*c < 0.0))) {
            *cs = 1.0;
            *sn = 0.0;
          } else {
            double bcmax;
            double bcmis;
            double p;
            double scale;
            double z;
            int b_b;
            int b_c;
            p = 0.5 * tau;
            bcmis = std::abs(*b);
            scale = std::abs(*c);
            bcmax = std::fmax(bcmis, scale);
            if (!(*b < 0.0)) {
              b_b = 1;
            } else {
              b_b = -1;
            }

            if (!(*c < 0.0)) {
              b_c = 1;
            } else {
              b_c = -1;
            }

            bcmis = std::fmin(bcmis, scale) * static_cast<double>(b_b) *
              static_cast<double>(b_c);
            scale = std::fmax(std::abs(p), bcmax);
            z = p / scale * p + bcmax / scale * bcmis;
            if (z >= 8.8817841970012523E-16) {
              *a = std::sqrt(scale) * std::sqrt(z);
              if (p < 0.0) {
                *a = -*a;
              }

              z = p + *a;
              *a = *d + z;
              *d -= bcmax / z * bcmis;
              tau = rt_hypotd_snf(*c, z);
              *cs = z / tau;
              *sn = *c / tau;
              *b -= *c;
              *c = 0.0;
            } else {
              bcmis = *b + *c;
              tau = rt_hypotd_snf(bcmis, tau);
              *cs = std::sqrt(0.5 * (std::abs(bcmis) / tau + 1.0));
              if (!(bcmis < 0.0)) {
                b_b = 1;
              } else {
                b_b = -1;
              }

              *sn = -(p / (tau * *cs)) * static_cast<double>(b_b);
              bcmax = *a * *cs + *b * *sn;
              scale = -*a * *sn + *b * *cs;
              z = *c * *cs + *d * *sn;
              bcmis = -*c * *sn + *d * *cs;
              *b = scale * *cs + bcmis * *sn;
              *c = -bcmax * *sn + z * *cs;
              bcmax = 0.5 * ((bcmax * *cs + z * *sn) + (-scale * *sn + bcmis *
                *cs));
              *a = bcmax;
              *d = bcmax;
              if (*c != 0.0) {
                if (*b != 0.0) {
                  if ((*b < 0.0) == (*c < 0.0)) {
                    bcmis = std::sqrt(std::abs(*b));
                    z = std::sqrt(std::abs(*c));
                    *a = bcmis * z;
                    if (!(*c < 0.0)) {
                      p = *a;
                    } else {
                      p = -*a;
                    }

                    tau = 1.0 / std::sqrt(std::abs(*b + *c));
                    *a = bcmax + p;
                    *d = bcmax - p;
                    *b -= *c;
                    *c = 0.0;
                    scale = bcmis * tau;
                    bcmis = z * tau;
                    bcmax = *cs * scale - *sn * bcmis;
                    *sn = *cs * bcmis + *sn * scale;
                    *cs = bcmax;
                  }
                } else {
                  *b = -*c;
                  *c = 0.0;
                  bcmax = *cs;
                  *cs = -*sn;
                  *sn = bcmax;
                }
              }
            }
          }
        }

        *rt1r = *a;
        *rt2r = *d;
        if (*c == 0.0) {
          *rt1i = 0.0;
          *rt2i = 0.0;
        } else {
          *rt1i = std::sqrt(std::abs(*b)) * std::sqrt(std::abs(*c));
          *rt2i = -*rt1i;
        }
      }

      static void xzlarf(int m, int n, int iv0, double tau, double C[25], int
                         ic0, double work[5])
      {
        int i;
        int ia;
        int lastc;
        int lastv;
        if (tau != 0.0) {
          boolean_T exitg2;
          lastv = m;
          i = iv0 + m;
          while ((lastv > 0) && (C[i - 2] == 0.0)) {
            lastv--;
            i--;
          }

          lastc = n - 1;
          exitg2 = false;
          while ((!exitg2) && (lastc + 1 > 0)) {
            int exitg1;
            i = ic0 + lastc * 5;
            ia = i;
            do {
              exitg1 = 0;
              if (ia <= (i + lastv) - 1) {
                if (C[ia - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  ia++;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = 0;
          lastc = -1;
        }

        if (lastv > 0) {
          double c;
          int b_i;
          if (lastc + 1 != 0) {
            std::memset(&work[0], 0, (lastc + 1) * sizeof(double));
            b_i = ic0 + 5 * lastc;
            for (int iac{ic0}; iac <= b_i; iac += 5) {
              c = 0.0;
              i = (iac + lastv) - 1;
              for (ia = iac; ia <= i; ia++) {
                c += C[ia - 1] * C[((iv0 + ia) - iac) - 1];
              }

              i = div_nde_s32_floor(iac - ic0, 5);
              work[i] += c;
            }
          }

          if (!(-tau == 0.0)) {
            i = ic0;
            for (int iac{0}; iac <= lastc; iac++) {
              if (work[iac] != 0.0) {
                c = work[iac] * -tau;
                b_i = lastv + i;
                for (ia = i; ia < b_i; ia++) {
                  C[ia - 1] += C[((iv0 + ia) - i) - 1] * c;
                }
              }

              i += 5;
            }
          }
        }
      }

      static double xzlarfg(int n, double *alpha1, double x[3])
      {
        double tau;
        tau = 0.0;
        if (n > 0) {
          double xnorm;
          xnorm = blas::xnrm2(n - 1, x);
          if (xnorm != 0.0) {
            double beta1;
            beta1 = rt_hypotd_snf(*alpha1, xnorm);
            if (*alpha1 >= 0.0) {
              beta1 = -beta1;
            }

            if (std::abs(beta1) < 1.0020841800044864E-292) {
              int knt;
              knt = 0;
              do {
                knt++;
                for (int k{2}; k <= n; k++) {
                  x[k - 1] *= 9.9792015476736E+291;
                }

                beta1 *= 9.9792015476736E+291;
                *alpha1 *= 9.9792015476736E+291;
              } while ((std::abs(beta1) < 1.0020841800044864E-292) && (knt < 20));

              beta1 = rt_hypotd_snf(*alpha1, blas::xnrm2(n - 1, x));
              if (*alpha1 >= 0.0) {
                beta1 = -beta1;
              }

              tau = (beta1 - *alpha1) / beta1;
              xnorm = 1.0 / (*alpha1 - beta1);
              for (int k{2}; k <= n; k++) {
                x[k - 1] *= xnorm;
              }

              for (int k{0}; k < knt; k++) {
                beta1 *= 1.0020841800044864E-292;
              }

              *alpha1 = beta1;
            } else {
              tau = (beta1 - *alpha1) / beta1;
              xnorm = 1.0 / (*alpha1 - beta1);
              for (int k{2}; k <= n; k++) {
                x[k - 1] *= xnorm;
              }

              *alpha1 = beta1;
            }
          }
        }

        return tau;
      }
    }

    static void trisolve(const double A[49], double B[49])
    {
      for (int j{0}; j < 7; j++) {
        int jBcol;
        jBcol = 7 * j - 1;
        for (int k{0}; k < 7; k++) {
          double d;
          int i;
          int kAcol;
          kAcol = 7 * k - 1;
          i = (k + jBcol) + 1;
          d = B[i];
          if (d != 0.0) {
            int i1;
            B[i] = d / A[(k + kAcol) + 1];
            i1 = k + 2;
            for (int b_i{i1}; b_i < 8; b_i++) {
              int i2;
              i2 = b_i + jBcol;
              B[i2] -= B[i] * A[b_i + kAcol];
            }
          }
        }
      }
    }
  }

  static void mpc_checkhessian(double H[49], double L[49], double *BadH)
  {
    double varargin_1[7];
    int info;
    boolean_T guard1{ false };

    *BadH = 0.0;
    std::copy(&H[0], &H[49], &L[0]);
    info = internal::lapack::xpotrf(L);
    guard1 = false;
    if (info == 0) {
      for (info = 0; info < 7; info++) {
        varargin_1[info] = L[info + 7 * info];
      }

      if (!(internal::minimum(varargin_1) > 1.4901161193847656E-7)) {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      double normH;
      double s;
      int Tries;
      boolean_T exitg2;
      normH = 0.0;
      info = 0;
      exitg2 = false;
      while ((!exitg2) && (info < 7)) {
        s = 0.0;
        for (Tries = 0; Tries < 7; Tries++) {
          s += std::abs(H[info + 7 * Tries]);
        }

        if (std::isnan(s)) {
          normH = rtNaN;
          exitg2 = true;
        } else {
          if (s > normH) {
            normH = s;
          }

          info++;
        }
      }

      if (normH >= 1.0E+10) {
        *BadH = 2.0;
      } else {
        boolean_T exitg1;
        Tries = 0;
        exitg1 = false;
        while ((!exitg1) && (Tries <= 4)) {
          signed char b[49];
          boolean_T guard2{ false };

          normH = rt_powd_snf(10.0, static_cast<double>(Tries)) *
            1.4901161193847656E-7;
          for (info = 0; info < 49; info++) {
            b[info] = 0;
          }

          for (info = 0; info < 7; info++) {
            b[info + 7 * info] = 1;
          }

          for (info = 0; info < 49; info++) {
            s = H[info] + normH * static_cast<double>(b[info]);
            H[info] = s;
            L[info] = s;
          }

          info = internal::lapack::xpotrf(L);
          guard2 = false;
          if (info == 0) {
            for (info = 0; info < 7; info++) {
              varargin_1[info] = L[info + 7 * info];
            }

            if (internal::minimum(varargin_1) > 1.4901161193847656E-7) {
              *BadH = 1.0;
              exitg1 = true;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }

          if (guard2) {
            *BadH = 3.0;
            Tries++;
          }
        }
      }
    }
  }

  static void mpc_customconstraintcoef(const double SuJm[1050], const double Sx
    [875], const double Su1[350], const double Hv[36400], const double C[910],
    const double Dv[1456], const double E[10], const double F[35], const double
    S[35], const double G[5], const double mvoff[2], const double mdoff[7],
    const double yoff[7], double Mu[780], double Mv[27040], double Mu1[260],
    double Mx[650], double Mlim[130])
  {
    static double b_Dv[37856];
    static double Sp1[27040];
    static double Fp1[23660];
    static double a_tmp[23660];
    double dv[1092];
    double b_C[910];
    double b_Fp1[780];
    double dv1[364];
    double b_I2[312];
    double c_Fp1[260];
    double c_E[130];
    double B[40];
    double b_E[5];
    double d;
    int I2_tmp;
    int b_I2_tmp;
    int kidx;
    signed char I2[2704];
    signed char Ep1_tmp[676];
    signed char I1_tmp[4];
    I1_tmp[1] = 0;
    I1_tmp[2] = 0;
    I1_tmp[0] = 1;
    I1_tmp[3] = 1;
    kidx = -1;
    for (int b_j1{0}; b_j1 < 26; b_j1++) {
      for (int j2{0}; j2 < 2; j2++) {
        I2_tmp = j2 << 1;
        for (int i1{0}; i1 < 26; i1++) {
          b_I2_tmp = iv7[i1 + 26 * b_j1];
          I2[kidx + 1] = static_cast<signed char>(b_I2_tmp * I1_tmp[I2_tmp]);
          I2[kidx + 2] = static_cast<signed char>(b_I2_tmp * I1_tmp[I2_tmp + 1]);
          kidx += 2;
        }
      }
    }

    std::memset(&Ep1_tmp[0], 0, 676U * sizeof(signed char));
    for (I2_tmp = 0; I2_tmp < 26; I2_tmp++) {
      Ep1_tmp[I2_tmp + 26 * I2_tmp] = 1;
    }

    kidx = -1;
    for (int b_j1{0}; b_j1 < 26; b_j1++) {
      for (int j2{0}; j2 < 7; j2++) {
        for (int i1{0}; i1 < 26; i1++) {
          for (I2_tmp = 0; I2_tmp < 5; I2_tmp++) {
            Fp1[(kidx + I2_tmp) + 1] = static_cast<double>(Ep1_tmp[i1 + 26 *
              b_j1]) * F[I2_tmp + 5 * j2];
          }

          kidx += 5;
        }
      }
    }

    for (kidx = 0; kidx < 7; kidx++) {
      for (int b_j1{0}; b_j1 < 5; b_j1++) {
        I2_tmp = b_j1 + 5 * kidx;
        B[I2_tmp] = S[I2_tmp];
      }
    }

    for (kidx = 0; kidx < 5; kidx++) {
      B[kidx + 35] = 0.0;
    }

    kidx = -1;
    for (int b_j1{0}; b_j1 < 26; b_j1++) {
      for (int j2{0}; j2 < 8; j2++) {
        for (int i1{0}; i1 < 26; i1++) {
          for (I2_tmp = 0; I2_tmp < 5; I2_tmp++) {
            Sp1[(kidx + I2_tmp) + 1] = static_cast<double>(Ep1_tmp[i1 + 26 *
              b_j1]) * B[I2_tmp + 5 * j2];
          }

          kidx += 5;
        }
      }
    }

    for (kidx = 0; kidx < 52; kidx++) {
      for (int b_j1{0}; b_j1 < 6; b_j1++) {
        d = 0.0;
        for (b_I2_tmp = 0; b_I2_tmp < 52; b_I2_tmp++) {
          d += static_cast<double>(I2[kidx + 52 * b_I2_tmp] * iv8[b_I2_tmp + 52 *
            b_j1]);
        }

        b_I2[kidx + 52 * b_j1] = d;
      }
    }

    for (kidx = 0; kidx < 6; kidx++) {
      for (int b_j1{0}; b_j1 < 7; b_j1++) {
        dv[b_j1 + 182 * kidx] = 0.0;
      }

      std::copy(&SuJm[kidx * 175], &SuJm[static_cast<int>(kidx * 175 + 175U)],
                &dv[kidx * 182 + 7]);
    }

    for (kidx = 0; kidx < 130; kidx++) {
      for (int b_j1{0}; b_j1 < 6; b_j1++) {
        d = 0.0;
        for (b_I2_tmp = 0; b_I2_tmp < 52; b_I2_tmp++) {
          d += 0.0 * b_I2[b_I2_tmp + 52 * b_j1];
        }

        I2_tmp = kidx + 130 * b_j1;
        Mu[I2_tmp] = d;
        d = 0.0;
        for (b_I2_tmp = 0; b_I2_tmp < 182; b_I2_tmp++) {
          d += Fp1[kidx + 130 * b_I2_tmp] * dv[b_I2_tmp + 182 * b_j1];
        }

        b_Fp1[I2_tmp] = d;
      }
    }

    for (kidx = 0; kidx < 780; kidx++) {
      Mu[kidx] += b_Fp1[kidx];
    }

    for (kidx = 0; kidx < 23660; kidx++) {
      a_tmp[kidx] = -Fp1[kidx];
    }

    for (kidx = 0; kidx < 8; kidx++) {
      for (int b_j1{0}; b_j1 < 7; b_j1++) {
        b_Dv[b_j1 + 182 * kidx] = Dv[b_j1 + 7 * kidx];
      }
    }

    for (kidx = 0; kidx < 200; kidx++) {
      for (int b_j1{0}; b_j1 < 7; b_j1++) {
        b_Dv[b_j1 + 182 * (kidx + 8)] = 0.0;
      }
    }

    for (kidx = 0; kidx < 208; kidx++) {
      std::copy(&Hv[kidx * 175], &Hv[static_cast<int>(kidx * 175 + 175U)],
                &b_Dv[kidx * 182 + 7]);
    }

    for (kidx = 0; kidx < 130; kidx++) {
      for (int b_j1{0}; b_j1 < 208; b_j1++) {
        d = 0.0;
        for (b_I2_tmp = 0; b_I2_tmp < 182; b_I2_tmp++) {
          d += a_tmp[kidx + 130 * b_I2_tmp] * b_Dv[b_I2_tmp + 182 * b_j1];
        }

        I2_tmp = kidx + 130 * b_j1;
        Mv[I2_tmp] = d - Sp1[I2_tmp];
      }
    }

    for (kidx = 0; kidx < 5; kidx++) {
      for (int b_j1{0}; b_j1 < 7; b_j1++) {
        b_C[b_j1 + 182 * kidx] = C[b_j1 + 7 * kidx];
      }

      std::copy(&Sx[kidx * 175], &Sx[static_cast<int>(kidx * 175 + 175U)],
                &b_C[kidx * 182 + 7]);
    }

    for (kidx = 0; kidx < 130; kidx++) {
      for (int b_j1{0}; b_j1 < 5; b_j1++) {
        d = 0.0;
        for (b_I2_tmp = 0; b_I2_tmp < 182; b_I2_tmp++) {
          d += a_tmp[kidx + 130 * b_I2_tmp] * b_C[b_I2_tmp + 182 * b_j1];
        }

        Mx[kidx + 130 * b_j1] = d;
      }
    }

    for (kidx = 0; kidx < 2; kidx++) {
      for (int b_j1{0}; b_j1 < 7; b_j1++) {
        dv1[b_j1 + 182 * kidx] = 0.0;
      }

      std::copy(&Su1[kidx * 175], &Su1[static_cast<int>(kidx * 175 + 175U)],
                &dv1[kidx * 182 + 7]);
    }

    for (kidx = 0; kidx < 130; kidx++) {
      for (int b_j1{0}; b_j1 < 2; b_j1++) {
        I2_tmp = kidx + 130 * b_j1;
        Mu1[I2_tmp] = 0.0;
        d = 0.0;
        for (b_I2_tmp = 0; b_I2_tmp < 182; b_I2_tmp++) {
          d += Fp1[kidx + 130 * b_I2_tmp] * dv1[b_I2_tmp + 182 * b_j1];
        }

        c_Fp1[I2_tmp] = d;
      }
    }

    for (kidx = 0; kidx < 260; kidx++) {
      Mu1[kidx] -= c_Fp1[kidx];
    }

    for (kidx = 0; kidx < 5; kidx++) {
      double d1;
      d = 0.0;
      d1 = 0.0;
      for (int b_j1{0}; b_j1 < 7; b_j1++) {
        b_I2_tmp = kidx + 5 * b_j1;
        d1 += F[b_I2_tmp] * yoff[b_j1];
        d += S[b_I2_tmp] * mdoff[b_j1];
      }

      b_E[kidx] = (((E[kidx] * mvoff[0] + E[kidx + 5] * mvoff[1]) + d1) - G[kidx])
        + d;
    }

    for (kidx = 0; kidx < 26; kidx++) {
      for (int b_j1{0}; b_j1 < 5; b_j1++) {
        c_E[b_j1 + 5 * kidx] = b_E[b_j1];
      }
    }

    for (kidx = 0; kidx < 130; kidx++) {
      Mlim[kidx] = -c_E[kidx];
    }
  }

  static void mpcblock_optimizer(const double rseq[175], const double vseq[208],
    const double x[5], const double old_u[2], const boolean_T iA[248], double
    Mlim[248], double Mx[1240], double Mu1[496], double Mv[51584], const double
    utarget[50], const double uoff[2], const double voff[7], const double yoff[7],
    double H[49], double Ac[1736], const double ywt[175], const double uwt[50],
    const double duwt[50], const double A[650], const double Bu[260], const
    double Bv[1040], const double C[910], const double Dv[1456], const double
    Ecc[10], const double Fcc[35], const double Scc[35], const double Gcc[5],
    double u[2], double *cost, double useq[52], double *status, boolean_T iAout
    [248], double *slack)
  {
    static double Hv[36400];
    static double MvCC[27040];
    static double Su[8750];
    double Kv[1248];
    double SuJm[1050];
    double WySuJm[1050];
    double Sx[875];
    double MuCC[780];
    double MxCC[650];
    double AA[600];
    double Su1[350];
    double I2Jm[300];
    double WduJm[300];
    double b_WuI2Jm[300];
    double Mu1CC[260];
    double Wy[175];
    double b_C[56];
    double Wu[50];
    double Linv[49];
    double b_Linv[49];
    double c_C[35];
    double Kx[30];
    double d_C[14];
    double b_Su1[12];
    double dv[12];
    double rows[7];
    double Wdu[2];
    double BadH;
    double WuI2Jm;
    double b_WySuJm;
    int b_i;
    int b_j;
    int c_i;
    int ct_tmp;
    int ix;
    int j;
    short b_ixw;
    short ixw;
    signed char a[2500];
    signed char b_I[4];
    boolean_T exitg1;
    *cost = 0.0;
    std::memset(&iAout[0], 0, 248U * sizeof(boolean_T));
    *slack = 0.0;
    for (int i{0}; i < 7; i++) {
      for (int i1{0}; i1 < 8; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 5; i2++) {
          WuI2Jm += C[(i + 7 * i2) + 35] * Bv[i2 + 5 * i1];
        }

        b_C[i + 7 * i1] = WuI2Jm;
      }
    }

    for (int i{0}; i < 8; i++) {
      for (int i1{0}; i1 < 7; i1++) {
        ix = i1 + 7 * i;
        Hv[i1 + 175 * i] = b_C[ix];
        Hv[i1 + 175 * (i + 8)] = Dv[ix + 56];
      }
    }

    for (int i{0}; i < 192; i++) {
      for (int i1{0}; i1 < 7; i1++) {
        Hv[i1 + 175 * (i + 16)] = 0.0;
      }
    }

    for (int i{0}; i < 208; i++) {
      std::memset(&Hv[i * 175 + 7], 0, 168U * sizeof(double));
    }

    for (int i{0}; i < 7; i++) {
      for (int i1{0}; i1 < 5; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 5; i2++) {
          WuI2Jm += C[(i + 7 * i2) + 35] * A[i2 + 5 * i1];
        }

        c_C[i + 7 * i1] = WuI2Jm;
      }
    }

    for (int i{0}; i < 5; i++) {
      for (int i1{0}; i1 < 7; i1++) {
        Sx[i1 + 175 * i] = c_C[i1 + 7 * i];
      }

      std::memset(&Sx[i * 175 + 7], 0, 168U * sizeof(double));
    }

    for (int i{0}; i < 7; i++) {
      for (int i1{0}; i1 < 2; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 5; i2++) {
          WuI2Jm += C[(i + 7 * i2) + 35] * Bu[i2 + 5 * i1];
        }

        d_C[i + 7 * i1] = WuI2Jm;
      }
    }

    for (int i{0}; i < 2; i++) {
      for (int i1{0}; i1 < 7; i1++) {
        Su1[i1 + 175 * i] = d_C[i1 + 7 * i];
      }

      std::memset(&Su1[i * 175 + 7], 0, 168U * sizeof(double));
      for (int i1{0}; i1 < 7; i1++) {
        ix = i1 + 175 * i;
        Su[ix] = Su1[ix];
      }
    }

    for (int i{0}; i < 48; i++) {
      for (int i1{0}; i1 < 7; i1++) {
        Su[i1 + 175 * (i + 2)] = 0.0;
      }
    }

    for (int i{0}; i < 50; i++) {
      std::memset(&Su[i * 175 + 7], 0, 168U * sizeof(double));
    }

    for (int i{0}; i < 5; i++) {
      for (int i1{0}; i1 < 5; i1++) {
        ix = i1 + 5 * i;
        AA[ix] = A[ix + 25];
      }
    }

    for (int i{0}; i < 115; i++) {
      for (int i1{0}; i1 < 5; i1++) {
        AA[i1 + 5 * (i + 5)] = 0.0;
      }
    }

    for (b_i = 0; b_i < 24; b_i++) {
      double b_AA[25];
      c_i = (b_i + 1) * 7;
      for (int i{0}; i < 7; i++) {
        rows[i] = (c_i + i) + 1;
        for (int i1{0}; i1 < 2; i1++) {
          ix = (static_cast<int>(rows[i]) + 175 * i1) - 1;
          Su1[ix] = 0.0;
          for (int i2{0}; i2 < 5; i2++) {
            Su1[ix] += C[(i + 7 * i2) + 35 * (b_i + 2)] * Bu[(i2 + 5 * i1) + 10 *
              (b_i + 1)];
          }
        }
      }

      c_i = (b_i + 1) << 1;
      for (int i{0}; i < 2; i++) {
        for (int i1{0}; i1 < 7; i1++) {
          ix = static_cast<int>(rows[i1]);
          Su[(ix + 175 * (i + c_i)) - 1] = Su1[(ix + 175 * i) - 1];
        }
      }

      for (j = 0; j <= b_i; j++) {
        b_j = b_i - j;
        ix = b_j * 5;
        for (int i{0}; i < 5; i++) {
          for (int i1{0}; i1 < 5; i1++) {
            b_AA[i1 + 5 * i] = AA[i1 + 5 * (i + ix)];
          }
        }

        for (int i{0}; i < 7; i++) {
          for (int i1{0}; i1 < 5; i1++) {
            WuI2Jm = 0.0;
            for (int i2{0}; i2 < 5; i2++) {
              WuI2Jm += C[(i + 7 * i2) + 35 * (b_i + 2)] * b_AA[i2 + 5 * i1];
            }

            c_C[i + 7 * i1] = WuI2Jm;
          }

          for (int i1{0}; i1 < 2; i1++) {
            WuI2Jm = 0.0;
            for (int i2{0}; i2 < 5; i2++) {
              WuI2Jm += c_C[i + 7 * i2] * Bu[(i2 + 5 * i1) + 10 * b_j];
            }

            d_C[i + 7 * i1] = Su1[(static_cast<int>(rows[i]) + 175 * i1) - 1] +
              WuI2Jm;
          }
        }

        for (int i{0}; i < 2; i++) {
          for (int i1{0}; i1 < 7; i1++) {
            Su1[(static_cast<int>(rows[i1]) + 175 * i) - 1] = d_C[i1 + 7 * i];
          }
        }

        b_j <<= 1;
        for (int i{0}; i < 2; i++) {
          for (int i1{0}; i1 < 7; i1++) {
            ix = static_cast<int>(rows[i1]);
            Su[(ix + 175 * (i + b_j)) - 1] = Su1[(ix + 175 * i) - 1];
          }
        }
      }

      c_i = (b_i + 2) << 3;
      for (int i{0}; i < 8; i++) {
        for (int i1{0}; i1 < 7; i1++) {
          Hv[(static_cast<int>(rows[i1]) + 175 * (i + c_i)) - 1] = Dv[(i1 + 7 *
            i) + 56 * (b_i + 2)];
        }
      }

      c_i = (b_i + 1) << 3;
      for (int i{0}; i < 7; i++) {
        for (int i1{0}; i1 < 8; i1++) {
          ix = (static_cast<int>(rows[i]) + 175 * (i1 + c_i)) - 1;
          Hv[ix] = 0.0;
          for (int i2{0}; i2 < 5; i2++) {
            Hv[ix] += C[(i + 7 * i2) + 35 * (b_i + 2)] * Bv[(i2 + 5 * i1) + 40 *
              (b_i + 1)];
          }
        }
      }

      for (j = 0; j <= b_i; j++) {
        b_j = j * 5;
        for (int i{0}; i < 5; i++) {
          for (int i1{0}; i1 < 5; i1++) {
            b_AA[i1 + 5 * i] = AA[i1 + 5 * (i + b_j)];
          }
        }

        b_j = j << 3;
        for (int i{0}; i < 7; i++) {
          for (int i1{0}; i1 < 5; i1++) {
            WuI2Jm = 0.0;
            for (int i2{0}; i2 < 5; i2++) {
              WuI2Jm += C[(i + 7 * i2) + 35 * (b_i + 2)] * b_AA[i2 + 5 * i1];
            }

            c_C[i + 7 * i1] = WuI2Jm;
          }

          for (int i1{0}; i1 < 8; i1++) {
            ix = (static_cast<int>(rows[i]) + 175 * (i1 + b_j)) - 1;
            Hv[ix] = 0.0;
            for (int i2{0}; i2 < 5; i2++) {
              Hv[ix] += c_C[i + 7 * i2] * Bv[(i2 + 5 * i1) + 40 * j];
            }
          }
        }
      }

      for (int i{0}; i < 7; i++) {
        for (int i1{0}; i1 < 5; i1++) {
          WuI2Jm = 0.0;
          for (int i2{0}; i2 < 5; i2++) {
            WuI2Jm += C[(i + 7 * i2) + 35 * (b_i + 2)] * AA[i2 + 5 * i1];
          }

          c_C[i + 7 * i1] = WuI2Jm;
        }

        for (int i1{0}; i1 < 5; i1++) {
          ix = (static_cast<int>(rows[i]) + 175 * i1) - 1;
          Sx[ix] = 0.0;
          for (int i2{0}; i2 < 5; i2++) {
            Sx[ix] += c_C[i + 7 * i2] * A[i2 + 5 * i1];
          }
        }
      }

      if (b_i + 2 < 25) {
        for (int ct{0}; ct <= b_i; ct++) {
          ct_tmp = ct * 5;
          for (int i{0}; i < 5; i++) {
            for (int i1{0}; i1 < 5; i1++) {
              b_AA[i1 + 5 * i] = AA[i1 + 5 * (i + ct_tmp)];
            }
          }

          for (int i{0}; i < 5; i++) {
            for (int i1{0}; i1 < 5; i1++) {
              ix = i + 5 * (i1 + ct_tmp);
              AA[ix] = 0.0;
              for (int i2{0}; i2 < 5; i2++) {
                AA[ix] += A[(i + 5 * i2) + 25 * (b_i + 2)] * b_AA[i2 + 5 * i1];
              }
            }
          }
        }

        c_i = (b_i + 1) * 5;
        for (int i{0}; i < 5; i++) {
          for (int i1{0}; i1 < 5; i1++) {
            AA[i1 + 5 * (i + c_i)] = A[(i1 + 5 * i) + 25 * (b_i + 2)];
          }
        }
      }
    }

    for (int i{0}; i < 175; i++) {
      for (int i1{0}; i1 < 6; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 50; i2++) {
          WuI2Jm += Su[i + 175 * i2] * static_cast<double>(iv1[i2 + 50 * i1]);
        }

        SuJm[i + 175 * i1] = WuI2Jm;
      }
    }

    b_i = 0;
    exitg1 = false;
    while ((!exitg1) && (b_i < 118)) {
      ix = iv2[b_i] - 1;
      if (iv2[b_i] <= 175) {
        for (int i{0}; i < 6; i++) {
          Ac[b_i + 248 * i] = -SuJm[ix + 175 * i];
        }

        for (int i{0}; i < 5; i++) {
          Mx[b_i + 248 * i] = -Sx[ix + 175 * i];
        }

        Mu1[b_i] = -Su1[ix];
        Mu1[b_i + 248] = -Su1[ix + 175];
        for (int i{0}; i < 208; i++) {
          Mv[b_i + 248 * i] = -Hv[ix + 175 * i];
        }

        b_i++;
      } else if (iv2[b_i] <= 350) {
        ix = iv2[b_i] - 176;
        for (int i{0}; i < 6; i++) {
          Ac[b_i + 248 * i] = SuJm[ix + 175 * i];
        }

        for (int i{0}; i < 5; i++) {
          Mx[b_i + 248 * i] = Sx[ix + 175 * i];
        }

        Mu1[b_i] = Su1[ix];
        Mu1[b_i + 248] = Su1[ix + 175];
        for (int i{0}; i < 208; i++) {
          Mv[b_i + 248 * i] = Hv[ix + 175 * i];
        }

        b_i++;
      } else {
        exitg1 = true;
      }
    }

    mpc_customconstraintcoef(SuJm, Sx, Su1, Hv, C, Dv, Ecc, Fcc, Scc, Gcc, uoff,
      voff, yoff, MuCC, MvCC, Mu1CC, MxCC, *(double (*)[130])&Mlim[118]);
    for (int i{0}; i < 6; i++) {
      for (int i1{0}; i1 < 130; i1++) {
        Ac[(i1 + 248 * i) + 118] = -MuCC[i1 + 130 * i];
      }
    }

    for (int i{0}; i < 5; i++) {
      std::copy(&MxCC[i * 130], &MxCC[static_cast<int>(i * 130 + 130U)], &Mx[i *
                248 + 118]);
    }

    for (int i{0}; i < 2; i++) {
      std::copy(&Mu1CC[i * 130], &Mu1CC[static_cast<int>(i * 130 + 130U)],
                &Mu1[i * 248 + 118]);
    }

    for (int i{0}; i < 208; i++) {
      std::copy(&MvCC[i * 130], &MvCC[static_cast<int>(i * 130 + 130U)], &Mv[i *
                248 + 118]);
    }

    for (int ct{0}; ct < 175; ct++) {
      WuI2Jm = ywt[ct];
      if (WuI2Jm < 0.0) {
        Wy[ct] = 0.0;
      } else {
        Wy[ct] = WuI2Jm * WuI2Jm;
      }
    }

    for (int ct{0}; ct < 50; ct++) {
      WuI2Jm = uwt[ct];
      if (WuI2Jm < 0.0) {
        Wu[ct] = 0.0;
      } else {
        Wu[ct] = WuI2Jm * WuI2Jm;
      }
    }

    if (duwt[0] < 0.0) {
      Wdu[0] = 0.0;
    } else {
      Wdu[0] = duwt[0] * duwt[0];
    }

    if (duwt[1] < 0.0) {
      Wdu[1] = 0.0;
    } else {
      Wdu[1] = duwt[1] * duwt[1];
    }

    b_I[1] = 0;
    b_I[2] = 0;
    b_I[0] = 1;
    b_I[3] = 1;
    ix = -1;
    for (int ct{0}; ct < 25; ct++) {
      for (ct_tmp = 0; ct_tmp < 2; ct_tmp++) {
        c_i = ct_tmp << 1;
        for (b_j = 0; b_j < 25; b_j++) {
          j = iv3[b_j + 25 * ct];
          a[ix + 1] = static_cast<signed char>(j * b_I[c_i]);
          a[ix + 2] = static_cast<signed char>(j * b_I[c_i + 1]);
          ix += 2;
        }
      }
    }

    for (int i{0}; i < 50; i++) {
      for (int i1{0}; i1 < 6; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 50; i2++) {
          WuI2Jm += static_cast<double>(a[i + 50 * i2] * iv1[i2 + 50 * i1]);
        }

        I2Jm[i + 50 * i1] = WuI2Jm;
      }
    }

    ixw = 1;
    for (b_i = 0; b_i < 175; b_i++) {
      for (int i{0}; i < 6; i++) {
        ix = b_i + 175 * i;
        WySuJm[ix] = Wy[ixw - 1] * SuJm[ix];
      }

      ixw = static_cast<short>(ixw + 1);
      if (ixw > 175) {
        ixw = 169;
      }
    }

    ixw = 1;
    b_ixw = 1;
    for (b_i = 0; b_i < 50; b_i++) {
      for (int i{0}; i < 6; i++) {
        ix = b_i + 50 * i;
        b_WuI2Jm[ix] = Wu[ixw - 1] * I2Jm[ix];
      }

      ixw = static_cast<short>(ixw + 1);
      if (ixw > 50) {
        ixw = 49;
      }

      for (int i{0}; i < 6; i++) {
        ix = b_i + 50 * i;
        WduJm[ix] = Wdu[b_ixw - 1] * static_cast<double>(iv1[ix]);
      }

      b_ixw = static_cast<short>(b_ixw + 1);
      if (b_ixw > 2) {
        b_ixw = 1;
      }
    }

    for (int i{0}; i < 6; i++) {
      for (int i1{0}; i1 < 6; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 175; i2++) {
          WuI2Jm += SuJm[i2 + 175 * i] * WySuJm[i2 + 175 * i1];
        }

        b_WySuJm = 0.0;
        BadH = 0.0;
        for (int i2{0}; i2 < 50; i2++) {
          ix = i2 + 50 * i1;
          BadH += static_cast<double>(iv4[i + 6 * i2]) * WduJm[ix];
          b_WySuJm += I2Jm[i2 + 50 * i] * b_WuI2Jm[ix];
        }

        H[i + 7 * i1] = (WuI2Jm + BadH) + b_WySuJm;
      }
    }

    for (int i{0}; i < 2; i++) {
      for (int i1{0}; i1 < 6; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 175; i2++) {
          WuI2Jm += Su1[i2 + 175 * i] * WySuJm[i2 + 175 * i1];
        }

        ix = i + (i1 << 1);
        b_Su1[ix] = WuI2Jm;
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 50; i2++) {
          WuI2Jm += static_cast<double>(iv5[i + (i2 << 1)]) * b_WuI2Jm[i2 + 50 *
            i1];
        }

        dv[ix] = WuI2Jm;
      }
    }

    for (int i{0}; i < 12; i++) {
      b_Su1[i] += dv[i];
    }

    for (int i{0}; i < 300; i++) {
      b_WuI2Jm[i] = -b_WuI2Jm[i];
    }

    for (int i{0}; i < 5; i++) {
      for (int i1{0}; i1 < 6; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 175; i2++) {
          WuI2Jm += Sx[i2 + 175 * i] * WySuJm[i2 + 175 * i1];
        }

        Kx[i + 5 * i1] = WuI2Jm;
      }
    }

    for (int i{0}; i < 208; i++) {
      for (int i1{0}; i1 < 6; i1++) {
        WuI2Jm = 0.0;
        for (int i2{0}; i2 < 175; i2++) {
          WuI2Jm += Hv[i2 + 175 * i] * WySuJm[i2 + 175 * i1];
        }

        Kv[i + 208 * i1] = WuI2Jm;
      }
    }

    for (int i{0}; i < 1050; i++) {
      WySuJm[i] = -WySuJm[i];
    }

    std::copy(&H[0], &H[49], &Linv[0]);
    mpc_checkhessian(Linv, b_Linv, &BadH);
    if (BadH > 1.0) {
      for (b_i = 0; b_i < 2; b_i++) {
        u[b_i] = old_u[b_i] + uoff[b_i];
        for (int i{0}; i < 26; i++) {
          useq[i + 26 * b_i] = u[b_i];
        }
      }

      *status = -2.0;
    } else {
      double b_Mlim[248];
      double b_Mu1[248];
      double c_Mlim[248];
      double aux3[50];
      double zopt[7];
      double b_Kv;
      signed char c_I[49];
      for (int i{0}; i < 49; i++) {
        c_I[i] = 0;
      }

      for (ix = 0; ix < 7; ix++) {
        c_I[ix + 7 * ix] = 1;
      }

      for (j = 0; j < 7; j++) {
        for (b_i = 0; b_i < 7; b_i++) {
          ix = b_i + 7 * j;
          Linv[ix] = c_I[ix];
        }
      }

      internal::trisolve(b_Linv, Linv);
      for (int i{0}; i < 7; i++) {
        rows[i] = 0.0;
      }

      for (b_i = 0; b_i < 6; b_i++) {
        BadH = 0.0;
        for (int i{0}; i < 5; i++) {
          BadH += Kx[i + 5 * b_i] * x[i];
        }

        b_WySuJm = 0.0;
        for (int i{0}; i < 175; i++) {
          b_WySuJm += WySuJm[i + 175 * b_i] * rseq[i];
        }

        ix = b_i << 1;
        b_Kv = 0.0;
        for (int i{0}; i < 208; i++) {
          b_Kv += Kv[i + 208 * b_i] * vseq[i];
        }

        WuI2Jm = 0.0;
        for (int i{0}; i < 50; i++) {
          WuI2Jm += b_WuI2Jm[i + 50 * b_i] * utarget[i];
        }

        rows[b_i] = (((BadH + b_WySuJm) + (b_Su1[ix] * old_u[0] + b_Su1[ix + 1] *
          old_u[1])) + b_Kv) + WuI2Jm;
      }

      for (b_i = 0; b_i < 248; b_i++) {
        iAout[b_i] = iA[b_i];
        WuI2Jm = 0.0;
        for (int i{0}; i < 5; i++) {
          WuI2Jm += Mx[b_i + 248 * i] * x[i];
        }

        b_Mlim[b_i] = Mlim[b_i] + WuI2Jm;
        b_Mu1[b_i] = Mu1[b_i] * old_u[0] + Mu1[b_i + 248] * old_u[1];
      }

      for (int i{0}; i < 7; i++) {
        for (int i1{0}; i1 < 7; i1++) {
          WuI2Jm = 0.0;
          for (int i2{0}; i2 < 7; i2++) {
            WuI2Jm += Linv[i2 + 7 * i] * Linv[i2 + 7 * i1];
          }

          b_Linv[i + 7 * i1] = WuI2Jm;
        }
      }

      for (int i{0}; i < 248; i++) {
        WuI2Jm = 0.0;
        for (int i1{0}; i1 < 208; i1++) {
          WuI2Jm += Mv[i + 248 * i1] * vseq[i1];
        }

        c_Mlim[i] = -((b_Mlim[i] + b_Mu1[i]) + WuI2Jm);
      }

      qpkwik(Linv, b_Linv, rows, Ac, c_Mlim, iAout, zopt, b_Mlim, &ix);
      if ((ix < 0) || (ix == 0)) {
        for (b_i = 0; b_i < 7; b_i++) {
          zopt[b_i] = 0.0;
        }
      }

      *status = ix;
      *slack = zopt[6];
      u[0] = (old_u[0] + zopt[0]) + uoff[0];
      u[1] = (old_u[1] + zopt[1]) + uoff[1];
      if (ix > 0) {
        double aux2[175];
        double aux[7];
        for (int i{0}; i < 175; i++) {
          WuI2Jm = 0.0;
          for (int i1{0}; i1 < 5; i1++) {
            WuI2Jm += Sx[i + 175 * i1] * x[i1];
          }

          b_WySuJm = 0.0;
          for (int i1{0}; i1 < 208; i1++) {
            b_WySuJm += Hv[i + 175 * i1] * vseq[i1];
          }

          aux2[i] = ((WuI2Jm + (Su1[i] * old_u[0] + Su1[i + 175] * old_u[1])) +
                     b_WySuJm) - rseq[i];
        }

        WuI2Jm = old_u[0];
        b_WySuJm = old_u[1];
        for (int i{0}; i < 50; i++) {
          aux3[i] = (static_cast<double>(iv6[i]) * WuI2Jm + static_cast<double>
                     (iv6[i + 50]) * b_WySuJm) - utarget[i];
        }

        for (b_i = 0; b_i < 7; b_i++) {
          aux[b_i] = zopt[b_i];
        }

        BadH = 0.0;
        for (int i{0}; i < 50; i++) {
          WuI2Jm = aux3[i];
          BadH += WuI2Jm * (Wu[i] * WuI2Jm);
        }

        b_WySuJm = 0.0;
        for (int i{0}; i < 175; i++) {
          WuI2Jm = aux2[i];
          b_WySuJm += WuI2Jm * (Wy[i] * WuI2Jm);
        }

        b_Kv = 0.0;
        for (int i{0}; i < 7; i++) {
          WuI2Jm = 0.0;
          for (int i1{0}; i1 < 7; i1++) {
            WuI2Jm += H[i + 7 * i1] * aux[i1];
          }

          b_Kv += aux[i] * (WuI2Jm + 2.0 * rows[i]);
        }

        *cost = (BadH + b_WySuJm) + b_Kv;
      }

      BadH = old_u[0] + uoff[0];
      b_WySuJm = old_u[1] + uoff[1];
      for (int i{0}; i < 50; i++) {
        WuI2Jm = 0.0;
        for (int i1{0}; i1 < 6; i1++) {
          WuI2Jm += I2Jm[i + 50 * i1] * zopt[i1];
        }

        aux3[i] = WuI2Jm + (static_cast<double>(iv6[i]) * BadH + static_cast<
                            double>(iv6[i + 50]) * b_WySuJm);
      }

      for (int i{0}; i < 2; i++) {
        for (int i1{0}; i1 < 25; i1++) {
          useq[i1 + 26 * i] = aux3[i + (i1 << 1)];
        }

        useq[26 * i + 25] = useq[26 * i + 24];
      }
    }
  }

  static void mpcmoveCodeGeneration(struct4_T *statedata, const double
    onlinedata_signals_ref[7], const double onlinedata_signals_md[182], const
    double onlinedata_weights_y[175], const double onlinedata_weights_u[50],
    const double onlinedata_weights_du[50], const double
    onlinedata_customconstraints_E[10], const double
    onlinedata_customconstraints_F[35], const double
    onlinedata_customconstraints_G[5], const double
    onlinedata_customconstraints_S[35], const struct10_T *onlinedata_model,
    double u[2], double Info_Uopt[52], double Info_Yopt[182], double Info_Xopt
    [130], double Info_Topt[26], double *Info_Slack, double *Info_Iterations,
    double *Info_Cost)
  {
    static const double dv8[51584]{ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0,
      100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0, -40.0,
      0.024000000000000004, 4.0000000000000009, -4.0000000000000009,
      4.0000000000000009, -4.0000000000000009, -0.00040000000000000013,
      -0.40000000000000008, -0.40000000000000008, 0.40000000000000008,
      0.40000000000000008, -0.00024000000000000006, -0.040000000000000015,
      0.040000000000000015, -0.040000000000000015, 0.040000000000000015,
      4.0000000000000015E-6, 0.0040000000000000018, 0.0040000000000000018,
      -0.0040000000000000018, -0.0040000000000000018, 2.4000000000000007E-6,
      0.00040000000000000013, -0.00040000000000000013, 0.00040000000000000013,
      -0.00040000000000000013, -4.0000000000000021E-8, -4.0000000000000017E-5,
      -4.0000000000000017E-5, 4.0000000000000017E-5, 4.0000000000000017E-5,
      -2.4000000000000013E-8, -4.0000000000000024E-6, 4.0000000000000024E-6,
      -4.0000000000000024E-6, 4.0000000000000024E-6, 4.0000000000000022E-10,
      4.0000000000000019E-7, 4.0000000000000019E-7, -4.0000000000000019E-7,
      -4.0000000000000019E-7, 2.400000000000001E-10, 4.0000000000000021E-8,
      -4.0000000000000021E-8, 4.0000000000000021E-8, -4.0000000000000021E-8,
      -4.0000000000000023E-12, -4.0000000000000027E-9, -4.0000000000000027E-9,
      4.0000000000000027E-9, 4.0000000000000027E-9, -2.4000000000000015E-12,
      -4.0000000000000022E-10, 4.0000000000000022E-10, -4.0000000000000022E-10,
      4.0000000000000022E-10, 4.0000000000000032E-14, 4.0000000000000023E-11,
      4.0000000000000023E-11, -4.0000000000000023E-11, -4.0000000000000023E-11,
      2.4000000000000018E-14, 4.0000000000000032E-12, -4.0000000000000032E-12,
      4.0000000000000032E-12, -4.0000000000000032E-12, -4.0000000000000039E-16,
      -4.0000000000000037E-13, -4.0000000000000037E-13, 4.0000000000000037E-13,
      4.0000000000000037E-13, -2.400000000000002E-16, -4.0000000000000038E-14,
      4.0000000000000038E-14, -4.0000000000000038E-14, 4.0000000000000038E-14,
      4.0000000000000041E-18, 4.0000000000000043E-15, 4.0000000000000043E-15,
      -4.0000000000000043E-15, -4.0000000000000043E-15, 2.4000000000000023E-18,
      4.0000000000000044E-16, -4.0000000000000044E-16, 4.0000000000000044E-16,
      -4.0000000000000044E-16, -4.0000000000000046E-20, -4.000000000000004E-17,
      -4.000000000000004E-17, 4.000000000000004E-17, 4.000000000000004E-17,
      -2.4000000000000026E-20, -4.0000000000000049E-18, 4.0000000000000049E-18,
      -4.0000000000000049E-18, 4.0000000000000049E-18, 4.0000000000000049E-22,
      4.0000000000000047E-19, 4.0000000000000047E-19, -4.0000000000000047E-19,
      -4.0000000000000047E-19, 2.4000000000000028E-22, 4.0000000000000052E-20,
      -4.0000000000000052E-20, 4.0000000000000052E-20, -4.0000000000000052E-20,
      -4.0000000000000056E-24, -4.0000000000000049E-21, -4.0000000000000049E-21,
      4.0000000000000049E-21, 4.0000000000000049E-21, -2.4000000000000031E-24,
      -4.0000000000000054E-22, 4.0000000000000054E-22, -4.0000000000000054E-22,
      4.0000000000000054E-22, 4.0000000000000059E-26, 4.0000000000000057E-23,
      4.0000000000000057E-23, -4.0000000000000057E-23, -4.0000000000000057E-23,
      48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0,
      -10.0, 10.0, -10.0, -0.0010000000000000002, -1.0000000000000002,
      -1.0000000000000002, 1.0000000000000002, 1.0000000000000002,
      -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, 0.10000000000000002, 1.0000000000000004E-5,
      0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
      -0.010000000000000004, 6.0000000000000027E-6, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
      -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
      0.00010000000000000003, 0.00010000000000000003, -6.0000000000000021E-8,
      -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
      1.0000000000000004E-5, 1.0000000000000005E-9, 1.0000000000000006E-6,
      1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6,
      6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
      1.0000000000000005E-7, -1.0000000000000005E-7, -1.0000000000000006E-11,
      -1.0000000000000005E-8, -1.0000000000000005E-8, 1.0000000000000005E-8,
      1.0000000000000005E-8, -6.0000000000000035E-12, -1.0000000000000007E-9,
      1.0000000000000007E-9, -1.0000000000000007E-9, 1.0000000000000007E-9,
      1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
      -1.0000000000000006E-10, -1.0000000000000006E-10, 6.0000000000000035E-14,
      1.0000000000000006E-11, -1.0000000000000006E-11, 1.0000000000000006E-11,
      -1.0000000000000006E-11, -1.0000000000000009E-15, -1.0000000000000008E-12,
      -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12,
      -6.0000000000000048E-16, -1.0000000000000009E-13, 1.0000000000000009E-13,
      -1.0000000000000009E-13, 1.0000000000000009E-13, 1.000000000000001E-17,
      1.0000000000000009E-14, 1.0000000000000009E-14, -1.0000000000000009E-14,
      -1.0000000000000009E-14, 6.0000000000000058E-18, 1.0000000000000011E-15,
      -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
      -1.0000000000000011E-19, -1.0000000000000011E-16, -1.0000000000000011E-16,
      1.0000000000000011E-16, 1.0000000000000011E-16, -6.0000000000000066E-20,
      -1.000000000000001E-17, 1.000000000000001E-17, -1.000000000000001E-17,
      1.000000000000001E-17, 1.0000000000000012E-21, 1.0000000000000012E-18,
      1.0000000000000012E-18, -1.0000000000000012E-18, -1.0000000000000012E-18,
      6.0000000000000073E-22, 1.0000000000000012E-19, -1.0000000000000012E-19,
      1.0000000000000012E-19, -1.0000000000000012E-19, -1.0000000000000013E-23,
      -1.0000000000000013E-20, -1.0000000000000013E-20, 1.0000000000000013E-20,
      1.0000000000000013E-20, -6.0000000000000073E-24, -1.0000000000000012E-21,
      1.0000000000000012E-21, -1.0000000000000012E-21, 1.0000000000000012E-21,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0,
      100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049,
      48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0,
      40.0, -40.0, -40.0, 0.024000000000000004, 4.0000000000000009,
      -4.0000000000000009, 4.0000000000000009, -4.0000000000000009,
      -0.00040000000000000013, -0.40000000000000008, -0.40000000000000008,
      0.40000000000000008, 0.40000000000000008, -0.00024000000000000006,
      -0.040000000000000015, 0.040000000000000015, -0.040000000000000015,
      0.040000000000000015, 4.0000000000000015E-6, 0.0040000000000000018,
      0.0040000000000000018, -0.0040000000000000018, -0.0040000000000000018,
      2.4000000000000007E-6, 0.00040000000000000013, -0.00040000000000000013,
      0.00040000000000000013, -0.00040000000000000013, -4.0000000000000021E-8,
      -4.0000000000000017E-5, -4.0000000000000017E-5, 4.0000000000000017E-5,
      4.0000000000000017E-5, -2.4000000000000013E-8, -4.0000000000000024E-6,
      4.0000000000000024E-6, -4.0000000000000024E-6, 4.0000000000000024E-6,
      4.0000000000000022E-10, 4.0000000000000019E-7, 4.0000000000000019E-7,
      -4.0000000000000019E-7, -4.0000000000000019E-7, 2.400000000000001E-10,
      4.0000000000000021E-8, -4.0000000000000021E-8, 4.0000000000000021E-8,
      -4.0000000000000021E-8, -4.0000000000000023E-12, -4.0000000000000027E-9,
      -4.0000000000000027E-9, 4.0000000000000027E-9, 4.0000000000000027E-9,
      -2.4000000000000015E-12, -4.0000000000000022E-10, 4.0000000000000022E-10,
      -4.0000000000000022E-10, 4.0000000000000022E-10, 4.0000000000000032E-14,
      4.0000000000000023E-11, 4.0000000000000023E-11, -4.0000000000000023E-11,
      -4.0000000000000023E-11, 2.4000000000000018E-14, 4.0000000000000032E-12,
      -4.0000000000000032E-12, 4.0000000000000032E-12, -4.0000000000000032E-12,
      -4.0000000000000039E-16, -4.0000000000000037E-13, -4.0000000000000037E-13,
      4.0000000000000037E-13, 4.0000000000000037E-13, -2.400000000000002E-16,
      -4.0000000000000038E-14, 4.0000000000000038E-14, -4.0000000000000038E-14,
      4.0000000000000038E-14, 4.0000000000000041E-18, 4.0000000000000043E-15,
      4.0000000000000043E-15, -4.0000000000000043E-15, -4.0000000000000043E-15,
      2.4000000000000023E-18, 4.0000000000000044E-16, -4.0000000000000044E-16,
      4.0000000000000044E-16, -4.0000000000000044E-16, -4.0000000000000046E-20,
      -4.000000000000004E-17, -4.000000000000004E-17, 4.000000000000004E-17,
      4.000000000000004E-17, -2.4000000000000026E-20, -4.0000000000000049E-18,
      4.0000000000000049E-18, -4.0000000000000049E-18, 4.0000000000000049E-18,
      4.0000000000000049E-22, 4.0000000000000047E-19, 4.0000000000000047E-19,
      -4.0000000000000047E-19, -4.0000000000000047E-19, 2.4000000000000028E-22,
      4.0000000000000052E-20, -4.0000000000000052E-20, 4.0000000000000052E-20,
      -4.0000000000000052E-20, -4.0000000000000056E-24, -4.0000000000000049E-21,
      -4.0000000000000049E-21, 4.0000000000000049E-21, 4.0000000000000049E-21,
      -2.4000000000000031E-24, -4.0000000000000054E-22, 4.0000000000000054E-22,
      -4.0000000000000054E-22, 4.0000000000000054E-22, -0.0, -0.0,
      48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0,
      10.0, -10.0, -0.0010000000000000002, -1.0000000000000002,
      -1.0000000000000002, 1.0000000000000002, 1.0000000000000002,
      -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, 0.10000000000000002, 1.0000000000000004E-5,
      0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
      -0.010000000000000004, 6.0000000000000027E-6, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
      -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
      0.00010000000000000003, 0.00010000000000000003, -6.0000000000000021E-8,
      -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
      1.0000000000000004E-5, 1.0000000000000005E-9, 1.0000000000000006E-6,
      1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6,
      6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
      1.0000000000000005E-7, -1.0000000000000005E-7, -1.0000000000000006E-11,
      -1.0000000000000005E-8, -1.0000000000000005E-8, 1.0000000000000005E-8,
      1.0000000000000005E-8, -6.0000000000000035E-12, -1.0000000000000007E-9,
      1.0000000000000007E-9, -1.0000000000000007E-9, 1.0000000000000007E-9,
      1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
      -1.0000000000000006E-10, -1.0000000000000006E-10, 6.0000000000000035E-14,
      1.0000000000000006E-11, -1.0000000000000006E-11, 1.0000000000000006E-11,
      -1.0000000000000006E-11, -1.0000000000000009E-15, -1.0000000000000008E-12,
      -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12,
      -6.0000000000000048E-16, -1.0000000000000009E-13, 1.0000000000000009E-13,
      -1.0000000000000009E-13, 1.0000000000000009E-13, 1.000000000000001E-17,
      1.0000000000000009E-14, 1.0000000000000009E-14, -1.0000000000000009E-14,
      -1.0000000000000009E-14, 6.0000000000000058E-18, 1.0000000000000011E-15,
      -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
      -1.0000000000000011E-19, -1.0000000000000011E-16, -1.0000000000000011E-16,
      1.0000000000000011E-16, 1.0000000000000011E-16, -6.0000000000000066E-20,
      -1.000000000000001E-17, 1.000000000000001E-17, -1.000000000000001E-17,
      1.000000000000001E-17, 1.0000000000000012E-21, 1.0000000000000012E-18,
      1.0000000000000012E-18, -1.0000000000000012E-18, -1.0000000000000012E-18,
      6.0000000000000073E-22, 1.0000000000000012E-19, -1.0000000000000012E-19,
      1.0000000000000012E-19, -1.0000000000000012E-19, -1.0000000000000013E-23,
      -1.0000000000000013E-20, -1.0000000000000013E-20, 1.0000000000000013E-20,
      1.0000000000000013E-20, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6,
      -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.2926829268292681,
      -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0,
      -40.0, -40.0, 0.024000000000000004, 4.0000000000000009,
      -4.0000000000000009, 4.0000000000000009, -4.0000000000000009,
      -0.00040000000000000013, -0.40000000000000008, -0.40000000000000008,
      0.40000000000000008, 0.40000000000000008, -0.00024000000000000006,
      -0.040000000000000015, 0.040000000000000015, -0.040000000000000015,
      0.040000000000000015, 4.0000000000000015E-6, 0.0040000000000000018,
      0.0040000000000000018, -0.0040000000000000018, -0.0040000000000000018,
      2.4000000000000007E-6, 0.00040000000000000013, -0.00040000000000000013,
      0.00040000000000000013, -0.00040000000000000013, -4.0000000000000021E-8,
      -4.0000000000000017E-5, -4.0000000000000017E-5, 4.0000000000000017E-5,
      4.0000000000000017E-5, -2.4000000000000013E-8, -4.0000000000000024E-6,
      4.0000000000000024E-6, -4.0000000000000024E-6, 4.0000000000000024E-6,
      4.0000000000000022E-10, 4.0000000000000019E-7, 4.0000000000000019E-7,
      -4.0000000000000019E-7, -4.0000000000000019E-7, 2.400000000000001E-10,
      4.0000000000000021E-8, -4.0000000000000021E-8, 4.0000000000000021E-8,
      -4.0000000000000021E-8, -4.0000000000000023E-12, -4.0000000000000027E-9,
      -4.0000000000000027E-9, 4.0000000000000027E-9, 4.0000000000000027E-9,
      -2.4000000000000015E-12, -4.0000000000000022E-10, 4.0000000000000022E-10,
      -4.0000000000000022E-10, 4.0000000000000022E-10, 4.0000000000000032E-14,
      4.0000000000000023E-11, 4.0000000000000023E-11, -4.0000000000000023E-11,
      -4.0000000000000023E-11, 2.4000000000000018E-14, 4.0000000000000032E-12,
      -4.0000000000000032E-12, 4.0000000000000032E-12, -4.0000000000000032E-12,
      -4.0000000000000039E-16, -4.0000000000000037E-13, -4.0000000000000037E-13,
      4.0000000000000037E-13, 4.0000000000000037E-13, -2.400000000000002E-16,
      -4.0000000000000038E-14, 4.0000000000000038E-14, -4.0000000000000038E-14,
      4.0000000000000038E-14, 4.0000000000000041E-18, 4.0000000000000043E-15,
      4.0000000000000043E-15, -4.0000000000000043E-15, -4.0000000000000043E-15,
      2.4000000000000023E-18, 4.0000000000000044E-16, -4.0000000000000044E-16,
      4.0000000000000044E-16, -4.0000000000000044E-16, -4.0000000000000046E-20,
      -4.000000000000004E-17, -4.000000000000004E-17, 4.000000000000004E-17,
      4.000000000000004E-17, -2.4000000000000026E-20, -4.0000000000000049E-18,
      4.0000000000000049E-18, -4.0000000000000049E-18, 4.0000000000000049E-18,
      4.0000000000000049E-22, 4.0000000000000047E-19, 4.0000000000000047E-19,
      -4.0000000000000047E-19, -4.0000000000000047E-19, 2.4000000000000028E-22,
      4.0000000000000052E-20, -4.0000000000000052E-20, 4.0000000000000052E-20,
      -4.0000000000000052E-20, -4.0000000000000056E-24, -4.0000000000000049E-21,
      -4.0000000000000049E-21, 4.0000000000000049E-21, 4.0000000000000049E-21,
      -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -6.0000000000000021E-8, -1.0000000000000004E-5,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5,
      1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
      -1.0000000000000006E-6, -1.0000000000000006E-6, 6.0000000000000031E-10,
      1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
      -1.0000000000000005E-7, -1.0000000000000006E-11, -1.0000000000000005E-8,
      -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8,
      -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
      -1.0000000000000007E-9, 1.0000000000000007E-9, 1.0000000000000007E-13,
      1.0000000000000006E-10, 1.0000000000000006E-10, -1.0000000000000006E-10,
      -1.0000000000000006E-10, 6.0000000000000035E-14, 1.0000000000000006E-11,
      -1.0000000000000006E-11, 1.0000000000000006E-11, -1.0000000000000006E-11,
      -1.0000000000000009E-15, -1.0000000000000008E-12, -1.0000000000000008E-12,
      1.0000000000000008E-12, 1.0000000000000008E-12, -6.0000000000000048E-16,
      -1.0000000000000009E-13, 1.0000000000000009E-13, -1.0000000000000009E-13,
      1.0000000000000009E-13, 1.000000000000001E-17, 1.0000000000000009E-14,
      1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
      6.0000000000000058E-18, 1.0000000000000011E-15, -1.0000000000000011E-15,
      1.0000000000000011E-15, -1.0000000000000011E-15, -1.0000000000000011E-19,
      -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
      1.0000000000000011E-16, -6.0000000000000066E-20, -1.000000000000001E-17,
      1.000000000000001E-17, -1.000000000000001E-17, 1.000000000000001E-17,
      1.0000000000000012E-21, 1.0000000000000012E-18, 1.0000000000000012E-18,
      -1.0000000000000012E-18, -1.0000000000000012E-18, 6.0000000000000073E-22,
      1.0000000000000012E-19, -1.0000000000000012E-19, 1.0000000000000012E-19,
      -1.0000000000000012E-19, -0.0, -0.0, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0,
      100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681,
      -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -4.0000000000000039E-16, -4.0000000000000037E-13,
      -4.0000000000000037E-13, 4.0000000000000037E-13, 4.0000000000000037E-13,
      -2.400000000000002E-16, -4.0000000000000038E-14, 4.0000000000000038E-14,
      -4.0000000000000038E-14, 4.0000000000000038E-14, 4.0000000000000041E-18,
      4.0000000000000043E-15, 4.0000000000000043E-15, -4.0000000000000043E-15,
      -4.0000000000000043E-15, 2.4000000000000023E-18, 4.0000000000000044E-16,
      -4.0000000000000044E-16, 4.0000000000000044E-16, -4.0000000000000044E-16,
      -4.0000000000000046E-20, -4.000000000000004E-17, -4.000000000000004E-17,
      4.000000000000004E-17, 4.000000000000004E-17, -2.4000000000000026E-20,
      -4.0000000000000049E-18, 4.0000000000000049E-18, -4.0000000000000049E-18,
      4.0000000000000049E-18, 4.0000000000000049E-22, 4.0000000000000047E-19,
      4.0000000000000047E-19, -4.0000000000000047E-19, -4.0000000000000047E-19,
      2.4000000000000028E-22, 4.0000000000000052E-20, -4.0000000000000052E-20,
      4.0000000000000052E-20, -4.0000000000000052E-20, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
      100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -6.0000000000000021E-8, -1.0000000000000004E-5,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5,
      1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
      -1.0000000000000006E-6, -1.0000000000000006E-6, 6.0000000000000031E-10,
      1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
      -1.0000000000000005E-7, -1.0000000000000006E-11, -1.0000000000000005E-8,
      -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8,
      -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
      -1.0000000000000007E-9, 1.0000000000000007E-9, 1.0000000000000007E-13,
      1.0000000000000006E-10, 1.0000000000000006E-10, -1.0000000000000006E-10,
      -1.0000000000000006E-10, 6.0000000000000035E-14, 1.0000000000000006E-11,
      -1.0000000000000006E-11, 1.0000000000000006E-11, -1.0000000000000006E-11,
      -1.0000000000000009E-15, -1.0000000000000008E-12, -1.0000000000000008E-12,
      1.0000000000000008E-12, 1.0000000000000008E-12, -6.0000000000000048E-16,
      -1.0000000000000009E-13, 1.0000000000000009E-13, -1.0000000000000009E-13,
      1.0000000000000009E-13, 1.000000000000001E-17, 1.0000000000000009E-14,
      1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
      6.0000000000000058E-18, 1.0000000000000011E-15, -1.0000000000000011E-15,
      1.0000000000000011E-15, -1.0000000000000011E-15, -1.0000000000000011E-19,
      -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
      1.0000000000000011E-16, -6.0000000000000066E-20, -1.000000000000001E-17,
      1.000000000000001E-17, -1.000000000000001E-17, 1.000000000000001E-17,
      1.0000000000000012E-21, 1.0000000000000012E-18, 1.0000000000000012E-18,
      -1.0000000000000012E-18, -1.0000000000000012E-18, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
      -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681,
      -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -4.0000000000000039E-16, -4.0000000000000037E-13,
      -4.0000000000000037E-13, 4.0000000000000037E-13, 4.0000000000000037E-13,
      -2.400000000000002E-16, -4.0000000000000038E-14, 4.0000000000000038E-14,
      -4.0000000000000038E-14, 4.0000000000000038E-14, 4.0000000000000041E-18,
      4.0000000000000043E-15, 4.0000000000000043E-15, -4.0000000000000043E-15,
      -4.0000000000000043E-15, 2.4000000000000023E-18, 4.0000000000000044E-16,
      -4.0000000000000044E-16, 4.0000000000000044E-16, -4.0000000000000044E-16,
      -4.0000000000000046E-20, -4.000000000000004E-17, -4.000000000000004E-17,
      4.000000000000004E-17, 4.000000000000004E-17, -2.4000000000000026E-20,
      -4.0000000000000049E-18, 4.0000000000000049E-18, -4.0000000000000049E-18,
      4.0000000000000049E-18, 4.0000000000000049E-22, 4.0000000000000047E-19,
      4.0000000000000047E-19, -4.0000000000000047E-19, -4.0000000000000047E-19,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049,
      48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0,
      -100.0, 0.06, 10.0, -10.0, 10.0, -10.0, -0.0010000000000000002,
      -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
      1.0000000000000002, -0.00060000000000000016, -0.10000000000000002,
      0.10000000000000002, -0.10000000000000002, 0.10000000000000002,
      1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
      -0.010000000000000004, -0.010000000000000004, 6.0000000000000027E-6,
      0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
      -0.0010000000000000005, -1.0000000000000005E-7, -0.00010000000000000003,
      -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003,
      -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
      -1.0000000000000004E-5, 1.0000000000000004E-5, 1.0000000000000005E-9,
      1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
      -1.0000000000000006E-6, 6.0000000000000031E-10, 1.0000000000000005E-7,
      -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7,
      -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
      1.0000000000000005E-8, 1.0000000000000005E-8, -6.0000000000000035E-12,
      -1.0000000000000007E-9, 1.0000000000000007E-9, -1.0000000000000007E-9,
      1.0000000000000007E-9, 1.0000000000000007E-13, 1.0000000000000006E-10,
      1.0000000000000006E-10, -1.0000000000000006E-10, -1.0000000000000006E-10,
      6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
      1.0000000000000006E-11, -1.0000000000000006E-11, -1.0000000000000009E-15,
      -1.0000000000000008E-12, -1.0000000000000008E-12, 1.0000000000000008E-12,
      1.0000000000000008E-12, -6.0000000000000048E-16, -1.0000000000000009E-13,
      1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13,
      1.000000000000001E-17, 1.0000000000000009E-14, 1.0000000000000009E-14,
      -1.0000000000000009E-14, -1.0000000000000009E-14, 6.0000000000000058E-18,
      1.0000000000000011E-15, -1.0000000000000011E-15, 1.0000000000000011E-15,
      -1.0000000000000011E-15, -1.0000000000000011E-19, -1.0000000000000011E-16,
      -1.0000000000000011E-16, 1.0000000000000011E-16, 1.0000000000000011E-16,
      -6.0000000000000066E-20, -1.000000000000001E-17, 1.000000000000001E-17,
      -1.000000000000001E-17, 1.000000000000001E-17, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 1.2926829268292681, -1.2926829268292681, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
      -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -4.0000000000000039E-16, -4.0000000000000037E-13,
      -4.0000000000000037E-13, 4.0000000000000037E-13, 4.0000000000000037E-13,
      -2.400000000000002E-16, -4.0000000000000038E-14, 4.0000000000000038E-14,
      -4.0000000000000038E-14, 4.0000000000000038E-14, 4.0000000000000041E-18,
      4.0000000000000043E-15, 4.0000000000000043E-15, -4.0000000000000043E-15,
      -4.0000000000000043E-15, 2.4000000000000023E-18, 4.0000000000000044E-16,
      -4.0000000000000044E-16, 4.0000000000000044E-16, -4.0000000000000044E-16,
      -4.0000000000000046E-20, -4.000000000000004E-17, -4.000000000000004E-17,
      4.000000000000004E-17, 4.000000000000004E-17, -2.4000000000000026E-20,
      -4.0000000000000049E-18, 4.0000000000000049E-18, -4.0000000000000049E-18,
      4.0000000000000049E-18, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0,
      -10.0, 10.0, -10.0, -0.0010000000000000002, -1.0000000000000002,
      -1.0000000000000002, 1.0000000000000002, 1.0000000000000002,
      -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, 0.10000000000000002, 1.0000000000000004E-5,
      0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
      -0.010000000000000004, 6.0000000000000027E-6, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
      -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
      0.00010000000000000003, 0.00010000000000000003, -6.0000000000000021E-8,
      -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
      1.0000000000000004E-5, 1.0000000000000005E-9, 1.0000000000000006E-6,
      1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6,
      6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
      1.0000000000000005E-7, -1.0000000000000005E-7, -1.0000000000000006E-11,
      -1.0000000000000005E-8, -1.0000000000000005E-8, 1.0000000000000005E-8,
      1.0000000000000005E-8, -6.0000000000000035E-12, -1.0000000000000007E-9,
      1.0000000000000007E-9, -1.0000000000000007E-9, 1.0000000000000007E-9,
      1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
      -1.0000000000000006E-10, -1.0000000000000006E-10, 6.0000000000000035E-14,
      1.0000000000000006E-11, -1.0000000000000006E-11, 1.0000000000000006E-11,
      -1.0000000000000006E-11, -1.0000000000000009E-15, -1.0000000000000008E-12,
      -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12,
      -6.0000000000000048E-16, -1.0000000000000009E-13, 1.0000000000000009E-13,
      -1.0000000000000009E-13, 1.0000000000000009E-13, 1.000000000000001E-17,
      1.0000000000000009E-14, 1.0000000000000009E-14, -1.0000000000000009E-14,
      -1.0000000000000009E-14, 6.0000000000000058E-18, 1.0000000000000011E-15,
      -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
      -1.0000000000000011E-19, -1.0000000000000011E-16, -1.0000000000000011E-16,
      1.0000000000000011E-16, 1.0000000000000011E-16, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0,
      100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -4.0000000000000039E-16, -4.0000000000000037E-13,
      -4.0000000000000037E-13, 4.0000000000000037E-13, 4.0000000000000037E-13,
      -2.400000000000002E-16, -4.0000000000000038E-14, 4.0000000000000038E-14,
      -4.0000000000000038E-14, 4.0000000000000038E-14, 4.0000000000000041E-18,
      4.0000000000000043E-15, 4.0000000000000043E-15, -4.0000000000000043E-15,
      -4.0000000000000043E-15, 2.4000000000000023E-18, 4.0000000000000044E-16,
      -4.0000000000000044E-16, 4.0000000000000044E-16, -4.0000000000000044E-16,
      -4.0000000000000046E-20, -4.000000000000004E-17, -4.000000000000004E-17,
      4.000000000000004E-17, 4.000000000000004E-17, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049,
      48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
      100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -6.0000000000000021E-8, -1.0000000000000004E-5,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5,
      1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
      -1.0000000000000006E-6, -1.0000000000000006E-6, 6.0000000000000031E-10,
      1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
      -1.0000000000000005E-7, -1.0000000000000006E-11, -1.0000000000000005E-8,
      -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8,
      -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
      -1.0000000000000007E-9, 1.0000000000000007E-9, 1.0000000000000007E-13,
      1.0000000000000006E-10, 1.0000000000000006E-10, -1.0000000000000006E-10,
      -1.0000000000000006E-10, 6.0000000000000035E-14, 1.0000000000000006E-11,
      -1.0000000000000006E-11, 1.0000000000000006E-11, -1.0000000000000006E-11,
      -1.0000000000000009E-15, -1.0000000000000008E-12, -1.0000000000000008E-12,
      1.0000000000000008E-12, 1.0000000000000008E-12, -6.0000000000000048E-16,
      -1.0000000000000009E-13, 1.0000000000000009E-13, -1.0000000000000009E-13,
      1.0000000000000009E-13, 1.000000000000001E-17, 1.0000000000000009E-14,
      1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
      6.0000000000000058E-18, 1.0000000000000011E-15, -1.0000000000000011E-15,
      1.0000000000000011E-15, -1.0000000000000011E-15, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
      -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0, -40.0,
      0.024000000000000004, 4.0000000000000009, -4.0000000000000009,
      4.0000000000000009, -4.0000000000000009, -0.00040000000000000013,
      -0.40000000000000008, -0.40000000000000008, 0.40000000000000008,
      0.40000000000000008, -0.00024000000000000006, -0.040000000000000015,
      0.040000000000000015, -0.040000000000000015, 0.040000000000000015,
      4.0000000000000015E-6, 0.0040000000000000018, 0.0040000000000000018,
      -0.0040000000000000018, -0.0040000000000000018, 2.4000000000000007E-6,
      0.00040000000000000013, -0.00040000000000000013, 0.00040000000000000013,
      -0.00040000000000000013, -4.0000000000000021E-8, -4.0000000000000017E-5,
      -4.0000000000000017E-5, 4.0000000000000017E-5, 4.0000000000000017E-5,
      -2.4000000000000013E-8, -4.0000000000000024E-6, 4.0000000000000024E-6,
      -4.0000000000000024E-6, 4.0000000000000024E-6, 4.0000000000000022E-10,
      4.0000000000000019E-7, 4.0000000000000019E-7, -4.0000000000000019E-7,
      -4.0000000000000019E-7, 2.400000000000001E-10, 4.0000000000000021E-8,
      -4.0000000000000021E-8, 4.0000000000000021E-8, -4.0000000000000021E-8,
      -4.0000000000000023E-12, -4.0000000000000027E-9, -4.0000000000000027E-9,
      4.0000000000000027E-9, 4.0000000000000027E-9, -2.4000000000000015E-12,
      -4.0000000000000022E-10, 4.0000000000000022E-10, -4.0000000000000022E-10,
      4.0000000000000022E-10, 4.0000000000000032E-14, 4.0000000000000023E-11,
      4.0000000000000023E-11, -4.0000000000000023E-11, -4.0000000000000023E-11,
      2.4000000000000018E-14, 4.0000000000000032E-12, -4.0000000000000032E-12,
      4.0000000000000032E-12, -4.0000000000000032E-12, -4.0000000000000039E-16,
      -4.0000000000000037E-13, -4.0000000000000037E-13, 4.0000000000000037E-13,
      4.0000000000000037E-13, -2.400000000000002E-16, -4.0000000000000038E-14,
      4.0000000000000038E-14, -4.0000000000000038E-14, 4.0000000000000038E-14,
      4.0000000000000041E-18, 4.0000000000000043E-15, 4.0000000000000043E-15,
      -4.0000000000000043E-15, -4.0000000000000043E-15, 2.4000000000000023E-18,
      4.0000000000000044E-16, -4.0000000000000044E-16, 4.0000000000000044E-16,
      -4.0000000000000044E-16, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0,
      -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0, -0.0010000000000000002,
      -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
      1.0000000000000002, -0.00060000000000000016, -0.10000000000000002,
      0.10000000000000002, -0.10000000000000002, 0.10000000000000002,
      1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
      -0.010000000000000004, -0.010000000000000004, 6.0000000000000027E-6,
      0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
      -0.0010000000000000005, -1.0000000000000005E-7, -0.00010000000000000003,
      -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003,
      -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
      -1.0000000000000004E-5, 1.0000000000000004E-5, 1.0000000000000005E-9,
      1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
      -1.0000000000000006E-6, 6.0000000000000031E-10, 1.0000000000000005E-7,
      -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7,
      -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
      1.0000000000000005E-8, 1.0000000000000005E-8, -6.0000000000000035E-12,
      -1.0000000000000007E-9, 1.0000000000000007E-9, -1.0000000000000007E-9,
      1.0000000000000007E-9, 1.0000000000000007E-13, 1.0000000000000006E-10,
      1.0000000000000006E-10, -1.0000000000000006E-10, -1.0000000000000006E-10,
      6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
      1.0000000000000006E-11, -1.0000000000000006E-11, -1.0000000000000009E-15,
      -1.0000000000000008E-12, -1.0000000000000008E-12, 1.0000000000000008E-12,
      1.0000000000000008E-12, -6.0000000000000048E-16, -1.0000000000000009E-13,
      1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13,
      1.000000000000001E-17, 1.0000000000000009E-14, 1.0000000000000009E-14,
      -1.0000000000000009E-14, -1.0000000000000009E-14, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0,
      -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681,
      -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -4.0000000000000039E-16, -4.0000000000000037E-13,
      -4.0000000000000037E-13, 4.0000000000000037E-13, 4.0000000000000037E-13,
      -2.400000000000002E-16, -4.0000000000000038E-14, 4.0000000000000038E-14,
      -4.0000000000000038E-14, 4.0000000000000038E-14, 4.0000000000000041E-18,
      4.0000000000000043E-15, 4.0000000000000043E-15, -4.0000000000000043E-15,
      -4.0000000000000043E-15, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049,
      48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0,
      10.0, -10.0, -0.0010000000000000002, -1.0000000000000002,
      -1.0000000000000002, 1.0000000000000002, 1.0000000000000002,
      -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, 0.10000000000000002, 1.0000000000000004E-5,
      0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
      -0.010000000000000004, 6.0000000000000027E-6, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
      -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
      0.00010000000000000003, 0.00010000000000000003, -6.0000000000000021E-8,
      -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
      1.0000000000000004E-5, 1.0000000000000005E-9, 1.0000000000000006E-6,
      1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6,
      6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
      1.0000000000000005E-7, -1.0000000000000005E-7, -1.0000000000000006E-11,
      -1.0000000000000005E-8, -1.0000000000000005E-8, 1.0000000000000005E-8,
      1.0000000000000005E-8, -6.0000000000000035E-12, -1.0000000000000007E-9,
      1.0000000000000007E-9, -1.0000000000000007E-9, 1.0000000000000007E-9,
      1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
      -1.0000000000000006E-10, -1.0000000000000006E-10, 6.0000000000000035E-14,
      1.0000000000000006E-11, -1.0000000000000006E-11, 1.0000000000000006E-11,
      -1.0000000000000006E-11, -1.0000000000000009E-15, -1.0000000000000008E-12,
      -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12,
      -6.0000000000000048E-16, -1.0000000000000009E-13, 1.0000000000000009E-13,
      -1.0000000000000009E-13, 1.0000000000000009E-13, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
      -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681,
      -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -4.0000000000000039E-16, -4.0000000000000037E-13,
      -4.0000000000000037E-13, 4.0000000000000037E-13, 4.0000000000000037E-13,
      -2.400000000000002E-16, -4.0000000000000038E-14, 4.0000000000000038E-14,
      -4.0000000000000038E-14, 4.0000000000000038E-14, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
      100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -6.0000000000000021E-8, -1.0000000000000004E-5,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5,
      1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
      -1.0000000000000006E-6, -1.0000000000000006E-6, 6.0000000000000031E-10,
      1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
      -1.0000000000000005E-7, -1.0000000000000006E-11, -1.0000000000000005E-8,
      -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8,
      -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
      -1.0000000000000007E-9, 1.0000000000000007E-9, 1.0000000000000007E-13,
      1.0000000000000006E-10, 1.0000000000000006E-10, -1.0000000000000006E-10,
      -1.0000000000000006E-10, 6.0000000000000035E-14, 1.0000000000000006E-11,
      -1.0000000000000006E-11, 1.0000000000000006E-11, -1.0000000000000006E-11,
      -1.0000000000000009E-15, -1.0000000000000008E-12, -1.0000000000000008E-12,
      1.0000000000000008E-12, 1.0000000000000008E-12, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
      -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -4.0000000000000039E-16, -4.0000000000000037E-13,
      -4.0000000000000037E-13, 4.0000000000000037E-13, 4.0000000000000037E-13,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049,
      48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0,
      -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0, -0.0010000000000000002,
      -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
      1.0000000000000002, -0.00060000000000000016, -0.10000000000000002,
      0.10000000000000002, -0.10000000000000002, 0.10000000000000002,
      1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
      -0.010000000000000004, -0.010000000000000004, 6.0000000000000027E-6,
      0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
      -0.0010000000000000005, -1.0000000000000005E-7, -0.00010000000000000003,
      -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003,
      -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
      -1.0000000000000004E-5, 1.0000000000000004E-5, 1.0000000000000005E-9,
      1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
      -1.0000000000000006E-6, 6.0000000000000031E-10, 1.0000000000000005E-7,
      -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7,
      -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
      1.0000000000000005E-8, 1.0000000000000005E-8, -6.0000000000000035E-12,
      -1.0000000000000007E-9, 1.0000000000000007E-9, -1.0000000000000007E-9,
      1.0000000000000007E-9, 1.0000000000000007E-13, 1.0000000000000006E-10,
      1.0000000000000006E-10, -1.0000000000000006E-10, -1.0000000000000006E-10,
      6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
      1.0000000000000006E-11, -1.0000000000000006E-11, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 1.2926829268292681, -1.2926829268292681, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0,
      -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, 4.0000000000000022E-10, 4.0000000000000019E-7,
      4.0000000000000019E-7, -4.0000000000000019E-7, -4.0000000000000019E-7,
      2.400000000000001E-10, 4.0000000000000021E-8, -4.0000000000000021E-8,
      4.0000000000000021E-8, -4.0000000000000021E-8, -4.0000000000000023E-12,
      -4.0000000000000027E-9, -4.0000000000000027E-9, 4.0000000000000027E-9,
      4.0000000000000027E-9, -2.4000000000000015E-12, -4.0000000000000022E-10,
      4.0000000000000022E-10, -4.0000000000000022E-10, 4.0000000000000022E-10,
      4.0000000000000032E-14, 4.0000000000000023E-11, 4.0000000000000023E-11,
      -4.0000000000000023E-11, -4.0000000000000023E-11, 2.4000000000000018E-14,
      4.0000000000000032E-12, -4.0000000000000032E-12, 4.0000000000000032E-12,
      -4.0000000000000032E-12, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0,
      -10.0, -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -6.0000000000000021E-8, -1.0000000000000004E-5,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5,
      1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
      -1.0000000000000006E-6, -1.0000000000000006E-6, 6.0000000000000031E-10,
      1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
      -1.0000000000000005E-7, -1.0000000000000006E-11, -1.0000000000000005E-8,
      -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8,
      -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
      -1.0000000000000007E-9, 1.0000000000000007E-9, 1.0000000000000007E-13,
      1.0000000000000006E-10, 1.0000000000000006E-10, -1.0000000000000006E-10,
      -1.0000000000000006E-10, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0,
      100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -48.780487804878049, -48.780487804878049, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681,
      -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0,
      -40.0, -40.0, 0.024000000000000004, 4.0000000000000009,
      -4.0000000000000009, 4.0000000000000009, -4.0000000000000009,
      -0.00040000000000000013, -0.40000000000000008, -0.40000000000000008,
      0.40000000000000008, 0.40000000000000008, -0.00024000000000000006,
      -0.040000000000000015, 0.040000000000000015, -0.040000000000000015,
      0.040000000000000015, 4.0000000000000015E-6, 0.0040000000000000018,
      0.0040000000000000018, -0.0040000000000000018, -0.0040000000000000018,
      2.4000000000000007E-6, 0.00040000000000000013, -0.00040000000000000013,
      0.00040000000000000013, -0.00040000000000000013, -4.0000000000000021E-8,
      -4.0000000000000017E-5, -4.0000000000000017E-5, 4.0000000000000017E-5,
      4.0000000000000017E-5, -2.4000000000000013E-8, -4.0000000000000024E-6,
      4.0000000000000024E-6, -4.0000000000000024E-6, 4.0000000000000024E-6,
      4.0000000000000022E-10, 4.0000000000000019E-7, 4.0000000000000019E-7,
      -4.0000000000000019E-7, -4.0000000000000019E-7, 2.400000000000001E-10,
      4.0000000000000021E-8, -4.0000000000000021E-8, 4.0000000000000021E-8,
      -4.0000000000000021E-8, -4.0000000000000023E-12, -4.0000000000000027E-9,
      -4.0000000000000027E-9, 4.0000000000000027E-9, 4.0000000000000027E-9,
      -2.4000000000000015E-12, -4.0000000000000022E-10, 4.0000000000000022E-10,
      -4.0000000000000022E-10, 4.0000000000000022E-10, 4.0000000000000032E-14,
      4.0000000000000023E-11, 4.0000000000000023E-11, -4.0000000000000023E-11,
      -4.0000000000000023E-11, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06,
      10.0, -10.0, 10.0, -10.0, -0.0010000000000000002, -1.0000000000000002,
      -1.0000000000000002, 1.0000000000000002, 1.0000000000000002,
      -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, 0.10000000000000002, 1.0000000000000004E-5,
      0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
      -0.010000000000000004, 6.0000000000000027E-6, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
      -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
      0.00010000000000000003, 0.00010000000000000003, -6.0000000000000021E-8,
      -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
      1.0000000000000004E-5, 1.0000000000000005E-9, 1.0000000000000006E-6,
      1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6,
      6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
      1.0000000000000005E-7, -1.0000000000000005E-7, -1.0000000000000006E-11,
      -1.0000000000000005E-8, -1.0000000000000005E-8, 1.0000000000000005E-8,
      1.0000000000000005E-8, -6.0000000000000035E-12, -1.0000000000000007E-9,
      1.0000000000000007E-9, -1.0000000000000007E-9, 1.0000000000000007E-9, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0, -40.0,
      0.024000000000000004, 4.0000000000000009, -4.0000000000000009,
      4.0000000000000009, -4.0000000000000009, -0.00040000000000000013,
      -0.40000000000000008, -0.40000000000000008, 0.40000000000000008,
      0.40000000000000008, -0.00024000000000000006, -0.040000000000000015,
      0.040000000000000015, -0.040000000000000015, 0.040000000000000015,
      4.0000000000000015E-6, 0.0040000000000000018, 0.0040000000000000018,
      -0.0040000000000000018, -0.0040000000000000018, 2.4000000000000007E-6,
      0.00040000000000000013, -0.00040000000000000013, 0.00040000000000000013,
      -0.00040000000000000013, -4.0000000000000021E-8, -4.0000000000000017E-5,
      -4.0000000000000017E-5, 4.0000000000000017E-5, 4.0000000000000017E-5,
      -2.4000000000000013E-8, -4.0000000000000024E-6, 4.0000000000000024E-6,
      -4.0000000000000024E-6, 4.0000000000000024E-6, 4.0000000000000022E-10,
      4.0000000000000019E-7, 4.0000000000000019E-7, -4.0000000000000019E-7,
      -4.0000000000000019E-7, 2.400000000000001E-10, 4.0000000000000021E-8,
      -4.0000000000000021E-8, 4.0000000000000021E-8, -4.0000000000000021E-8,
      -4.0000000000000023E-12, -4.0000000000000027E-9, -4.0000000000000027E-9,
      4.0000000000000027E-9, 4.0000000000000027E-9, -2.4000000000000015E-12,
      -4.0000000000000022E-10, 4.0000000000000022E-10, -4.0000000000000022E-10,
      4.0000000000000022E-10, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
      100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -6.0000000000000021E-8, -1.0000000000000004E-5,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5,
      1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
      -1.0000000000000006E-6, -1.0000000000000006E-6, 6.0000000000000031E-10,
      1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
      -1.0000000000000005E-7, -1.0000000000000006E-11, -1.0000000000000005E-8,
      -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
      -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0,
      40.0, -40.0, -40.0, 0.024000000000000004, 4.0000000000000009,
      -4.0000000000000009, 4.0000000000000009, -4.0000000000000009,
      -0.00040000000000000013, -0.40000000000000008, -0.40000000000000008,
      0.40000000000000008, 0.40000000000000008, -0.00024000000000000006,
      -0.040000000000000015, 0.040000000000000015, -0.040000000000000015,
      0.040000000000000015, 4.0000000000000015E-6, 0.0040000000000000018,
      0.0040000000000000018, -0.0040000000000000018, -0.0040000000000000018,
      2.4000000000000007E-6, 0.00040000000000000013, -0.00040000000000000013,
      0.00040000000000000013, -0.00040000000000000013, -4.0000000000000021E-8,
      -4.0000000000000017E-5, -4.0000000000000017E-5, 4.0000000000000017E-5,
      4.0000000000000017E-5, -2.4000000000000013E-8, -4.0000000000000024E-6,
      4.0000000000000024E-6, -4.0000000000000024E-6, 4.0000000000000024E-6,
      4.0000000000000022E-10, 4.0000000000000019E-7, 4.0000000000000019E-7,
      -4.0000000000000019E-7, -4.0000000000000019E-7, 2.400000000000001E-10,
      4.0000000000000021E-8, -4.0000000000000021E-8, 4.0000000000000021E-8,
      -4.0000000000000021E-8, -4.0000000000000023E-12, -4.0000000000000027E-9,
      -4.0000000000000027E-9, 4.0000000000000027E-9, 4.0000000000000027E-9, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0,
      -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0, -0.0010000000000000002,
      -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
      1.0000000000000002, -0.00060000000000000016, -0.10000000000000002,
      0.10000000000000002, -0.10000000000000002, 0.10000000000000002,
      1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
      -0.010000000000000004, -0.010000000000000004, 6.0000000000000027E-6,
      0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
      -0.0010000000000000005, -1.0000000000000005E-7, -0.00010000000000000003,
      -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003,
      -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
      -1.0000000000000004E-5, 1.0000000000000004E-5, 1.0000000000000005E-9,
      1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
      -1.0000000000000006E-6, 6.0000000000000031E-10, 1.0000000000000005E-7,
      -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 1.2926829268292681, -1.2926829268292681, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
      -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -48.780487804878049, -48.780487804878049, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681,
      -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0, -40.0,
      0.024000000000000004, 4.0000000000000009, -4.0000000000000009,
      4.0000000000000009, -4.0000000000000009, -0.00040000000000000013,
      -0.40000000000000008, -0.40000000000000008, 0.40000000000000008,
      0.40000000000000008, -0.00024000000000000006, -0.040000000000000015,
      0.040000000000000015, -0.040000000000000015, 0.040000000000000015,
      4.0000000000000015E-6, 0.0040000000000000018, 0.0040000000000000018,
      -0.0040000000000000018, -0.0040000000000000018, 2.4000000000000007E-6,
      0.00040000000000000013, -0.00040000000000000013, 0.00040000000000000013,
      -0.00040000000000000013, -4.0000000000000021E-8, -4.0000000000000017E-5,
      -4.0000000000000017E-5, 4.0000000000000017E-5, 4.0000000000000017E-5,
      -2.4000000000000013E-8, -4.0000000000000024E-6, 4.0000000000000024E-6,
      -4.0000000000000024E-6, 4.0000000000000024E-6, 4.0000000000000022E-10,
      4.0000000000000019E-7, 4.0000000000000019E-7, -4.0000000000000019E-7,
      -4.0000000000000019E-7, 2.400000000000001E-10, 4.0000000000000021E-8,
      -4.0000000000000021E-8, 4.0000000000000021E-8, -4.0000000000000021E-8,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0,
      -10.0, 10.0, -10.0, -0.0010000000000000002, -1.0000000000000002,
      -1.0000000000000002, 1.0000000000000002, 1.0000000000000002,
      -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, 0.10000000000000002, 1.0000000000000004E-5,
      0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
      -0.010000000000000004, 6.0000000000000027E-6, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
      -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
      0.00010000000000000003, 0.00010000000000000003, -6.0000000000000021E-8,
      -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
      1.0000000000000004E-5, 1.0000000000000005E-9, 1.0000000000000006E-6,
      1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0,
      100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049,
      48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008,
      40.0, 40.0, -40.0, -40.0, 0.024000000000000004, 4.0000000000000009,
      -4.0000000000000009, 4.0000000000000009, -4.0000000000000009,
      -0.00040000000000000013, -0.40000000000000008, -0.40000000000000008,
      0.40000000000000008, 0.40000000000000008, -0.00024000000000000006,
      -0.040000000000000015, 0.040000000000000015, -0.040000000000000015,
      0.040000000000000015, 4.0000000000000015E-6, 0.0040000000000000018,
      0.0040000000000000018, -0.0040000000000000018, -0.0040000000000000018,
      2.4000000000000007E-6, 0.00040000000000000013, -0.00040000000000000013,
      0.00040000000000000013, -0.00040000000000000013, -4.0000000000000021E-8,
      -4.0000000000000017E-5, -4.0000000000000017E-5, 4.0000000000000017E-5,
      4.0000000000000017E-5, -2.4000000000000013E-8, -4.0000000000000024E-6,
      4.0000000000000024E-6, -4.0000000000000024E-6, 4.0000000000000024E-6,
      4.0000000000000022E-10, 4.0000000000000019E-7, 4.0000000000000019E-7,
      -4.0000000000000019E-7, -4.0000000000000019E-7, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0,
      -10.0, -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -6.0000000000000021E-8, -1.0000000000000004E-5,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
      -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049,
      48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, 4.0000000000000015E-6,
      0.0040000000000000018, 0.0040000000000000018, -0.0040000000000000018,
      -0.0040000000000000018, 2.4000000000000007E-6, 0.00040000000000000013,
      -0.00040000000000000013, 0.00040000000000000013, -0.00040000000000000013,
      -4.0000000000000021E-8, -4.0000000000000017E-5, -4.0000000000000017E-5,
      4.0000000000000017E-5, 4.0000000000000017E-5, -2.4000000000000013E-8,
      -4.0000000000000024E-6, 4.0000000000000024E-6, -4.0000000000000024E-6,
      4.0000000000000024E-6, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0,
      -10.0, -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004,
      6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, -1.0000000000000005E-7,
      -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      0.00010000000000000003, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0,
      100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -48.780487804878049, -48.780487804878049, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0,
      -40.0, 0.024000000000000004, 4.0000000000000009, -4.0000000000000009,
      4.0000000000000009, -4.0000000000000009, -0.00040000000000000013,
      -0.40000000000000008, -0.40000000000000008, 0.40000000000000008,
      0.40000000000000008, -0.00024000000000000006, -0.040000000000000015,
      0.040000000000000015, -0.040000000000000015, 0.040000000000000015,
      4.0000000000000015E-6, 0.0040000000000000018, 0.0040000000000000018,
      -0.0040000000000000018, -0.0040000000000000018, 2.4000000000000007E-6,
      0.00040000000000000013, -0.00040000000000000013, 0.00040000000000000013,
      -0.00040000000000000013, -4.0000000000000021E-8, -4.0000000000000017E-5,
      -4.0000000000000017E-5, 4.0000000000000017E-5, 4.0000000000000017E-5, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0,
      10.0, -10.0, -0.0010000000000000002, -1.0000000000000002,
      -1.0000000000000002, 1.0000000000000002, 1.0000000000000002,
      -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, 0.10000000000000002, 1.0000000000000004E-5,
      0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
      -0.010000000000000004, 6.0000000000000027E-6, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0, -40.0,
      0.024000000000000004, 4.0000000000000009, -4.0000000000000009,
      4.0000000000000009, -4.0000000000000009, -0.00040000000000000013,
      -0.40000000000000008, -0.40000000000000008, 0.40000000000000008,
      0.40000000000000008, -0.00024000000000000006, -0.040000000000000015,
      0.040000000000000015, -0.040000000000000015, 0.040000000000000015,
      4.0000000000000015E-6, 0.0040000000000000018, 0.0040000000000000018,
      -0.0040000000000000018, -0.0040000000000000018, 2.4000000000000007E-6,
      0.00040000000000000013, -0.00040000000000000013, 0.00040000000000000013,
      -0.00040000000000000013, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0,
      100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, 1.0000000000000004E-5, 0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, -0.010000000000000004, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
      -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0,
      40.0, -40.0, -40.0, 0.024000000000000004, 4.0000000000000009,
      -4.0000000000000009, 4.0000000000000009, -4.0000000000000009,
      -0.00040000000000000013, -0.40000000000000008, -0.40000000000000008,
      0.40000000000000008, 0.40000000000000008, -0.00024000000000000006,
      -0.040000000000000015, 0.040000000000000015, -0.040000000000000015,
      0.040000000000000015, 4.0000000000000015E-6, 0.0040000000000000018,
      0.0040000000000000018, -0.0040000000000000018, -0.0040000000000000018,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0,
      100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.00060000000000000016,
      -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0,
      -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008,
      -0.00024000000000000006, -0.040000000000000015, 0.040000000000000015,
      -0.040000000000000015, 0.040000000000000015, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
      100.0, 100.0, -100.0, -100.0, 0.06, 10.0, -10.0, 10.0, -10.0,
      -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, 1.0000000000000002, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
      -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.040000000000000008, 40.0, 40.0, -40.0, -40.0, 0.024000000000000004,
      4.0000000000000009, -4.0000000000000009, 4.0000000000000009,
      -4.0000000000000009, -0.00040000000000000013, -0.40000000000000008,
      -0.40000000000000008, 0.40000000000000008, 0.40000000000000008, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049,
      -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.06, 10.0,
      -10.0, 10.0, -10.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6,
      -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -48.780487804878049, -48.780487804878049, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0, -40.0,
      0.024000000000000004, 4.0000000000000009, -4.0000000000000009,
      4.0000000000000009, -4.0000000000000009, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 48.780487804878049, 48.780487804878049, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -48.780487804878049, -48.780487804878049, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.2926829268292681,
      -1.2926829268292681, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
      0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0,
      100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -48.780487804878049, -48.780487804878049, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.040000000000000008, 40.0, 40.0, -40.0, -40.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
      -100.0, -100.0, 100.0, 100.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049, -48.780487804878049,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681,
      1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const double b_D[3094]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      48.780487804878049, 48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0 };

    static const double b_B[2210]{ 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
      0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const double dv12[1736]{ -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, -1.0, -0.0, -1.0, -0.0, -1.0, -0.0,
      1.0, 0.0, 1.0, 0.0, 1.0, 0.0, -1.0, -0.0, -0.0, 1.0, 0.0, 0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1, -100.0, -100.0,
      100.0, 100.0, -0.16, -110.0, -90.0, 90.0, 110.0, -0.159, -109.0, -89.0,
      89.0, 109.0, -0.1584, -108.9, -89.1, 89.1, 108.9, -0.15841, -108.91,
      -89.109999999999985, 89.109999999999985, 108.91, -0.158416,
      -108.91099999999999, -89.109, 89.109, 108.91099999999999, -0.1584159,
      -108.9109, -89.1089, 89.1089, 108.9109, -0.15841584, -108.91089,
      -89.108910000000009, 89.108910000000009, 108.91089, -0.158415841,
      -108.91089099999999, -89.108911, 89.108911, 108.91089099999999,
      -0.1584158416, -108.9108911, -89.1089109, 89.1089109, 108.9108911,
      -0.15841584159, -108.91089109, -89.10891089, 89.10891089, 108.91089109,
      -0.15841584158400002, -108.910891089, -89.108910891000008,
      89.108910891000008, 108.910891089, -0.1584158415841, -108.91089108909999,
      -89.1089108911, 89.1089108911, 108.91089108909999, -0.15841584158416,
      -108.91089108911, -89.108910891089991, 89.108910891089991, 108.91089108911,
      -0.158415841584159, -108.910891089109, -89.108910891089, 89.108910891089,
      108.910891089109, -0.15841584158415839, -108.9108910891089,
      -89.1089108910891, 89.1089108910891, 108.9108910891089,
      -0.15841584158415842, -108.91089108910892, -89.10891089108911,
      89.10891089108911, 108.91089108910892, -0.15841584158415842,
      -108.91089108910892, -89.10891089108911, 89.10891089108911,
      108.91089108910892, -0.15841584158415842, -108.91089108910892,
      -89.10891089108911, 89.10891089108911, 108.91089108910892,
      -0.15841584158415842, -108.91089108910892, -89.10891089108911,
      89.10891089108911, 108.91089108910892, -0.15841584158415842,
      -108.91089108910892, -89.10891089108911, 89.10891089108911,
      108.91089108910892, -0.15841584158415842, -108.91089108910892,
      -89.10891089108911, 89.10891089108911, 108.91089108910892,
      -0.15841584158415842, -108.91089108910892, -89.10891089108911,
      89.10891089108911, 108.91089108910892, -0.15841584158415842,
      -108.91089108910892, -89.10891089108911, 89.10891089108911,
      108.91089108910892, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, -0.0, -1.0, -0.0, -1.0, -0.0,
      -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049, -0.0, -0.0,
      -1.0, -0.0, -1.0, -0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, -0.0, -1.0, -0.0,
      0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.1, -100.0, -100.0, 100.0, 100.0, -0.16, -110.0, -90.0, 90.0,
      110.0, -0.159, -109.0, -89.0, 89.0, 109.0, -0.1584, -108.9, -89.1, 89.1,
      108.9, -0.15841, -108.91, -89.109999999999985, 89.109999999999985, 108.91,
      -0.158416, -108.91099999999999, -89.109, 89.109, 108.91099999999999,
      -0.1584159, -108.9109, -89.1089, 89.1089, 108.9109, -0.15841584,
      -108.91089, -89.108910000000009, 89.108910000000009, 108.91089,
      -0.158415841, -108.91089099999999, -89.108911, 89.108911,
      108.91089099999999, -0.1584158416, -108.9108911, -89.1089109, 89.1089109,
      108.9108911, -0.15841584159, -108.91089109, -89.10891089, 89.10891089,
      108.91089109, -0.15841584158400002, -108.910891089, -89.108910891000008,
      89.108910891000008, 108.910891089, -0.1584158415841, -108.91089108909999,
      -89.1089108911, 89.1089108911, 108.91089108909999, -0.15841584158416,
      -108.91089108911, -89.108910891089991, 89.108910891089991, 108.91089108911,
      -0.158415841584159, -108.910891089109, -89.108910891089, 89.108910891089,
      108.910891089109, -0.15841584158415839, -108.9108910891089,
      -89.1089108910891, 89.1089108910891, 108.9108910891089,
      -0.15841584158415842, -108.91089108910892, -89.10891089108911,
      89.10891089108911, 108.91089108910892, -0.15841584158415842,
      -108.91089108910892, -89.10891089108911, 89.10891089108911,
      108.91089108910892, -0.15841584158415842, -108.91089108910892,
      -89.10891089108911, 89.10891089108911, 108.91089108910892, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, -0.0, -0.0, -0.0, -1.0, -0.0,
      -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
      0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 1.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1, -100.0,
      -100.0, 100.0, 100.0, -0.16, -110.0, -90.0, 90.0, 110.0, -0.159, -109.0,
      -89.0, 89.0, 109.0, -0.1584, -108.9, -89.1, 89.1, 108.9, -0.15841, -108.91,
      -89.109999999999985, 89.109999999999985, 108.91, -0.158416,
      -108.91099999999999, -89.109, 89.109, 108.91099999999999, -0.1584159,
      -108.9109, -89.1089, 89.1089, 108.9109, -0.15841584, -108.91089,
      -89.108910000000009, 89.108910000000009, 108.91089, -0.158415841,
      -108.91089099999999, -89.108911, 89.108911, 108.91089099999999,
      -0.1584158416, -108.9108911, -89.1089109, 89.1089109, 108.9108911,
      -0.15841584159, -108.91089109, -89.10891089, 89.10891089, 108.91089109,
      -0.15841584158400002, -108.910891089, -89.108910891000008,
      89.108910891000008, 108.910891089, -0.1584158415841, -108.91089108909999,
      -89.1089108911, 89.1089108911, 108.91089108909999, -0.15841584158416,
      -108.91089108911, -89.108910891089991, 89.108910891089991, 108.91089108911,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681, -0.0, -0.0,
      -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0,
      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
      0.0001, 0.0001, 0.0001 };

    static const double dv4[1240]{ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, -0.06, -10.0, 10.0, -10.0,
      10.0, 0.0010000000000000002, 1.0000000000000002, 1.0000000000000002,
      -1.0000000000000002, -1.0000000000000002, 0.00060000000000000016,
      0.10000000000000002, -0.10000000000000002, 0.10000000000000002,
      -0.10000000000000002, -1.0000000000000004E-5, -0.010000000000000004,
      -0.010000000000000004, 0.010000000000000004, 0.010000000000000004,
      -6.0000000000000027E-6, -0.0010000000000000005, 0.0010000000000000005,
      -0.0010000000000000005, 0.0010000000000000005, 1.0000000000000005E-7,
      0.00010000000000000003, 0.00010000000000000003, -0.00010000000000000003,
      -0.00010000000000000003, 6.0000000000000021E-8, 1.0000000000000004E-5,
      -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
      -1.0000000000000005E-9, -1.0000000000000006E-6, -1.0000000000000006E-6,
      1.0000000000000006E-6, 1.0000000000000006E-6, -6.0000000000000031E-10,
      -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7,
      1.0000000000000005E-7, 1.0000000000000006E-11, 1.0000000000000005E-8,
      1.0000000000000005E-8, -1.0000000000000005E-8, -1.0000000000000005E-8,
      6.0000000000000035E-12, 1.0000000000000007E-9, -1.0000000000000007E-9,
      1.0000000000000007E-9, -1.0000000000000007E-9, -1.0000000000000007E-13,
      -1.0000000000000006E-10, -1.0000000000000006E-10, 1.0000000000000006E-10,
      1.0000000000000006E-10, -6.0000000000000035E-14, -1.0000000000000006E-11,
      1.0000000000000006E-11, -1.0000000000000006E-11, 1.0000000000000006E-11,
      1.0000000000000009E-15, 1.0000000000000008E-12, 1.0000000000000008E-12,
      -1.0000000000000008E-12, -1.0000000000000008E-12, 6.0000000000000048E-16,
      1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13,
      -1.0000000000000009E-13, -1.000000000000001E-17, -1.0000000000000009E-14,
      -1.0000000000000009E-14, 1.0000000000000009E-14, 1.0000000000000009E-14,
      -6.0000000000000058E-18, -1.0000000000000011E-15, 1.0000000000000011E-15,
      -1.0000000000000011E-15, 1.0000000000000011E-15, 1.0000000000000011E-19,
      1.0000000000000011E-16, 1.0000000000000011E-16, -1.0000000000000011E-16,
      -1.0000000000000011E-16, 6.0000000000000066E-20, 1.000000000000001E-17,
      -1.000000000000001E-17, 1.000000000000001E-17, -1.000000000000001E-17,
      -1.0000000000000012E-21, -1.0000000000000012E-18, -1.0000000000000012E-18,
      1.0000000000000012E-18, 1.0000000000000012E-18, -6.0000000000000073E-22,
      -1.0000000000000012E-19, 1.0000000000000012E-19, -1.0000000000000012E-19,
      1.0000000000000012E-19, 1.0000000000000013E-23, 1.0000000000000013E-20,
      1.0000000000000013E-20, -1.0000000000000013E-20, -1.0000000000000013E-20,
      6.0000000000000073E-24, 1.0000000000000012E-21, -1.0000000000000012E-21,
      1.0000000000000012E-21, -1.0000000000000012E-21, -1.0000000000000014E-25,
      -1.0000000000000013E-22, -1.0000000000000013E-22, 1.0000000000000013E-22,
      1.0000000000000013E-22, -6.0000000000000083E-26, -1.0000000000000014E-23,
      1.0000000000000014E-23, -1.0000000000000014E-23, 1.0000000000000014E-23,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
      -100.0, 100.0, 0.010000000000000002, 10.0, 10.0, -10.0, -10.0,
      0.006000000000000001, 1.0000000000000002, -1.0000000000000002,
      1.0000000000000002, -1.0000000000000002, -0.00010000000000000003,
      -0.10000000000000002, -0.10000000000000002, 0.10000000000000002,
      0.10000000000000002, -6.0000000000000015E-5, -0.010000000000000004,
      0.010000000000000004, -0.010000000000000004, 0.010000000000000004,
      1.0000000000000004E-6, 0.0010000000000000005, 0.0010000000000000005,
      -0.0010000000000000005, -0.0010000000000000005, 6.0000000000000018E-7,
      0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
      -0.00010000000000000003, -1.0000000000000005E-8, -1.0000000000000004E-5,
      -1.0000000000000004E-5, 1.0000000000000004E-5, 1.0000000000000004E-5,
      -6.0000000000000033E-9, -1.0000000000000006E-6, 1.0000000000000006E-6,
      -1.0000000000000006E-6, 1.0000000000000006E-6, 1.0000000000000006E-10,
      1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7,
      -1.0000000000000005E-7, 6.0000000000000025E-11, 1.0000000000000005E-8,
      -1.0000000000000005E-8, 1.0000000000000005E-8, -1.0000000000000005E-8,
      -1.0000000000000006E-12, -1.0000000000000007E-9, -1.0000000000000007E-9,
      1.0000000000000007E-9, 1.0000000000000007E-9, -6.0000000000000037E-13,
      -1.0000000000000006E-10, 1.0000000000000006E-10, -1.0000000000000006E-10,
      1.0000000000000006E-10, 1.0000000000000008E-14, 1.0000000000000006E-11,
      1.0000000000000006E-11, -1.0000000000000006E-11, -1.0000000000000006E-11,
      6.0000000000000044E-15, 1.0000000000000008E-12, -1.0000000000000008E-12,
      1.0000000000000008E-12, -1.0000000000000008E-12, -1.000000000000001E-16,
      -1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13,
      1.0000000000000009E-13, -6.0000000000000051E-17, -1.0000000000000009E-14,
      1.0000000000000009E-14, -1.0000000000000009E-14, 1.0000000000000009E-14,
      1.000000000000001E-18, 1.0000000000000011E-15, 1.0000000000000011E-15,
      -1.0000000000000011E-15, -1.0000000000000011E-15, 6.0000000000000056E-19,
      1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
      -1.0000000000000011E-16, -1.0000000000000011E-20, -1.000000000000001E-17,
      -1.000000000000001E-17, 1.000000000000001E-17, 1.000000000000001E-17,
      -6.0000000000000066E-21, -1.0000000000000012E-18, 1.0000000000000012E-18,
      -1.0000000000000012E-18, 1.0000000000000012E-18, 1.0000000000000012E-22,
      1.0000000000000012E-19, 1.0000000000000012E-19, -1.0000000000000012E-19,
      -1.0000000000000012E-19, 6.0000000000000071E-23, 1.0000000000000013E-20,
      -1.0000000000000013E-20, 1.0000000000000013E-20, -1.0000000000000013E-20,
      -1.0000000000000014E-24, -1.0000000000000012E-21, -1.0000000000000012E-21,
      1.0000000000000012E-21, 1.0000000000000012E-21, -6.0000000000000078E-25,
      -1.0000000000000013E-22, 1.0000000000000013E-22, -1.0000000000000013E-22,
      1.0000000000000013E-22, 1.0000000000000015E-26, 1.0000000000000014E-23,
      1.0000000000000014E-23, -1.0000000000000014E-23, -1.0000000000000014E-23,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0,
      -0.06, -10.0, 10.0, -10.0, 10.0, 0.0010000000000000002, 1.0000000000000002,
      1.0000000000000002, -1.0000000000000002, -1.0000000000000002,
      0.00060000000000000016, 0.10000000000000002, -0.10000000000000002,
      0.10000000000000002, -0.10000000000000002, -1.0000000000000004E-5,
      -0.010000000000000004, -0.010000000000000004, 0.010000000000000004,
      0.010000000000000004, -6.0000000000000027E-6, -0.0010000000000000005,
      0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
      1.0000000000000005E-7, 0.00010000000000000003, 0.00010000000000000003,
      -0.00010000000000000003, -0.00010000000000000003, 6.0000000000000021E-8,
      1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5,
      -1.0000000000000004E-5, -1.0000000000000005E-9, -1.0000000000000006E-6,
      -1.0000000000000006E-6, 1.0000000000000006E-6, 1.0000000000000006E-6,
      -6.0000000000000031E-10, -1.0000000000000005E-7, 1.0000000000000005E-7,
      -1.0000000000000005E-7, 1.0000000000000005E-7, 1.0000000000000006E-11,
      1.0000000000000005E-8, 1.0000000000000005E-8, -1.0000000000000005E-8,
      -1.0000000000000005E-8, 6.0000000000000035E-12, 1.0000000000000007E-9,
      -1.0000000000000007E-9, 1.0000000000000007E-9, -1.0000000000000007E-9,
      -1.0000000000000007E-13, -1.0000000000000006E-10, -1.0000000000000006E-10,
      1.0000000000000006E-10, 1.0000000000000006E-10, -6.0000000000000035E-14,
      -1.0000000000000006E-11, 1.0000000000000006E-11, -1.0000000000000006E-11,
      1.0000000000000006E-11, 1.0000000000000009E-15, 1.0000000000000008E-12,
      1.0000000000000008E-12, -1.0000000000000008E-12, -1.0000000000000008E-12,
      6.0000000000000048E-16, 1.0000000000000009E-13, -1.0000000000000009E-13,
      1.0000000000000009E-13, -1.0000000000000009E-13, -1.000000000000001E-17,
      -1.0000000000000009E-14, -1.0000000000000009E-14, 1.0000000000000009E-14,
      1.0000000000000009E-14, -6.0000000000000058E-18, -1.0000000000000011E-15,
      1.0000000000000011E-15, -1.0000000000000011E-15, 1.0000000000000011E-15,
      1.0000000000000011E-19, 1.0000000000000011E-16, 1.0000000000000011E-16,
      -1.0000000000000011E-16, -1.0000000000000011E-16, 6.0000000000000066E-20,
      1.000000000000001E-17, -1.000000000000001E-17, 1.000000000000001E-17,
      -1.000000000000001E-17, -1.0000000000000012E-21, -1.0000000000000012E-18,
      -1.0000000000000012E-18, 1.0000000000000012E-18, 1.0000000000000012E-18,
      -6.0000000000000073E-22, -1.0000000000000012E-19, 1.0000000000000012E-19,
      -1.0000000000000012E-19, 1.0000000000000012E-19, 1.0000000000000013E-23,
      1.0000000000000013E-20, 1.0000000000000013E-20, -1.0000000000000013E-20,
      -1.0000000000000013E-20, 6.0000000000000073E-24, 1.0000000000000012E-21,
      -1.0000000000000012E-21, 1.0000000000000012E-21, -1.0000000000000012E-21,
      -1.0000000000000014E-25, -1.0000000000000013E-22, -1.0000000000000013E-22,
      1.0000000000000013E-22, 1.0000000000000013E-22, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
    };

    static const double dv6[496]{ -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      -48.780487804878049, -48.780487804878049, -48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, 48.780487804878049,
      48.780487804878049, 48.780487804878049, -1.0, -0.0, -1.0, -0.0, -1.0, -0.0,
      1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0,
      -0.16, -110.0, -90.0, 90.0, 110.0, -0.159, -109.0, -89.0, 89.0, 109.0,
      -0.1584, -108.9, -89.1, 89.1, 108.9, -0.15841, -108.91,
      -89.109999999999985, 89.109999999999985, 108.91, -0.158416,
      -108.91099999999999, -89.109, 89.109, 108.91099999999999, -0.1584159,
      -108.9109, -89.1089, 89.1089, 108.9109, -0.15841584, -108.91089,
      -89.108910000000009, 89.108910000000009, 108.91089, -0.158415841,
      -108.91089099999999, -89.108911, 89.108911, 108.91089099999999,
      -0.1584158416, -108.9108911, -89.1089109, 89.1089109, 108.9108911,
      -0.15841584159, -108.91089109, -89.10891089, 89.10891089, 108.91089109,
      -0.15841584158400002, -108.910891089, -89.108910891000008,
      89.108910891000008, 108.910891089, -0.1584158415841, -108.91089108909999,
      -89.1089108911, 89.1089108911, 108.91089108909999, -0.15841584158416,
      -108.91089108911, -89.108910891089991, 89.108910891089991, 108.91089108911,
      -0.158415841584159, -108.910891089109, -89.108910891089, 89.108910891089,
      108.910891089109, -0.15841584158415839, -108.9108910891089,
      -89.1089108910891, 89.1089108910891, 108.9108910891089,
      -0.15841584158415842, -108.91089108910892, -89.10891089108911,
      89.10891089108911, 108.91089108910892, -0.15841584158415842,
      -108.91089108910892, -89.10891089108911, 89.10891089108911,
      108.91089108910892, -0.15841584158415842, -108.91089108910892,
      -89.10891089108911, 89.10891089108911, 108.91089108910892,
      -0.15841584158415842, -108.91089108910892, -89.10891089108911,
      89.10891089108911, 108.91089108910892, -0.15841584158415842,
      -108.91089108910892, -89.10891089108911, 89.10891089108911,
      108.91089108910892, -0.15841584158415842, -108.91089108910892,
      -89.10891089108911, 89.10891089108911, 108.91089108910892,
      -0.15841584158415842, -108.91089108910892, -89.10891089108911,
      89.10891089108911, 108.91089108910892, -0.15841584158415842,
      -108.91089108910892, -89.10891089108911, 89.10891089108911,
      108.91089108910892, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, 1.2926829268292681,
      -1.2926829268292681, 1.2926829268292681, -1.2926829268292681,
      1.2926829268292681, -1.2926829268292681, -0.0, -1.0, -0.0, -1.0, -0.0,
      -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const double dv[248]{ 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 4.71238898038469, 4.71238898038469,
      4.71238898038469, 4.71238898038469, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.37, 20000.0, 20000.0,
      20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0,
      20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37,
      20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0,
      20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0,
      20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0,
      20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37,
      20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0,
      20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0,
      20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0,
      20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37,
      20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0,
      20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0,
      20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37, 20000.0,
      20000.0, 20000.0, 20000.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0, 0.37,
      20000.0, 20000.0, 20000.0, 20000.0 };

    static const double dv10[49]{ 95411.611741506858, 0.0, 94274.4327822743, 0.0,
      93141.993583438685, 0.0, 0.0, 0.0, 11023.26, 0.0, 10888.01, 0.0, 10753.01,
      0.0, 94274.4327822743, 0.0, 94279.172764935938, 0.0, 93141.993805704275,
      0.0, 0.0, 0.0, 10888.01, 0.0, 10888.26, 0.0, 10753.01, 0.0,
      93141.993583438685, 0.0, 93141.993805704275, 0.0, 93146.7337883668, 0.0,
      0.0, 0.0, 10753.01, 0.0, 10753.01, 0.0, 10753.26, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 100000.0 };

    static double dv9[51584];
    static double dv13[1736];
    double Dv[1456];
    double dv5[1240];
    double Bv[1040];
    double C[910];
    double A[650];
    double dv7[496];
    double Bu[260];
    double Mlim[248];
    double v[208];
    double b_b[182];
    double yopt[182];
    double b_onlinedata_weights_y[175];
    double r[175];
    double c_b[130];
    double uopt[52];
    double b_onlinedata_weights_du[50];
    double uopt_dim[50];
    double utarget0[50];
    double dv11[49];
    double dv2[35];
    double dv3[35];
    double dv1[10];
    double U[9];
    double vk[8];
    double Bv_tmp[7];
    double yoff[7];
    double xp[5];
    double b_U[2];
    double d;
    double d1;
    int b_i;
    int i1;
    int ibtile;
    signed char imd[7];
    boolean_T b_statedata[248];
    for (ibtile = 0; ibtile < 7; ibtile++) {
      imd[ibtile] = static_cast<signed char>(ibtile + 3);
    }

    for (ibtile = 0; ibtile < 26; ibtile++) {
      double D[119];
      double B[85];
      double b[45];
      for (int i{0}; i < 17; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          b_i = i1 + 5 * i;
          B[b_i] = b_B[b_i + 85 * ibtile];
        }

        for (i1 = 0; i1 < 7; i1++) {
          b_i = i1 + 7 * i;
          D[b_i] = b_D[b_i + 119 * ibtile];
        }
      }

      for (int i{0}; i < 9; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          b_i = i1 + 5 * i;
          b[b_i] = onlinedata_model->B[b_i + 45 * ibtile];
        }
      }

      for (int i{0}; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          b_i = (i1 + 5 * i) + 25 * ibtile;
          A[b_i] = onlinedata_model->A[b_i];
        }
      }

      for (int i{0}; i < 2; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          b_i = i1 + 5 * i;
          B[b_i] = b[b_i];
        }
      }

      for (int i{0}; i < 5; i++) {
        for (i1 = 0; i1 < 7; i1++) {
          b_i = (i1 + 7 * i) + 35 * ibtile;
          C[b_i] = onlinedata_model->C[b_i];
        }
      }

      for (int i{0}; i < 7; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          B[i1 + 5 * (imd[i] - 1)] = b[i1 + 5 * (i + 2)];
        }

        for (i1 = 0; i1 < 7; i1++) {
          D[i1 + 7 * (imd[i] - 1)] = onlinedata_model->D[(i1 + 7 * (i + 2)) + 63
            * ibtile];
        }
      }

      for (int i{0}; i < 2; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          b_i = i1 + 5 * i;
          Bu[b_i + 10 * ibtile] = B[b_i];
        }
      }

      for (int i{0}; i < 8; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          Bv[(i1 + 5 * i) + 40 * ibtile] = B[i1 + 5 * (i + 2)];
        }

        for (i1 = 0; i1 < 7; i1++) {
          Dv[(i1 + 7 * i) + 56 * ibtile] = D[i1 + 7 * (i + 2)];
        }
      }
    }

    std::memset(&utarget0[0], 0, 50U * sizeof(double));
    std::copy(&dv[0], &dv[248], &Mlim[0]);
    std::copy(&onlinedata_model->U[0], &onlinedata_model->U[9], &U[0]);
    for (int i{0}; i < 7; i++) {
      yoff[i] = onlinedata_model->Y[i];
    }

    for (ibtile = 0; ibtile < 118; ibtile++) {
      short i2;
      i2 = iv2[ibtile];
      if (i2 <= 175) {
        Mlim[ibtile] += 0.0 - yoff[(i2 - div_nde_s32_floor(i2 - 1, 7) * 7) - 1];
      } else if (i2 <= 350) {
        Mlim[ibtile] -= 0.0 - yoff[(i2 - div_nde_s32_floor(i2 - 176, 7) * 7) -
          176];
      } else if (i2 <= 400) {
        Mlim[ibtile] += 0.0 - U[(i2 - (((i2 - 351) >> 1) << 1)) - 351];
      } else if (i2 <= 450) {
        Mlim[ibtile] -= 0.0 - U[(i2 - (((i2 - 401) >> 1) << 1)) - 401];
      }
    }

    for (ibtile = 0; ibtile < 2; ibtile++) {
      for (int i{0}; i < 25; i++) {
        b_i = (i << 1) + ibtile;
        utarget0[b_i] -= U[ibtile];
      }
    }

    for (int i{0}; i < 5; i++) {
      Bv[i + 35] = onlinedata_model->DX[i];
    }

    for (int k{0}; k < 25; k++) {
      for (int i{0}; i < 5; i++) {
        xp[i] = onlinedata_model->X[i] - onlinedata_model->X[i + 5 * (k + 1)];
      }

      b_i = 9 * (k + 1);
      b_U[0] = U[0] - onlinedata_model->U[b_i];
      b_U[1] = U[1] - onlinedata_model->U[b_i + 1];
      for (int i{0}; i < 5; i++) {
        d = 0.0;
        for (i1 = 0; i1 < 5; i1++) {
          d += A[(i + 5 * i1) + 25 * (k + 1)] * xp[i1];
        }

        i1 = i + 10 * (k + 1);
        ibtile = i + 5 * (k + 1);
        Bv[(i + 40 * (k + 1)) + 35] = (((onlinedata_model->DX[ibtile] +
          onlinedata_model->X[ibtile]) - onlinedata_model->X[i]) + d) + (Bu[i1] *
          b_U[0] + Bu[i1 + 5] * b_U[1]);
      }

      for (int i{0}; i < 7; i++) {
        Bv_tmp[i] = U[i + 2] - onlinedata_model->U[(i + b_i) + 2];
      }

      for (int i{0}; i < 5; i++) {
        d = 0.0;
        for (i1 = 0; i1 < 7; i1++) {
          d += Bv[(i + 5 * i1) + 40 * (k + 1)] * Bv_tmp[i1];
        }

        ibtile = (i + 40 * (k + 1)) + 35;
        Bv[ibtile] += d;
      }

      b_i = 56 * (k + 1);
      for (int i{0}; i < 7; i++) {
        d = 0.0;
        for (i1 = 0; i1 < 5; i1++) {
          d += C[(i + 7 * i1) + 35 * (k + 1)] * xp[i1];
        }

        ibtile = (i + b_i) + 49;
        Dv[ibtile] = (onlinedata_model->Y[i + 7 * (k + 1)] - yoff[i]) + d;
        d = 0.0;
        for (i1 = 0; i1 < 7; i1++) {
          d += Dv[(i + 7 * i1) + b_i] * Bv_tmp[i1];
        }

        Dv[ibtile] += d;
      }
    }

    std::memset(&r[0], 0, 175U * sizeof(double));
    for (ibtile = 0; ibtile < 7; ibtile++) {
      d = onlinedata_signals_ref[ibtile] - yoff[ibtile];
      Bv_tmp[ibtile] = d;
      r[ibtile] = d;
    }

    for (ibtile = 0; ibtile < 24; ibtile++) {
      for (b_i = 0; b_i < 7; b_i++) {
        r[b_i + 7 * (ibtile + 1)] = Bv_tmp[b_i];
      }
    }

    for (ibtile = 0; ibtile < 208; ibtile++) {
      v[ibtile] = 1.0;
    }

    for (ibtile = 0; ibtile < 26; ibtile++) {
      b_i = ibtile << 3;
      for (int i{0}; i < 7; i++) {
        v[i + b_i] = onlinedata_signals_md[ibtile + 26 * i] - U[i + 2];
      }
    }

    for (int i{0}; i < 5; i++) {
      xp[i] = statedata->Plant[i] - onlinedata_model->X[i];
    }

    for (int i{0}; i < 25; i++) {
      for (i1 = 0; i1 < 7; i1++) {
        b_onlinedata_weights_y[i1 + 7 * i] = onlinedata_weights_y[i + 25 * i1];
      }

      b_i = i << 1;
      uopt_dim[b_i] = onlinedata_weights_u[i];
      b_onlinedata_weights_du[b_i] = onlinedata_weights_du[i];
      uopt_dim[b_i + 1] = onlinedata_weights_u[i + 25];
      b_onlinedata_weights_du[b_i + 1] = onlinedata_weights_du[i + 25];
    }

    b_U[0] = statedata->LastMove[0] - U[0];
    b_U[1] = statedata->LastMove[1] - U[1];
    std::copy(&onlinedata_customconstraints_E[0],
              &onlinedata_customconstraints_E[10], &dv1[0]);
    std::copy(&onlinedata_customconstraints_F[0],
              &onlinedata_customconstraints_F[35], &dv2[0]);
    std::copy(&onlinedata_customconstraints_S[0],
              &onlinedata_customconstraints_S[35], &dv3[0]);
    std::copy(&dv4[0], &dv4[1240], &dv5[0]);
    std::copy(&dv6[0], &dv6[496], &dv7[0]);
    std::copy(&dv8[0], &dv8[51584], &dv9[0]);
    std::copy(&dv10[0], &dv10[49], &dv11[0]);
    std::copy(&dv12[0], &dv12[1736], &dv13[0]);
    std::copy(&statedata->iA[0], &statedata->iA[248], &b_statedata[0]);
    mpcblock_optimizer(r, v, xp, b_U, b_statedata, Mlim, dv5, dv7, dv9, utarget0,
                       *(double (*)[2])&U[0], *(double (*)[7])&U[2], yoff, dv11,
                       dv13, b_onlinedata_weights_y, uopt_dim,
                       b_onlinedata_weights_du, A, Bu, Bv, C, Dv, dv1, dv2, dv3,
                       onlinedata_customconstraints_G, u, Info_Cost, uopt,
                       Info_Iterations, statedata->iA, Info_Slack);
    for (int i{0}; i < 26; i++) {
      Info_Topt[i] = 0.1 * static_cast<double>(i);
    }

    d = U[0];
    d1 = U[1];
    for (b_i = 0; b_i < 25; b_i++) {
      ibtile = b_i << 1;
      utarget0[ibtile] = d;
      utarget0[ibtile + 1] = d1;
    }

    for (int i{0}; i < 2; i++) {
      for (i1 = 0; i1 < 25; i1++) {
        uopt_dim[i1 + 25 * i] = uopt[i1 + 26 * i] - utarget0[i + (i1 << 1)];
      }
    }

    for (int k{0}; k < 26; k++) {
      for (int i{0}; i < 5; i++) {
        Info_Xopt[k + 26 * i] = xp[i];
      }

      std::copy(&v[k * 8], &v[static_cast<int>(k * 8 + 8U)], &vk[0]);
      for (int i{0}; i < 7; i++) {
        d = 0.0;
        for (i1 = 0; i1 < 5; i1++) {
          d += C[(i + 7 * i1) + 35 * k] * xp[i1];
        }

        d1 = 0.0;
        for (i1 = 0; i1 < 8; i1++) {
          d1 += Dv[(i + 7 * i1) + 56 * k] * vk[i1];
        }

        yopt[k + 26 * i] = d + d1;
      }

      if (k < 25) {
        double b_Bu[5];
        double b_onlinedata_model[5];
        for (int i{0}; i < 5; i++) {
          d = 0.0;
          for (i1 = 0; i1 < 5; i1++) {
            d += A[(i + 5 * i1) + 25 * k] * xp[i1];
          }

          b_onlinedata_model[i] = d;
          i1 = i + 10 * k;
          b_Bu[i] = Bu[i1] * uopt_dim[k] + Bu[i1 + 5] * uopt_dim[k + 25];
        }

        for (int i{0}; i < 5; i++) {
          d = 0.0;
          for (i1 = 0; i1 < 8; i1++) {
            d += Bv[(i + 5 * i1) + 40 * k] * vk[i1];
          }

          xp[i] = (b_onlinedata_model[i] + b_Bu[i]) + d;
        }
      }

      ibtile = k * 7;
      for (b_i = 0; b_i < 7; b_i++) {
        b_b[ibtile + b_i] = yoff[b_i];
      }
    }

    for (int i{0}; i < 7; i++) {
      for (i1 = 0; i1 < 26; i1++) {
        b_i = i1 + 26 * i;
        yopt[b_i] += b_b[i + 7 * i1];
      }
    }

    for (b_i = 0; b_i < 26; b_i++) {
      ibtile = b_i * 5;
      for (int k{0}; k < 5; k++) {
        c_b[ibtile + k] = onlinedata_model->X[k];
      }
    }

    for (int i{0}; i < 5; i++) {
      for (i1 = 0; i1 < 26; i1++) {
        b_i = i1 + 26 * i;
        Info_Xopt[b_i] += c_b[i + 5 * i1];
      }
    }

    for (int i{0}; i < 7; i++) {
      std::copy(&yopt[i * 26], &yopt[static_cast<int>(i * 26 + 26U)],
                &Info_Yopt[i * 26]);
    }

    for (ibtile = 0; ibtile < 2; ibtile++) {
      std::copy(&uopt[ibtile * 26], &uopt[static_cast<int>(ibtile * 26 + 26U)],
                &Info_Uopt[ibtile * 26]);
      statedata->LastMove[ibtile] = u[ibtile];
    }
  }

  static void mpower(const double a[25], double b, double c[25])
  {
    double aBuffer[25];
    double b_a[25];
    double cBuffer[25];
    double e;
    e = std::abs(b);
    if (e <= 2.147483647E+9) {
      int b_n;
      int n;
      int nb;
      int nbitson;
      std::copy(&a[0], &a[25], &b_a[0]);
      n = static_cast<int>(e);
      b_n = static_cast<int>(e);
      nbitson = 0;
      nb = -2;
      while (b_n > 0) {
        nb++;
        if ((b_n & 1) != 0) {
          nbitson++;
        }

        b_n >>= 1;
      }

      if (static_cast<int>(e) <= 2) {
        if (b == 2.0) {
          for (b_n = 0; b_n < 5; b_n++) {
            for (nbitson = 0; nbitson < 5; nbitson++) {
              double d;
              d = 0.0;
              for (int i{0}; i < 5; i++) {
                d += a[b_n + 5 * i] * a[i + 5 * nbitson];
              }

              c[b_n + 5 * nbitson] = d;
            }
          }
        } else {
          boolean_T firstmult;
          firstmult = false;
          for (int k{0}; k < 25; k++) {
            if (firstmult || std::isnan(a[k])) {
              firstmult = true;
            }
          }

          if (firstmult) {
            for (b_n = 0; b_n < 25; b_n++) {
              c[b_n] = rtNaN;
            }
          } else {
            std::memset(&c[0], 0, 25U * sizeof(double));
            for (b_n = 0; b_n < 5; b_n++) {
              c[b_n + 5 * b_n] = 1.0;
            }
          }
        }
      } else {
        double d;
        boolean_T aBufferInUse;
        boolean_T cBufferInUse;
        boolean_T firstmult;
        firstmult = true;
        aBufferInUse = false;
        cBufferInUse = ((nbitson & 1) == 0);
        for (int k{0}; k <= nb; k++) {
          if ((n & 1) != 0) {
            if (firstmult) {
              firstmult = false;
              if (cBufferInUse) {
                if (aBufferInUse) {
                  std::copy(&aBuffer[0], &aBuffer[25], &cBuffer[0]);
                } else {
                  std::copy(&b_a[0], &b_a[25], &cBuffer[0]);
                }
              } else if (aBufferInUse) {
                std::copy(&aBuffer[0], &aBuffer[25], &c[0]);
              } else {
                std::copy(&b_a[0], &b_a[25], &c[0]);
              }
            } else {
              if (aBufferInUse) {
                if (cBufferInUse) {
                  for (b_n = 0; b_n < 5; b_n++) {
                    for (nbitson = 0; nbitson < 5; nbitson++) {
                      d = 0.0;
                      for (int i{0}; i < 5; i++) {
                        d += cBuffer[b_n + 5 * i] * aBuffer[i + 5 * nbitson];
                      }

                      c[b_n + 5 * nbitson] = d;
                    }
                  }
                } else {
                  for (b_n = 0; b_n < 5; b_n++) {
                    for (nbitson = 0; nbitson < 5; nbitson++) {
                      d = 0.0;
                      for (int i{0}; i < 5; i++) {
                        d += c[b_n + 5 * i] * aBuffer[i + 5 * nbitson];
                      }

                      cBuffer[b_n + 5 * nbitson] = d;
                    }
                  }
                }
              } else if (cBufferInUse) {
                for (b_n = 0; b_n < 5; b_n++) {
                  for (nbitson = 0; nbitson < 5; nbitson++) {
                    d = 0.0;
                    for (int i{0}; i < 5; i++) {
                      d += cBuffer[b_n + 5 * i] * b_a[i + 5 * nbitson];
                    }

                    c[b_n + 5 * nbitson] = d;
                  }
                }
              } else {
                for (b_n = 0; b_n < 5; b_n++) {
                  for (nbitson = 0; nbitson < 5; nbitson++) {
                    d = 0.0;
                    for (int i{0}; i < 5; i++) {
                      d += c[b_n + 5 * i] * b_a[i + 5 * nbitson];
                    }

                    cBuffer[b_n + 5 * nbitson] = d;
                  }
                }
              }

              cBufferInUse = !cBufferInUse;
            }
          }

          n >>= 1;
          if (aBufferInUse) {
            for (b_n = 0; b_n < 5; b_n++) {
              for (nbitson = 0; nbitson < 5; nbitson++) {
                d = 0.0;
                for (int i{0}; i < 5; i++) {
                  d += aBuffer[b_n + 5 * i] * aBuffer[i + 5 * nbitson];
                }

                b_a[b_n + 5 * nbitson] = d;
              }
            }
          } else {
            for (b_n = 0; b_n < 5; b_n++) {
              for (nbitson = 0; nbitson < 5; nbitson++) {
                d = 0.0;
                for (int i{0}; i < 5; i++) {
                  d += b_a[b_n + 5 * i] * b_a[i + 5 * nbitson];
                }

                aBuffer[b_n + 5 * nbitson] = d;
              }
            }
          }

          aBufferInUse = !aBufferInUse;
        }

        if (firstmult) {
          if (aBufferInUse) {
            std::copy(&aBuffer[0], &aBuffer[25], &c[0]);
          } else {
            std::copy(&b_a[0], &b_a[25], &c[0]);
          }
        } else if (aBufferInUse) {
          for (b_n = 0; b_n < 5; b_n++) {
            for (nbitson = 0; nbitson < 5; nbitson++) {
              d = 0.0;
              for (int i{0}; i < 5; i++) {
                d += cBuffer[b_n + 5 * i] * aBuffer[i + 5 * nbitson];
              }

              c[b_n + 5 * nbitson] = d;
            }
          }
        } else {
          for (b_n = 0; b_n < 5; b_n++) {
            for (nbitson = 0; nbitson < 5; nbitson++) {
              d = 0.0;
              for (int i{0}; i < 5; i++) {
                d += cBuffer[b_n + 5 * i] * b_a[i + 5 * nbitson];
              }

              c[b_n + 5 * nbitson] = d;
            }
          }
        }
      }
    } else {
      std::copy(&a[0], &a[25], &b_a[0]);
      if ((!std::isinf(b)) && (!std::isnan(b))) {
        boolean_T firstmult;
        firstmult = true;
        double ed2;
        int exitg1;
        do {
          double d;
          exitg1 = 0;
          ed2 = std::floor(e / 2.0);
          if (2.0 * ed2 != e) {
            if (firstmult) {
              std::copy(&b_a[0], &b_a[25], &c[0]);
              firstmult = false;
            } else {
              for (int b_n{0}; b_n < 5; b_n++) {
                for (int nbitson{0}; nbitson < 5; nbitson++) {
                  d = 0.0;
                  for (int i{0}; i < 5; i++) {
                    d += c[b_n + 5 * i] * b_a[i + 5 * nbitson];
                  }

                  cBuffer[b_n + 5 * nbitson] = d;
                }
              }

              std::copy(&cBuffer[0], &cBuffer[25], &c[0]);
            }
          }

          if (ed2 == 0.0) {
            exitg1 = 1;
          } else {
            e = ed2;
            for (int b_n{0}; b_n < 5; b_n++) {
              for (int nbitson{0}; nbitson < 5; nbitson++) {
                d = 0.0;
                for (int i{0}; i < 5; i++) {
                  d += b_a[b_n + 5 * i] * b_a[i + 5 * nbitson];
                }

                cBuffer[b_n + 5 * nbitson] = d;
              }
            }

            std::copy(&cBuffer[0], &cBuffer[25], &b_a[0]);
          }
        } while (exitg1 == 0);
      } else {
        for (int b_n{0}; b_n < 25; b_n++) {
          c[b_n] = rtNaN;
        }
      }
    }
  }

  static void padeApproximation(const double A[25], const double A2[25], const
    double A4[25], const double A6[25], int m, double F[25])
  {
    double V[25];
    double d;
    int i;
    int i1;
    int jA;
    int jBcol;
    int jp1j;
    int temp_tmp;
    signed char ipiv[5];
    if (m == 3) {
      double b_A6[25];
      std::copy(&A2[0], &A2[25], &F[0]);
      for (int k{0}; k < 5; k++) {
        jp1j = k + 5 * k;
        F[jp1j] += 60.0;
      }

      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A[i + 5 * jA] * F[jA + 5 * i1];
          }

          b_A6[i + 5 * i1] = d;
        }
      }

      for (i = 0; i < 25; i++) {
        F[i] = b_A6[i];
        V[i] = 12.0 * A2[i];
      }

      d = 120.0;
    } else if (m == 5) {
      double b_A6[25];
      for (i = 0; i < 25; i++) {
        F[i] = A4[i] + 420.0 * A2[i];
      }

      for (int k{0}; k < 5; k++) {
        jp1j = k + 5 * k;
        F[jp1j] += 15120.0;
      }

      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A[i + 5 * jA] * F[jA + 5 * i1];
          }

          b_A6[i + 5 * i1] = d;
        }
      }

      for (i = 0; i < 25; i++) {
        F[i] = b_A6[i];
        V[i] = 30.0 * A4[i] + 3360.0 * A2[i];
      }

      d = 30240.0;
    } else if (m == 7) {
      double b_A6[25];
      for (i = 0; i < 25; i++) {
        F[i] = (A6[i] + 1512.0 * A4[i]) + 277200.0 * A2[i];
      }

      for (int k{0}; k < 5; k++) {
        jp1j = k + 5 * k;
        F[jp1j] += 8.64864E+6;
      }

      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A[i + 5 * jA] * F[jA + 5 * i1];
          }

          b_A6[i + 5 * i1] = d;
        }
      }

      for (i = 0; i < 25; i++) {
        F[i] = b_A6[i];
        V[i] = (56.0 * A6[i] + 25200.0 * A4[i]) + 1.99584E+6 * A2[i];
      }

      d = 1.729728E+7;
    } else if (m == 9) {
      double b_A6[25];
      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A6[i + 5 * jA] * A2[jA + 5 * i1];
          }

          V[i + 5 * i1] = d;
        }
      }

      for (i = 0; i < 25; i++) {
        F[i] = ((V[i] + 3960.0 * A6[i]) + 2.16216E+6 * A4[i]) + 3.027024E+8 *
          A2[i];
      }

      for (int k{0}; k < 5; k++) {
        jp1j = k + 5 * k;
        F[jp1j] += 8.8216128E+9;
      }

      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A[i + 5 * jA] * F[jA + 5 * i1];
          }

          b_A6[i + 5 * i1] = d;
        }
      }

      for (i = 0; i < 25; i++) {
        F[i] = b_A6[i];
        V[i] = ((90.0 * V[i] + 110880.0 * A6[i]) + 3.027024E+7 * A4[i]) +
          2.0756736E+9 * A2[i];
      }

      d = 1.76432256E+10;
    } else {
      double b_A6[25];
      for (i = 0; i < 25; i++) {
        F[i] = (3.352212864E+10 * A6[i] + 1.05594705216E+13 * A4[i]) +
          1.1873537964288E+15 * A2[i];
      }

      for (int k{0}; k < 5; k++) {
        jp1j = k + 5 * k;
        F[jp1j] += 3.238237626624E+16;
      }

      for (i = 0; i < 25; i++) {
        b_A6[i] = (A6[i] + 16380.0 * A4[i]) + 4.08408E+7 * A2[i];
      }

      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A6[i + 5 * jA] * b_A6[jA + 5 * i1];
          }

          jBcol = i + 5 * i1;
          V[jBcol] = d + F[jBcol];
        }
      }

      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A[i + 5 * jA] * V[jA + 5 * i1];
          }

          F[i + 5 * i1] = d;
        }
      }

      for (i = 0; i < 25; i++) {
        b_A6[i] = (182.0 * A6[i] + 960960.0 * A4[i]) + 1.32324192E+9 * A2[i];
      }

      for (i = 0; i < 5; i++) {
        for (i1 = 0; i1 < 5; i1++) {
          d = 0.0;
          for (jA = 0; jA < 5; jA++) {
            d += A6[i + 5 * jA] * b_A6[jA + 5 * i1];
          }

          jBcol = i + 5 * i1;
          V[jBcol] = ((d + 6.704425728E+11 * A6[jBcol]) + 1.29060195264E+14 *
                      A4[jBcol]) + 7.7717703038976E+15 * A2[jBcol];
        }
      }

      d = 6.476475253248E+16;
    }

    for (int k{0}; k < 5; k++) {
      jBcol = k + 5 * k;
      V[jBcol] += d;
    }

    for (int k{0}; k < 25; k++) {
      d = F[k];
      V[k] -= d;
      d *= 2.0;
      F[k] = d;
    }

    for (i = 0; i < 5; i++) {
      ipiv[i] = static_cast<signed char>(i + 1);
    }

    for (int j{0}; j < 4; j++) {
      int b_tmp;
      int mmj_tmp;
      signed char i2;
      mmj_tmp = 3 - j;
      b_tmp = j * 6;
      jp1j = b_tmp + 2;
      jA = 5 - j;
      jBcol = 0;
      d = std::abs(V[b_tmp]);
      for (int k{2}; k <= jA; k++) {
        double s;
        s = std::abs(V[(b_tmp + k) - 1]);
        if (s > d) {
          jBcol = k - 1;
          d = s;
        }
      }

      if (V[b_tmp + jBcol] != 0.0) {
        if (jBcol != 0) {
          jA = j + jBcol;
          ipiv[j] = static_cast<signed char>(jA + 1);
          for (int k{0}; k < 5; k++) {
            temp_tmp = j + k * 5;
            d = V[temp_tmp];
            jBcol = jA + k * 5;
            V[temp_tmp] = V[jBcol];
            V[jBcol] = d;
          }
        }

        i = (b_tmp - j) + 5;
        for (temp_tmp = jp1j; temp_tmp <= i; temp_tmp++) {
          V[temp_tmp - 1] /= V[b_tmp];
        }
      }

      jA = b_tmp;
      for (int k{0}; k <= mmj_tmp; k++) {
        d = V[(b_tmp + k * 5) + 5];
        if (d != 0.0) {
          i = jA + 7;
          i1 = (jA - j) + 10;
          for (jBcol = i; jBcol <= i1; jBcol++) {
            V[jBcol - 1] += V[((b_tmp + jBcol) - jA) - 6] * -d;
          }
        }

        jA += 5;
      }

      i2 = ipiv[j];
      if (i2 != j + 1) {
        for (int k{0}; k < 5; k++) {
          temp_tmp = j + 5 * k;
          d = F[temp_tmp];
          jp1j = (i2 + 5 * k) - 1;
          F[temp_tmp] = F[jp1j];
          F[jp1j] = d;
        }
      }
    }

    for (int j{0}; j < 5; j++) {
      jBcol = 5 * j;
      for (int k{0}; k < 5; k++) {
        jA = 5 * k;
        i = k + jBcol;
        if (F[i] != 0.0) {
          i1 = k + 2;
          for (temp_tmp = i1; temp_tmp < 6; temp_tmp++) {
            jp1j = (temp_tmp + jBcol) - 1;
            F[jp1j] -= F[i] * V[(temp_tmp + jA) - 1];
          }
        }
      }
    }

    for (int j{0}; j < 5; j++) {
      jBcol = 5 * j;
      for (int k{4}; k >= 0; k--) {
        jA = 5 * k;
        i = k + jBcol;
        d = F[i];
        if (d != 0.0) {
          F[i] = d / V[k + jA];
          for (temp_tmp = 0; temp_tmp < k; temp_tmp++) {
            jp1j = temp_tmp + jBcol;
            F[jp1j] -= F[i] * V[temp_tmp + jA];
          }
        }
      }
    }

    for (int k{0}; k < 5; k++) {
      jp1j = k + 5 * k;
      F[jp1j]++;
    }
  }

  static void qpkwik(const double Linv[49], const double Hinv[49], const double
                     f[7], const double Ac[1736], const double b[248], boolean_T
                     iA[248], double x[7], double lambda[248], int *status)
  {
    double cTol[248];
    double D[49];
    double H[49];
    double RLinv[49];
    double U[49];
    double Opt[14];
    double Rhs[14];
    double r[7];
    double z[7];
    double cMin;
    double cVal;
    double rMin;
    int iC[248];
    int b_exponent;
    int exponent;
    int i;
    int iSave;
    int j;
    int kDrop;
    int nA;
    int tmp;
    boolean_T ColdReset;
    boolean_T DualFeasible;
    boolean_T cTolComputed;
    boolean_T guard1{ false };

    for (i = 0; i < 7; i++) {
      x[i] = 0.0;
    }

    std::memset(&lambda[0], 0, 248U * sizeof(double));
    *status = 1;
    for (i = 0; i < 7; i++) {
      r[i] = 0.0;
    }

    rMin = 0.0;
    cTolComputed = false;
    for (i = 0; i < 248; i++) {
      cTol[i] = 1.0;
      iC[i] = 0;
    }

    nA = -1;
    for (i = 0; i < 248; i++) {
      if (iA[i]) {
        nA++;
        iC[nA] = i + 1;
      }
    }

    guard1 = false;
    if (nA + 1 > 0) {
      int exitg3;
      std::memset(&Opt[0], 0, 14U * sizeof(double));
      for (i = 0; i < 7; i++) {
        Rhs[i] = f[i];
        Rhs[i + 7] = 0.0;
      }

      DualFeasible = false;
      tmp = static_cast<int>(std::round(0.3 * static_cast<double>(nA + 1)));
      ColdReset = false;
      do {
        exitg3 = 0;
        if ((!DualFeasible) && (nA + 1 > 0) && (*status <= 1020)) {
          cVal = KWIKfactor(Ac, iC, nA + 1, Linv, RLinv, D, H);
          if (cVal < 0.0) {
            if (ColdReset) {
              *status = -2;
              exitg3 = 2;
            } else {
              nA = -1;
              std::memset(&iA[0], 0, 248U * sizeof(boolean_T));
              std::memset(&iC[0], 0, 248U * sizeof(int));
              ColdReset = true;
            }
          } else {
            for (j = 0; j <= nA; j++) {
              Rhs[j + 7] = b[iC[j] - 1];
              for (i = j + 1; i <= nA + 1; i++) {
                iSave = (i + 7 * j) - 1;
                U[iSave] = 0.0;
                for (int k{0}; k <= nA; k++) {
                  U[iSave] += RLinv[(i + 7 * k) - 1] * RLinv[j + 7 * k];
                }

                U[j + 7 * (i - 1)] = U[iSave];
              }
            }

            for (i = 0; i < 7; i++) {
              cVal = 0.0;
              for (j = 0; j < 7; j++) {
                cVal += H[i + 7 * j] * Rhs[j];
              }

              Opt[i] = cVal;
              for (int k{0}; k <= nA; k++) {
                Opt[i] += D[i + 7 * k] * Rhs[k + 7];
              }
            }

            for (i = 0; i <= nA; i++) {
              cVal = 0.0;
              for (j = 0; j < 7; j++) {
                cVal += D[j + 7 * i] * Rhs[j];
              }

              Opt[i + 7] = cVal;
              for (int k{0}; k <= nA; k++) {
                Opt[i + 7] += U[i + 7 * k] * Rhs[k + 7];
              }
            }

            cVal = -1.0E-12;
            kDrop = 0;
            for (i = 0; i <= nA; i++) {
              cMin = Opt[i + 7];
              lambda[iC[i] - 1] = cMin;
              if ((cMin < cVal) && (i + 1 <= nA + 1)) {
                kDrop = i + 1;
                cVal = cMin;
              }
            }

            if (kDrop <= 0) {
              DualFeasible = true;
              for (i = 0; i < 7; i++) {
                x[i] = Opt[i];
              }
            } else {
              (*status)++;
              if (tmp <= 5) {
                i = 5;
              } else {
                i = tmp;
              }

              if (*status > i) {
                nA = -1;
                std::memset(&iA[0], 0, 248U * sizeof(boolean_T));
                std::memset(&iC[0], 0, 248U * sizeof(int));
                ColdReset = true;
              } else {
                iSave = iC[kDrop - 1] - 1;
                lambda[iSave] = 0.0;
                iA[iSave] = false;
                if (kDrop < nA + 1) {
                  for (i = kDrop; i <= nA; i++) {
                    iC[i - 1] = iC[i];
                  }
                }

                iC[nA] = 0;
                nA--;
              }
            }
          }
        } else {
          if (nA + 1 <= 0) {
            std::memset(&lambda[0], 0, 248U * sizeof(double));
            for (i = 0; i < 7; i++) {
              cVal = 0.0;
              for (j = 0; j < 7; j++) {
                cVal += -Hinv[i + 7 * j] * f[j];
              }

              x[i] = cVal;
            }
          }

          exitg3 = 1;
        }
      } while (exitg3 == 0);

      if (exitg3 == 1) {
        guard1 = true;
      }
    } else {
      for (i = 0; i < 7; i++) {
        cVal = 0.0;
        for (j = 0; j < 7; j++) {
          cVal += -Hinv[i + 7 * j] * f[j];
        }

        x[i] = cVal;
      }

      guard1 = true;
    }

    if (guard1) {
      double Xnorm0;
      boolean_T exitg2;
      Xnorm0 = c_norm(x);
      exitg2 = false;
      while ((!exitg2) && (*status <= 1020)) {
        double b_Ac;
        cMin = -1.0E-6;
        tmp = -1;
        for (i = 0; i < 248; i++) {
          if (!cTolComputed) {
            for (int k{0}; k < 7; k++) {
              z[k] = std::abs(Ac[i + 248 * k] * x[k]);
            }

            cTol[i] = std::fmax(cTol[i], internal::maximum(z));
          }

          if (!iA[i]) {
            b_Ac = 0.0;
            for (j = 0; j < 7; j++) {
              b_Ac += Ac[i + 248 * j] * x[j];
            }

            cVal = (b_Ac - b[i]) / cTol[i];
            if (cVal < cMin) {
              cMin = cVal;
              tmp = i;
            }
          }
        }

        cTolComputed = true;
        if (tmp + 1 <= 0) {
          exitg2 = true;
        } else if (*status == 1020) {
          *status = 0;
          exitg2 = true;
        } else {
          int exitg1;
          do {
            exitg1 = 0;
            if ((tmp + 1 > 0) && (*status <= 1020)) {
              boolean_T guard2{ false };

              guard2 = false;
              if (nA + 1 == 0) {
                for (j = 0; j < 7; j++) {
                  cMin = 0.0;
                  for (iSave = 0; iSave < 7; iSave++) {
                    cMin += Hinv[j + 7 * iSave] * Ac[tmp + 248 * iSave];
                  }

                  z[j] = cMin;
                }

                guard2 = true;
              } else {
                cVal = KWIKfactor(Ac, iC, nA + 1, Linv, RLinv, D, H);
                if (cVal <= 0.0) {
                  *status = -2;
                  exitg1 = 1;
                } else {
                  for (j = 0; j < 49; j++) {
                    U[j] = -H[j];
                  }

                  for (j = 0; j < 7; j++) {
                    cMin = 0.0;
                    for (iSave = 0; iSave < 7; iSave++) {
                      cMin += U[j + 7 * iSave] * Ac[tmp + 248 * iSave];
                    }

                    z[j] = cMin;
                  }

                  for (i = 0; i <= nA; i++) {
                    b_Ac = 0.0;
                    for (j = 0; j < 7; j++) {
                      b_Ac += Ac[tmp + 248 * j] * D[j + 7 * i];
                    }

                    r[i] = b_Ac;
                  }

                  guard2 = true;
                }
              }

              if (guard2) {
                double t1;
                boolean_T exitg4;
                kDrop = 0;
                t1 = 0.0;
                ColdReset = true;
                DualFeasible = true;
                if (nA + 1 > 0) {
                  iSave = 0;
                  exitg4 = false;
                  while ((!exitg4) && (iSave <= nA)) {
                    if (r[iSave] >= 1.0E-12) {
                      DualFeasible = false;
                      exitg4 = true;
                    } else {
                      iSave++;
                    }
                  }
                }

                if ((nA + 1 != 0) && (!DualFeasible)) {
                  for (i = 0; i <= nA; i++) {
                    cMin = r[i];
                    if (cMin > 1.0E-12) {
                      cMin = lambda[iC[i] - 1] / cMin;
                      if ((kDrop == 0) || (cMin < rMin)) {
                        rMin = cMin;
                        kDrop = i + 1;
                      }
                    }
                  }

                  if (kDrop > 0) {
                    t1 = rMin;
                    ColdReset = false;
                  }
                }

                cVal = 0.0;
                for (int k{0}; k < 7; k++) {
                  cVal += z[k] * Ac[tmp + 248 * k];
                }

                if (cVal <= 0.0) {
                  cVal = 0.0;
                  DualFeasible = true;
                } else {
                  b_Ac = 0.0;
                  for (j = 0; j < 7; j++) {
                    b_Ac += Ac[tmp + 248 * j] * x[j];
                  }

                  cVal = (b[tmp] - b_Ac) / cVal;
                  DualFeasible = false;
                }

                if (ColdReset && DualFeasible) {
                  *status = -1;
                  exitg1 = 1;
                } else {
                  if (DualFeasible) {
                    cMin = t1;
                  } else if (ColdReset) {
                    cMin = cVal;
                  } else if (t1 < cVal) {
                    cMin = t1;
                  } else {
                    cMin = cVal;
                  }

                  for (i = 0; i <= nA; i++) {
                    lambda[iC[i] - 1] -= cMin * r[i];
                    if (lambda[iC[i] - 1] < 0.0) {
                      lambda[iC[i] - 1] = 0.0;
                    }
                  }

                  lambda[tmp] += cMin;
                  frexp(1.0, &exponent);
                  if ((std::abs(cMin - t1) < 2.2204460492503131E-16) && (kDrop >
                       0)) {
                    iA[iC[kDrop - 1] - 1] = false;
                    if (kDrop < nA + 1) {
                      for (i = kDrop; i <= nA; i++) {
                        iC[i - 1] = iC[i];
                      }
                    }

                    iC[nA] = 0;
                    nA--;
                  }

                  if (!DualFeasible) {
                    for (j = 0; j < 7; j++) {
                      x[j] += cMin * z[j];
                    }

                    frexp(1.0, &b_exponent);
                    if (std::abs(cMin - cVal) < 2.2204460492503131E-16) {
                      if (nA + 1 == 7) {
                        *status = -1;
                        exitg1 = 1;
                      } else {
                        nA++;
                        iC[nA] = tmp + 1;
                        i = nA;
                        exitg4 = false;
                        while ((!exitg4) && (i + 1 > 1)) {
                          j = iC[i - 1];
                          if (iC[i] > j) {
                            exitg4 = true;
                          } else {
                            iSave = iC[i];
                            iC[i] = j;
                            iC[i - 1] = iSave;
                            i--;
                          }
                        }

                        iA[tmp] = true;
                        tmp = -1;
                        (*status)++;
                      }
                    } else {
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                }
              }
            } else {
              cVal = c_norm(x);
              if (std::abs(cVal - Xnorm0) > 0.001) {
                Xnorm0 = cVal;
                for (int k{0}; k < 248; k++) {
                  cTol[k] = std::fmax(std::abs(b[k]), 1.0);
                }

                cTolComputed = false;
              }

              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      }
    }
  }

  static void qr(const double A[49], double Q[49], double R[49])
  {
    double b_A[49];
    double tau[7];
    double work[7];
    double c;
    int b_i;
    int exitg1;
    int ii;
    int ix0;
    int k;
    int knt;
    int lastc;
    int lastv;
    boolean_T exitg2;
    std::copy(&A[0], &A[49], &b_A[0]);
    for (int i{0}; i < 7; i++) {
      tau[i] = 0.0;
      work[i] = 0.0;
    }

    for (int i{0}; i < 7; i++) {
      ii = i * 7 + i;
      if (i + 1 < 7) {
        double atmp;
        atmp = b_A[ii];
        ix0 = ii + 2;
        tau[i] = 0.0;
        c = internal::blas::b_xnrm2(6 - i, b_A, ii + 2);
        if (c != 0.0) {
          double beta1;
          double d;
          d = b_A[ii];
          beta1 = rt_hypotd_snf(d, c);
          if (d >= 0.0) {
            beta1 = -beta1;
          }

          if (std::abs(beta1) < 1.0020841800044864E-292) {
            knt = 0;
            b_i = (ii - i) + 7;
            do {
              knt++;
              for (k = ix0; k <= b_i; k++) {
                b_A[k - 1] *= 9.9792015476736E+291;
              }

              beta1 *= 9.9792015476736E+291;
              atmp *= 9.9792015476736E+291;
            } while ((std::abs(beta1) < 1.0020841800044864E-292) && (knt < 20));

            beta1 = rt_hypotd_snf(atmp, internal::blas::b_xnrm2(6 - i, b_A, ii +
              2));
            if (atmp >= 0.0) {
              beta1 = -beta1;
            }

            tau[i] = (beta1 - atmp) / beta1;
            c = 1.0 / (atmp - beta1);
            for (k = ix0; k <= b_i; k++) {
              b_A[k - 1] *= c;
            }

            for (k = 0; k < knt; k++) {
              beta1 *= 1.0020841800044864E-292;
            }

            atmp = beta1;
          } else {
            tau[i] = (beta1 - d) / beta1;
            c = 1.0 / (d - beta1);
            b_i = (ii - i) + 7;
            for (k = ix0; k <= b_i; k++) {
              b_A[k - 1] *= c;
            }

            atmp = beta1;
          }
        }

        b_A[ii] = 1.0;
        if (tau[i] != 0.0) {
          lastv = 7 - i;
          knt = (ii - i) + 6;
          while ((lastv > 0) && (b_A[knt] == 0.0)) {
            lastv--;
            knt--;
          }

          lastc = 6 - i;
          exitg2 = false;
          while ((!exitg2) && (lastc > 0)) {
            knt = (ii + (lastc - 1) * 7) + 7;
            k = knt;
            do {
              exitg1 = 0;
              if (k + 1 <= knt + lastv) {
                if (b_A[k] != 0.0) {
                  exitg1 = 1;
                } else {
                  k++;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = 0;
          lastc = 0;
        }

        if (lastv > 0) {
          ix0 = ii + 8;
          if (lastc != 0) {
            std::memset(&work[0], 0, lastc * sizeof(double));
            b_i = (ii + 7 * (lastc - 1)) + 8;
            for (int iac{ix0}; iac <= b_i; iac += 7) {
              c = 0.0;
              knt = (iac + lastv) - 1;
              for (k = iac; k <= knt; k++) {
                c += b_A[k - 1] * b_A[(ii + k) - iac];
              }

              knt = div_nde_s32_floor((iac - ii) - 8, 7);
              work[knt] += c;
            }
          }

          internal::blas::xgerc(lastv, lastc, -tau[i], ii + 1, work, b_A, ii + 8);
        }

        b_A[ii] = atmp;
      } else {
        tau[6] = 0.0;
      }
    }

    for (ix0 = 0; ix0 < 7; ix0++) {
      for (int i{0}; i <= ix0; i++) {
        knt = i + 7 * ix0;
        R[knt] = b_A[knt];
      }

      b_i = ix0 + 2;
      if (b_i <= 7) {
        std::memset(&R[(ix0 * 7 + b_i) + -1], 0, (-b_i + 8) * sizeof(double));
      }

      work[ix0] = 0.0;
    }

    for (int i{6}; i >= 0; i--) {
      ii = (i + i * 7) + 8;
      if (i + 1 < 7) {
        b_A[ii - 8] = 1.0;
        if (tau[i] != 0.0) {
          lastv = 7 - i;
          knt = ii - i;
          while ((lastv > 0) && (b_A[knt - 2] == 0.0)) {
            lastv--;
            knt--;
          }

          lastc = 6 - i;
          exitg2 = false;
          while ((!exitg2) && (lastc > 0)) {
            knt = ii + (lastc - 1) * 7;
            k = knt;
            do {
              exitg1 = 0;
              if (k <= (knt + lastv) - 1) {
                if (b_A[k - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  k++;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = 0;
          lastc = 0;
        }

        if (lastv > 0) {
          if (lastc != 0) {
            std::memset(&work[0], 0, lastc * sizeof(double));
            b_i = ii + 7 * (lastc - 1);
            for (int iac{ii}; iac <= b_i; iac += 7) {
              c = 0.0;
              knt = (iac + lastv) - 1;
              for (k = iac; k <= knt; k++) {
                c += b_A[k - 1] * b_A[((ii + k) - iac) - 8];
              }

              knt = div_nde_s32_floor(iac - ii, 7);
              work[knt] += c;
            }
          }

          internal::blas::xgerc(lastv, lastc, -tau[i], ii - 7, work, b_A, ii);
        }

        ix0 = ii - 6;
        b_i = (ii - i) - 1;
        for (k = ix0; k <= b_i; k++) {
          b_A[k - 1] *= -tau[i];
        }
      }

      b_A[ii - 8] = 1.0 - tau[i];
      for (ix0 = 0; ix0 < i; ix0++) {
        b_A[(ii - ix0) - 9] = 0.0;
      }
    }

    for (ix0 = 0; ix0 < 7; ix0++) {
      for (int i{0}; i < 7; i++) {
        knt = i + 7 * ix0;
        Q[knt] = b_A[knt];
      }
    }
  }

  static void recomputeBlockDiag(const double A[25], double F[25], const int
    blockFormat[4])
  {
    double delta;
    double expa;
    double expa22;
    double sinchdelta;
    if (blockFormat[0] != 0) {
      if (blockFormat[0] == 1) {
        sinchdelta = std::exp(A[0]);
        expa22 = std::exp(A[6]);
        expa = (A[0] + A[6]) / 2.0;
        if (std::fmax(expa, std::abs(A[0] - A[6]) / 2.0) < 709.782712893384) {
          delta = (A[6] - A[0]) / 2.0;
          if (delta == 0.0) {
            delta = 1.0;
          } else {
            delta = std::sinh(delta) / delta;
          }

          delta *= A[5] * std::exp(expa);
        } else {
          delta = A[5] * (expa22 - sinchdelta) / (A[6] - A[0]);
        }

        F[0] = sinchdelta;
        F[5] = delta;
        F[6] = expa22;
      } else {
        delta = std::sqrt(std::abs(A[1] * A[5]));
        expa = std::exp(A[0]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(delta) / delta;
        }

        F[0] = expa * std::cos(delta);
        F[1] = expa * A[1] * sinchdelta;
        F[5] = expa * A[5] * sinchdelta;
        F[6] = F[0];
      }
    }

    if (blockFormat[1] != 0) {
      if (blockFormat[1] == 1) {
        sinchdelta = std::exp(A[6]);
        expa22 = std::exp(A[12]);
        expa = (A[6] + A[12]) / 2.0;
        if (std::fmax(expa, std::abs(A[6] - A[12]) / 2.0) < 709.782712893384) {
          delta = (A[12] - A[6]) / 2.0;
          if (delta == 0.0) {
            delta = 1.0;
          } else {
            delta = std::sinh(delta) / delta;
          }

          delta *= A[11] * std::exp(expa);
        } else {
          delta = A[11] * (expa22 - sinchdelta) / (A[12] - A[6]);
        }

        F[6] = sinchdelta;
        F[11] = delta;
        F[12] = expa22;
      } else {
        delta = std::sqrt(std::abs(A[7] * A[11]));
        expa = std::exp(A[6]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(delta) / delta;
        }

        F[6] = expa * std::cos(delta);
        F[7] = expa * A[7] * sinchdelta;
        F[11] = expa * A[11] * sinchdelta;
        F[12] = F[6];
      }
    }

    if (blockFormat[2] != 0) {
      if (blockFormat[2] == 1) {
        sinchdelta = std::exp(A[12]);
        expa22 = std::exp(A[18]);
        expa = (A[12] + A[18]) / 2.0;
        if (std::fmax(expa, std::abs(A[12] - A[18]) / 2.0) < 709.782712893384) {
          delta = (A[18] - A[12]) / 2.0;
          if (delta == 0.0) {
            delta = 1.0;
          } else {
            delta = std::sinh(delta) / delta;
          }

          delta *= A[17] * std::exp(expa);
        } else {
          delta = A[17] * (expa22 - sinchdelta) / (A[18] - A[12]);
        }

        F[12] = sinchdelta;
        F[17] = delta;
        F[18] = expa22;
      } else {
        delta = std::sqrt(std::abs(A[13] * A[17]));
        expa = std::exp(A[12]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(delta) / delta;
        }

        F[12] = expa * std::cos(delta);
        F[13] = expa * A[13] * sinchdelta;
        F[17] = expa * A[17] * sinchdelta;
        F[18] = F[12];
      }
    }

    if (blockFormat[3] != 0) {
      if (blockFormat[3] == 1) {
        sinchdelta = std::exp(A[18]);
        expa22 = std::exp(A[24]);
        expa = (A[18] + A[24]) / 2.0;
        if (std::fmax(expa, std::abs(A[18] - A[24]) / 2.0) < 709.782712893384) {
          delta = (A[24] - A[18]) / 2.0;
          if (delta == 0.0) {
            delta = 1.0;
          } else {
            delta = std::sinh(delta) / delta;
          }

          delta *= A[23] * std::exp(expa);
        } else {
          delta = A[23] * (expa22 - sinchdelta) / (A[24] - A[18]);
        }

        F[18] = sinchdelta;
        F[23] = delta;
        F[24] = expa22;
      } else {
        delta = std::sqrt(std::abs(A[19] * A[23]));
        expa = std::exp(A[18]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(delta) / delta;
        }

        F[18] = expa * std::cos(delta);
        F[19] = expa * A[19] * sinchdelta;
        F[23] = expa * A[23] * sinchdelta;
        F[24] = F[18];
      }
    }

    if (blockFormat[3] == 0) {
      F[24] = std::exp(A[24]);
    }
  }

  static void schur(const double A[9], double V[9], double T[9])
  {
    double work[3];
    int k;
    boolean_T p;
    p = true;
    for (k = 0; k < 9; k++) {
      if ((!p) || (std::isinf(A[k]) || std::isnan(A[k]))) {
        p = false;
      }
    }

    if (!p) {
      int b_i;
      for (int i{0}; i < 9; i++) {
        V[i] = rtNaN;
      }

      b_i = 2;
      for (k = 0; k < 2; k++) {
        if (b_i <= 3) {
          std::memset(&V[(k * 3 + b_i) + -1], 0, (-b_i + 4) * sizeof(double));
        }

        b_i++;
      }

      for (int i{0}; i < 9; i++) {
        T[i] = rtNaN;
      }
    } else {
      double tau[2];
      double xnorm;
      int b_i;
      int exitg1;
      int i;
      int ia;
      int ix0;
      int knt;
      int lastc;
      int lastv;
      std::copy(&A[0], &A[9], &T[0]);
      work[0] = 0.0;
      work[1] = 0.0;
      work[2] = 0.0;
      for (int c_i{0}; c_i < 2; c_i++) {
        double b_alpha1_tmp;
        int alpha1_tmp;
        int i1;
        int in;
        int iv0_tmp;
        boolean_T exitg2;
        b_i = c_i * 3 + 2;
        in = (c_i + 1) * 3;
        alpha1_tmp = (c_i + 3 * c_i) + 1;
        b_alpha1_tmp = T[alpha1_tmp];
        ix0 = b_i + 1;
        tau[c_i] = 0.0;
        xnorm = 0.0;
        if (1 - c_i >= 1) {
          xnorm = std::abs(T[b_i]);
        }

        if (xnorm != 0.0) {
          double beta1;
          beta1 = rt_hypotd_snf(b_alpha1_tmp, xnorm);
          if (b_alpha1_tmp >= 0.0) {
            beta1 = -beta1;
          }

          if (std::abs(beta1) < 1.0020841800044864E-292) {
            knt = 0;
            i = (b_i - c_i) + 1;
            do {
              knt++;
              for (k = ix0; k <= i; k++) {
                T[k - 1] *= 9.9792015476736E+291;
              }

              beta1 *= 9.9792015476736E+291;
              b_alpha1_tmp *= 9.9792015476736E+291;
            } while ((std::abs(beta1) < 1.0020841800044864E-292) && (knt < 20));

            xnorm = 0.0;
            if (1 - c_i >= 1) {
              xnorm = std::abs(T[b_i]);
            }

            beta1 = rt_hypotd_snf(b_alpha1_tmp, xnorm);
            if (b_alpha1_tmp >= 0.0) {
              beta1 = -beta1;
            }

            tau[c_i] = (beta1 - b_alpha1_tmp) / beta1;
            xnorm = 1.0 / (b_alpha1_tmp - beta1);
            for (k = ix0; k <= i; k++) {
              T[k - 1] *= xnorm;
            }

            for (k = 0; k < knt; k++) {
              beta1 *= 1.0020841800044864E-292;
            }

            b_alpha1_tmp = beta1;
          } else {
            tau[c_i] = (beta1 - b_alpha1_tmp) / beta1;
            xnorm = 1.0 / (b_alpha1_tmp - beta1);
            i = (b_i - c_i) + 1;
            for (k = ix0; k <= i; k++) {
              T[k - 1] *= xnorm;
            }

            b_alpha1_tmp = beta1;
          }
        }

        T[alpha1_tmp] = 1.0;
        iv0_tmp = c_i + b_i;
        ix0 = in + 1;
        if (tau[c_i] != 0.0) {
          lastv = 1 - c_i;
          b_i = iv0_tmp - c_i;
          while ((lastv + 1 > 0) && (T[b_i] == 0.0)) {
            lastv--;
            b_i--;
          }

          lastc = 3;
          exitg2 = false;
          while ((!exitg2) && (lastc > 0)) {
            knt = in + lastc;
            ia = knt;
            do {
              exitg1 = 0;
              if (ia <= knt + lastv * 3) {
                if (T[ia - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  ia += 3;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = -1;
          lastc = 0;
        }

        if (lastv + 1 > 0) {
          if (lastc != 0) {
            std::memset(&work[0], 0, lastc * sizeof(double));
            knt = iv0_tmp - 1;
            i = (in + 3 * lastv) + 1;
            for (b_i = ix0; b_i <= i; b_i += 3) {
              i1 = (b_i + lastc) - 1;
              for (ia = b_i; ia <= i1; ia++) {
                k = ia - b_i;
                work[k] += T[ia - 1] * T[knt];
              }

              knt++;
            }
          }

          if (!(-tau[c_i] == 0.0)) {
            knt = in;
            for (k = 0; k <= lastv; k++) {
              xnorm = T[(iv0_tmp + k) - 1];
              if (xnorm != 0.0) {
                xnorm *= -tau[c_i];
                i = knt + 1;
                i1 = lastc + knt;
                for (b_i = i; b_i <= i1; b_i++) {
                  T[b_i - 1] += work[(b_i - knt) - 1] * xnorm;
                }
              }

              knt += 3;
            }
          }
        }

        ix0 = (c_i + in) + 2;
        if (tau[c_i] != 0.0) {
          lastv = 2 - c_i;
          b_i = iv0_tmp - c_i;
          while ((lastv > 0) && (T[b_i] == 0.0)) {
            lastv--;
            b_i--;
          }

          lastc = 2 - c_i;
          exitg2 = false;
          while ((!exitg2) && (lastc > 0)) {
            knt = ix0 + (lastc - 1) * 3;
            ia = knt;
            do {
              exitg1 = 0;
              if (ia <= (knt + lastv) - 1) {
                if (T[ia - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  ia++;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = 0;
          lastc = 0;
        }

        if (lastv > 0) {
          if (lastc != 0) {
            std::memset(&work[0], 0, lastc * sizeof(double));
            i = ix0 + 3 * (lastc - 1);
            for (b_i = ix0; b_i <= i; b_i += 3) {
              xnorm = 0.0;
              i1 = (b_i + lastv) - 1;
              for (ia = b_i; ia <= i1; ia++) {
                xnorm += T[ia - 1] * T[((iv0_tmp + ia) - b_i) - 1];
              }

              k = div_nde_s32_floor(b_i - ix0, 3);
              work[k] += xnorm;
            }
          }

          internal::blas::b_xgerc(lastv, lastc, -tau[c_i], iv0_tmp, work, T, ix0);
        }

        T[alpha1_tmp] = b_alpha1_tmp;
      }

      std::copy(&T[0], &T[9], &V[0]);
      for (k = 1; k >= 0; k--) {
        ia = (k + 1) * 3;
        for (int c_i{0}; c_i <= k; c_i++) {
          V[ia + c_i] = 0.0;
        }

        i = k + 3;
        for (int c_i{i}; c_i < 4; c_i++) {
          V[ia + 2] = V[ia - 1];
        }
      }

      V[1] = 0.0;
      V[2] = 0.0;
      V[0] = 1.0;
      work[0] = 0.0;
      work[1] = 0.0;
      work[2] = 0.0;
      for (int c_i{1}; c_i >= 0; c_i--) {
        knt = (c_i + c_i * 3) + 8;
        if (c_i + 1 < 2) {
          V[knt - 4] = 1.0;
          if (tau[c_i] != 0.0) {
            lastv = 2;
            b_i = knt;
            while ((lastv > 0) && (V[b_i - 3] == 0.0)) {
              lastv--;
              b_i--;
            }

            lastc = 1;
            ia = knt;
            do {
              exitg1 = 0;
              if (ia <= (knt + lastv) - 1) {
                if (V[ia - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  ia++;
                }
              } else {
                lastc = 0;
                exitg1 = 1;
              }
            } while (exitg1 == 0);
          } else {
            lastv = 0;
            lastc = 0;
          }

          if (lastv > 0) {
            if (lastc != 0) {
              work[0] = 0.0;
              for (b_i = knt; b_i <= knt; b_i += 3) {
                xnorm = 0.0;
                i = (b_i + lastv) - 1;
                for (ia = b_i; ia <= i; ia++) {
                  xnorm += V[ia - 1] * V[((knt + ia) - b_i) - 4];
                }

                k = div_nde_s32_floor(b_i - knt, 3);
                work[k] += xnorm;
              }
            }

            internal::blas::b_xgerc(lastv, lastc, -tau[c_i], knt - 3, work, V,
              knt);
          }

          ix0 = knt - 2;
          for (k = ix0; k <= ix0; k++) {
            V[k - 1] *= -tau[c_i];
          }
        }

        V[knt - 4] = 1.0 - tau[c_i];
        if (c_i - 1 >= 0) {
          V[knt - 5] = 0.0;
        }
      }

      internal::lapack::xhseqr(T, V);
    }
  }

  static void schur(double A[25], double V[25])
  {
    double work[5];
    double xnorm;
    boolean_T p;
    p = true;
    for (int k{0}; k < 25; k++) {
      if (p) {
        xnorm = A[k];
        if (std::isinf(xnorm) || std::isnan(xnorm)) {
          p = false;
        }
      } else {
        p = false;
      }
    }

    if (!p) {
      int knt;
      for (int b_i{0}; b_i < 25; b_i++) {
        V[b_i] = rtNaN;
      }

      knt = 2;
      for (int k{0}; k < 4; k++) {
        if (knt <= 5) {
          std::memset(&V[(k * 5 + knt) + -1], 0, (-knt + 6) * sizeof(double));
        }

        knt++;
      }

      for (int b_i{0}; b_i < 25; b_i++) {
        A[b_i] = rtNaN;
      }
    } else {
      double tau[4];
      int b_i;
      int ia;
      int ix0;
      int knt;
      for (int i{0}; i < 5; i++) {
        work[i] = 0.0;
      }

      for (int i{0}; i < 4; i++) {
        double alpha1;
        int alpha1_tmp;
        int ic0;
        int im1n_tmp;
        int in;
        int iv0;
        int lastc;
        int lastv;
        im1n_tmp = i * 5 + 2;
        in = (i + 1) * 5;
        alpha1_tmp = (i + 5 * i) + 1;
        alpha1 = A[alpha1_tmp];
        if (i + 3 <= 5) {
          knt = i + 1;
        } else {
          knt = 3;
        }

        ix0 = knt + im1n_tmp;
        tau[i] = 0.0;
        xnorm = internal::blas::xnrm2(3 - i, A, ix0);
        if (xnorm != 0.0) {
          double beta1;
          double beta1_tmp;
          beta1_tmp = A[alpha1_tmp];
          beta1 = rt_hypotd_snf(beta1_tmp, xnorm);
          if (beta1_tmp >= 0.0) {
            beta1 = -beta1;
          }

          if (std::abs(beta1) < 1.0020841800044864E-292) {
            knt = 0;
            b_i = (ix0 - i) + 2;
            do {
              knt++;
              for (int k{ix0}; k <= b_i; k++) {
                A[k - 1] *= 9.9792015476736E+291;
              }

              beta1 *= 9.9792015476736E+291;
              alpha1 *= 9.9792015476736E+291;
            } while ((std::abs(beta1) < 1.0020841800044864E-292) && (knt < 20));

            beta1 = rt_hypotd_snf(alpha1, internal::blas::xnrm2(3 - i, A, ix0));
            if (alpha1 >= 0.0) {
              beta1 = -beta1;
            }

            tau[i] = (beta1 - alpha1) / beta1;
            xnorm = 1.0 / (alpha1 - beta1);
            b_i = (ix0 - i) + 2;
            for (int k{ix0}; k <= b_i; k++) {
              A[k - 1] *= xnorm;
            }

            for (int k{0}; k < knt; k++) {
              beta1 *= 1.0020841800044864E-292;
            }

            alpha1 = beta1;
          } else {
            xnorm = A[alpha1_tmp];
            tau[i] = (beta1 - xnorm) / beta1;
            xnorm = 1.0 / (xnorm - beta1);
            b_i = (ix0 - i) + 2;
            for (int k{ix0}; k <= b_i; k++) {
              A[k - 1] *= xnorm;
            }

            alpha1 = beta1;
          }
        }

        A[alpha1_tmp] = 1.0;
        iv0 = (i + im1n_tmp) - 1;
        ic0 = in + 1;
        if (tau[i] != 0.0) {
          boolean_T exitg2;
          lastv = 3 - i;
          knt = (iv0 - i) + 3;
          while ((lastv + 1 > 0) && (A[knt] == 0.0)) {
            lastv--;
            knt--;
          }

          lastc = 5;
          exitg2 = false;
          while ((!exitg2) && (lastc > 0)) {
            int exitg1;
            knt = in + lastc;
            ia = knt;
            do {
              exitg1 = 0;
              if (ia <= knt + lastv * 5) {
                if (A[ia - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  ia += 5;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = -1;
          lastc = 0;
        }

        if (lastv + 1 > 0) {
          int i1;
          if (lastc != 0) {
            std::memset(&work[0], 0, lastc * sizeof(double));
            knt = iv0;
            b_i = (in + 5 * lastv) + 1;
            for (int k{ic0}; k <= b_i; k += 5) {
              i1 = (k + lastc) - 1;
              for (ia = k; ia <= i1; ia++) {
                ix0 = ia - k;
                work[ix0] += A[ia - 1] * A[knt];
              }

              knt++;
            }
          }

          if (!(-tau[i] == 0.0)) {
            knt = in;
            for (int k{0}; k <= lastv; k++) {
              xnorm = A[iv0 + k];
              if (xnorm != 0.0) {
                xnorm *= -tau[i];
                b_i = knt + 1;
                i1 = lastc + knt;
                for (ix0 = b_i; ix0 <= i1; ix0++) {
                  A[ix0 - 1] += work[(ix0 - knt) - 1] * xnorm;
                }
              }

              knt += 5;
            }
          }
        }

        internal::reflapack::xzlarf(4 - i, 4 - i, i + im1n_tmp, tau[i], A, (i +
          in) + 2, work);
        A[alpha1_tmp] = alpha1;
      }

      std::copy(&A[0], &A[25], &V[0]);
      for (int k{3}; k >= 0; k--) {
        ia = (k + 1) * 5;
        for (int i{0}; i <= k; i++) {
          V[ia + i] = 0.0;
        }

        b_i = k + 3;
        for (int i{b_i}; i < 6; i++) {
          knt = ia + i;
          V[knt - 1] = V[knt - 6];
        }
      }

      for (int i{0}; i < 5; i++) {
        V[i] = 0.0;
      }

      V[0] = 1.0;
      for (int i{0}; i < 5; i++) {
        work[i] = 0.0;
      }

      for (int i{3}; i >= 0; i--) {
        knt = (i + i * 5) + 6;
        if (i + 1 < 4) {
          V[knt] = 1.0;
          internal::reflapack::xzlarf(4 - i, 3 - i, knt + 1, tau[i], V, knt + 6,
            work);
          ix0 = knt + 2;
          b_i = (knt - i) + 4;
          for (int k{ix0}; k <= b_i; k++) {
            V[k - 1] *= -tau[i];
          }
        }

        V[knt] = 1.0 - tau[i];
        for (int k{0}; k < i; k++) {
          V[(knt - k) - 1] = 0.0;
        }
      }

      internal::reflapack::eml_dlahqr(A, V);
      knt = 4;
      for (int k{0}; k < 2; k++) {
        if (knt <= 5) {
          std::memset(&A[(k * 5 + knt) + -1], 0, (-knt + 6) * sizeof(double));
        }

        knt++;
      }
    }
  }
}

static int div_nde_s32_floor(int numerator, int denominator)
{
  int b_numerator;
  if (((numerator < 0) != (denominator < 0)) && (numerator % denominator != 0))
  {
    b_numerator = -1;
  } else {
    b_numerator = 0;
  }

  return numerator / denominator + b_numerator;
}

static void predLinObj(double ek[3], const double u[52], const double v[130],
  const struct20_T *param, double A[234], double B[546], double C[234], double
  D[546], double U[182], double Y[78], double X[78], double DX[78], double E[22],
  double F[33], double G[11], double S[55])
{
  static const signed char b_iv[7]{ 0, 1, 0, 0, 0, 0, -1 };

  double Bk0[21];
  double Ai[9];
  double Ak[9];
  double inpk[7];
  double E_tmp;
  double R_d_tmp;
  double b_E_tmp;
  double b_R_d_tmp;
  double b_unnamed_idx_0;
  double b_unnamed_idx_1;
  double c_E_tmp;
  double c_unnamed_idx_0;
  double c_unnamed_idx_1;
  double d_unnamed_idx_1;
  double unnamed_idx_0;
  double unnamed_idx_1;
  int b_i;

  //    Detailed explanation goes here
  //  Initialize output
  for (int i{0}; i < 5; i++) {
    inpk[i + 2] = v[26 * i];
  }

  // PUSHINGCT Function to calculate the pushing error continuous time model
  //    Detailed explanation goes here
  //  Parameters
  //  error variables
  //  input variables
  //  de/dt
  //  Output y
  //  State Matrix
  //  Input Matrix
  //  State Output Matrix
  //  Input Output Matrix
  //  Constraint Matrix
  std::memset(&E[0], 0, 22U * sizeof(double));
  std::memset(&F[0], 0, 33U * sizeof(double));
  for (b_i = 0; b_i < 11; b_i++) {
    G[b_i] = 1000.0;
  }

  std::memset(&S[0], 0, 55U * sizeof(double));
  R_d_tmp = std::sin(inpk[4]);
  b_R_d_tmp = std::cos(inpk[4]);

  //  wheel limit constraints
  E_tmp = 1.0 / param->R;
  E[0] = E_tmp;
  b_E_tmp = param->L / param->R;
  E[11] = b_E_tmp;
  E[1] = E_tmp;
  E_tmp = -param->L / param->R;
  E[12] = E_tmp;
  c_E_tmp = -1.0 / param->R;
  E[2] = c_E_tmp;
  E[13] = E_tmp;
  E[3] = c_E_tmp;
  E[14] = b_E_tmp;
  G[0] = param->W_lim;
  G[1] = param->W_lim;
  G[2] = param->W_lim;
  G[3] = param->W_lim;

  //  curvature constraints
  E[4] = 1.0 / (param->Rlim_m + param->y_or);
  E[15] = -1.0;
  E[5] = -1.0 / (param->Rlim_p + param->y_or);
  E[16] = 1.0;
  G[4] = 0.0;
  G[5] = 0.0;
  if (param->obstacles == 1.0) {
    // obstacle avoidance
    //  Constraint-Output Matrix F
    E_tmp = param->q1[0] - param->x0[0];
    b_E_tmp = param->q1[1] - param->x0[1];
    F[28] = 0.0;
    F[6] = E_tmp * b_R_d_tmp + b_E_tmp * R_d_tmp;
    c_E_tmp = param->q2[0] - param->x0[0];
    F[17] = E_tmp * -R_d_tmp + b_E_tmp * b_R_d_tmp;
    unnamed_idx_1 = param->q2[1] - param->x0[1];
    F[29] = 0.0;
    F[7] = c_E_tmp * b_R_d_tmp + unnamed_idx_1 * R_d_tmp;
    unnamed_idx_0 = param->q3[0] - param->x0[0];
    F[18] = c_E_tmp * -R_d_tmp + unnamed_idx_1 * b_R_d_tmp;
    b_unnamed_idx_1 = param->q3[1] - param->x0[1];
    F[30] = 0.0;
    F[8] = unnamed_idx_0 * b_R_d_tmp + b_unnamed_idx_1 * R_d_tmp;
    b_unnamed_idx_0 = param->q4[0] - param->x0[0];
    F[19] = unnamed_idx_0 * -R_d_tmp + b_unnamed_idx_1 * b_R_d_tmp;
    c_unnamed_idx_1 = param->q4[1] - param->x0[1];
    F[31] = 0.0;
    F[9] = b_unnamed_idx_0 * b_R_d_tmp + c_unnamed_idx_1 * R_d_tmp;
    c_unnamed_idx_0 = param->q5[0] - param->x0[0];
    F[20] = b_unnamed_idx_0 * -R_d_tmp + c_unnamed_idx_1 * b_R_d_tmp;
    d_unnamed_idx_1 = param->q5[1] - param->x0[1];
    F[32] = 0.0;

    //  Constraint constant matrix G
    //  Constraint-disturbance Matrix S
    S[28] = 0.0;
    S[39] = 0.0;
    S[50] = 0.0;
    S[29] = 0.0;
    S[40] = 0.0;
    S[51] = 0.0;
    S[30] = 0.0;
    S[41] = 0.0;
    S[52] = 0.0;
    S[31] = 0.0;
    S[42] = 0.0;
    S[53] = 0.0;
    F[10] = c_unnamed_idx_0 * b_R_d_tmp + d_unnamed_idx_1 * R_d_tmp;
    S[6] = E_tmp;
    S[7] = c_E_tmp;
    S[8] = unnamed_idx_0;
    S[9] = b_unnamed_idx_0;
    S[10] = c_unnamed_idx_0;
    F[21] = c_unnamed_idx_0 * -R_d_tmp + d_unnamed_idx_1 * b_R_d_tmp;
    S[17] = b_E_tmp;
    S[18] = unnamed_idx_1;
    S[19] = b_unnamed_idx_1;
    S[20] = c_unnamed_idx_1;
    S[21] = d_unnamed_idx_1;
    G[6] = E_tmp * param->q1[0] + b_E_tmp * param->q1[1];
    G[7] = c_E_tmp * param->q2[0] + unnamed_idx_1 * param->q2[1];
    G[8] = unnamed_idx_0 * param->q3[0] + b_unnamed_idx_1 * param->q3[1];
    G[9] = b_unnamed_idx_0 * param->q4[0] + c_unnamed_idx_1 * param->q4[1];
    G[10] = c_unnamed_idx_0 * param->q5[0] + d_unnamed_idx_1 * param->q5[1];
    S[32] = 0.0;
    S[43] = 0.0;
    S[54] = 0.0;
  }

  //  Optain time varying linear models via successive linearization
  Ak[0] = 0.0;
  Ak[4] = 0.0;
  Ak[2] = 0.0;
  Ak[5] = 0.0;
  Ak[8] = 0.0;
  for (int ct{0}; ct < 26; ct++) {
    double Bk[24];
    double b_Bk0[24];
    double b_Ak[9];
    double c_Ak[9];
    double DXk_idx_1_tmp;
    double DXk_idx_2_tmp;
    int Coef;
    inpk[0] = u[ct];
    inpk[1] = u[ct + 26];
    for (int i{0}; i < 5; i++) {
      inpk[i + 2] = v[ct + 26 * i];
    }

    // PUSHINGCT Function to calculate the pushing error continuous time model
    //    Detailed explanation goes here
    //  Parameters
    //  error variables
    //  input variables
    //  de/dt
    E_tmp = std::cos(ek[2]);
    b_E_tmp = std::sin(ek[2]);
    R_d_tmp = inpk[1] * param->y_or;
    b_R_d_tmp = param->x_or * inpk[1];
    DXk_idx_1_tmp = param->x_or * inpk[6];
    DXk_idx_2_tmp = inpk[1] - inpk[6];

    //  Output y
    //  State Matrix
    Ak[3] = inpk[6];
    c_E_tmp = inpk[0] * b_E_tmp;
    unnamed_idx_1 = R_d_tmp * b_E_tmp;
    unnamed_idx_0 = b_R_d_tmp * E_tmp;
    Ak[6] = (unnamed_idx_1 - c_E_tmp) - unnamed_idx_0;
    Ak[1] = -inpk[6];
    b_unnamed_idx_1 = inpk[0] * E_tmp;
    b_unnamed_idx_0 = b_R_d_tmp * b_E_tmp;
    c_unnamed_idx_1 = R_d_tmp * E_tmp;
    Ak[7] = (b_unnamed_idx_1 - b_unnamed_idx_0) - c_unnamed_idx_1;

    //  Input Matrix
    std::memset(&Bk0[0], 0, 21U * sizeof(double));
    Bk0[0] = E_tmp + ek[2] * b_E_tmp;
    c_unnamed_idx_0 = ek[2] * param->y_or;
    d_unnamed_idx_1 = param->x_or * ek[2];
    Bk0[3] = ((d_unnamed_idx_1 * E_tmp - param->y_or * E_tmp) - c_unnamed_idx_0 *
              b_E_tmp) - param->x_or * b_E_tmp;
    Bk0[6] = 0.0;
    Bk0[9] = 0.0;
    Bk0[12] = 0.0;
    Bk0[15] = -1.0;
    Bk0[18] = param->y_or;
    Bk0[1] = b_E_tmp - ek[2] * E_tmp;
    Bk0[4] = ((param->x_or * E_tmp - param->y_or * b_E_tmp) + c_unnamed_idx_0 *
              E_tmp) + d_unnamed_idx_1 * b_E_tmp;
    Bk0[7] = 0.0;
    Bk0[10] = 0.0;
    Bk0[13] = 0.0;
    Bk0[16] = 0.0;
    Bk0[19] = -param->x_or;
    for (int i{0}; i < 7; i++) {
      Bk0[3 * i + 2] = b_iv[i];
    }

    //  State Output Matrix
    //  Input Output Matrix
    //  Constraint Matrix
    //  wheel limit constraints
    //  curvature constraints
    //  convert A and B matrices from continuous time to discrete time
    //  Convert A, B to discrete time
    for (int i{0}; i < 9; i++) {
      c_Ak[i] = Ak[i] * 0.1;
    }

    coder::b_expm(c_Ak, b_Ak);

    //  Number of points for Simpson's Rule, an even integer >= 2.
    //  Use Simpson's rule to compute integral(0,Ts){expm(a*s)*ds*b}
    std::memset(&Ai[0], 0, 9U * sizeof(double));
    Ai[0] = 1.0;
    Ai[4] = 1.0;
    Ai[8] = 1.0;
    for (int i{0}; i < 9; i++) {
      Ai[i] += b_Ak[i];
    }

    //  First and last terms;
    Coef = 2;
    for (b_i = 0; b_i < 3; b_i++) {
      double b[9];
      if (Coef == 2) {
        Coef = 4;
      } else {
        Coef = 2;
      }

      for (int i{0}; i < 9; i++) {
        c_Ak[i] = Ak[i] * (static_cast<double>(b_i) + 1.0) * 0.025;
      }

      coder::b_expm(c_Ak, b);
      for (int i{0}; i < 9; i++) {
        Ai[i] += static_cast<double>(Coef) * b[i];
      }

      //  Intermediate terms
    }

    for (int i{0}; i < 7; i++) {
      b_Bk0[3 * i] = Bk0[3 * i];
      b_i = 3 * i + 1;
      b_Bk0[b_i] = Bk0[b_i];
      b_i = 3 * i + 2;
      b_Bk0[b_i] = Bk0[b_i];
    }

    b_Bk0[21] = ((((ek[1] * inpk[6] - inpk[5]) + inpk[6] * param->y_or) +
                  b_unnamed_idx_1) - b_unnamed_idx_0) - c_unnamed_idx_1;
    b_Bk0[22] = (((c_E_tmp - ek[0] * inpk[6]) - DXk_idx_1_tmp) - unnamed_idx_1)
      + unnamed_idx_0;
    b_Bk0[23] = DXk_idx_2_tmp;

    //  obtain matrices
    for (int i{0}; i < 3; i++) {
      E_tmp = Ai[i];
      b_E_tmp = Ai[i + 3];
      c_E_tmp = Ai[i + 6];
      for (b_i = 0; b_i < 8; b_i++) {
        Bk[i + 3 * b_i] = (0.0083333333333333332 * E_tmp * b_Bk0[3 * b_i] +
                           0.0083333333333333332 * b_E_tmp * b_Bk0[3 * b_i + 1])
          + 0.0083333333333333332 * c_E_tmp * b_Bk0[3 * b_i + 2];
      }

      b_i = 3 * i + 9 * ct;
      A[b_i] = b_Ak[3 * i];
      A[b_i + 1] = b_Ak[3 * i + 1];
      A[b_i + 2] = b_Ak[3 * i + 2];
    }

    for (int i{0}; i < 7; i++) {
      b_i = 3 * i + 21 * ct;
      B[b_i] = Bk[3 * i];
      B[b_i + 1] = Bk[3 * i + 1];
      B[b_i + 2] = Bk[3 * i + 2];
    }

    for (int i{0}; i < 3; i++) {
      b_i = 3 * i + 9 * ct;
      C[b_i] = iv[3 * i];
      C[b_i + 1] = iv[3 * i + 1];
      C[b_i + 2] = iv[3 * i + 2];
    }

    for (int i{0}; i < 7; i++) {
      b_i = 3 * i + 21 * ct;
      D[b_i] = 0.0;
      D[b_i + 1] = 0.0;
      D[b_i + 2] = 0.0;
      U[i + 7 * ct] = inpk[i];
    }

    Y[3 * ct] = ek[0];
    X[3 * ct] = ek[0];
    DX[3 * ct] = Bk[21];
    b_i = 3 * ct + 1;
    Y[b_i] = ek[1];
    X[b_i] = ek[1];
    DX[b_i] = Bk[22];
    b_i = 3 * ct + 2;
    Y[b_i] = ek[2];
    X[b_i] = ek[2];
    DX[b_i] = Bk[23];

    //  next prediction step
    // WMRDT Discrete-time Nonlinear Dynamic Model of Mobile robot
    //  Repeat application of Euler method sampled at Ts/M.
    E_tmp = ek[2];
    b_E_tmp = ek[0];
    c_E_tmp = ek[1];
    unnamed_idx_1 = inpk[6];
    unnamed_idx_0 = inpk[5];
    b_unnamed_idx_1 = inpk[0];
    for (b_i = 0; b_i < 10; b_i++) {
      // PUSHINGCT Function to calculate the pushing error continuous time model
      //    Detailed explanation goes here
      //  Parameters
      //  error variables
      //  input variables
      //  de/dt
      b_unnamed_idx_0 = std::cos(E_tmp);
      c_unnamed_idx_1 = std::sin(E_tmp);
      c_unnamed_idx_0 = b_E_tmp * unnamed_idx_1;

      //  Output y
      //  State Matrix
      //  Input Matrix
      //  State Output Matrix
      //  Input Output Matrix
      //  Constraint Matrix
      //  wheel limit constraints
      //  curvature constraints
      b_E_tmp += 0.01 * (((((c_E_tmp * unnamed_idx_1 - unnamed_idx_0) +
                            unnamed_idx_1 * param->y_or) + b_unnamed_idx_1 *
                           b_unnamed_idx_0) - b_R_d_tmp * c_unnamed_idx_1) -
                         R_d_tmp * b_unnamed_idx_0);
      c_E_tmp += 0.01 * ((((b_unnamed_idx_1 * c_unnamed_idx_1 - c_unnamed_idx_0)
                           - DXk_idx_1_tmp) - R_d_tmp * c_unnamed_idx_1) +
                         b_R_d_tmp * b_unnamed_idx_0);
      E_tmp += 0.01 * DXk_idx_2_tmp;
    }

    ek[1] = c_E_tmp;
    ek[0] = b_E_tmp;
    ek[2] = E_tmp - 6.2831853071795862 * std::floor((E_tmp + 3.1415926535897931)
      / 6.2831853071795862);
  }
}

static double rt_hypotd_snf(double u0, double u1)
{
  double a;
  double y;
  a = std::abs(u0);
  y = std::abs(u1);
  if (a < y) {
    a /= y;
    y *= std::sqrt(a * a + 1.0);
  } else if (a > y) {
    y /= a;
    y = a * std::sqrt(y * y + 1.0);
  } else if (!std::isnan(y)) {
    y = a * 1.4142135623730951;
  }

  return y;
}

static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }

  return y;
}

void PushingMPClib_initialize()
{
}

void PushingMPClib_terminate()
{
}

void pushMove(double xk[5], const double v[182], const double oldu[52],
              struct4_T *stateData, struct5_T *onlineData, struct11_T *param,
              double vel_cmd[2], double mv[2], double seq[52], struct4_T
              *newstateData, struct12_T *info, double *iter, double xopt[130])
{
  static const signed char b_iv[25]{ 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1 };

  static const signed char b_iv1[9]{ 1, 0, 0, 0, 0, 0, 0, -1, 0 };

  static const signed char b_iv2[9]{ 0, 1, 0, 0, 0, 0, 0, 0, -1 };

  static const signed char A_tmp[5]{ 0, 0, 0, 0, 1 };

  static const signed char b_iv3[5]{ 1, 0, 0, 0, 0 };

  static const signed char b_iv4[5]{ 0, 1, 0, 0, 0 };

  static const signed char b_iv5[5]{ 0, 0, 1, 0, 0 };

  static const signed char b_iv6[5]{ 0, 0, 0, 1, 0 };

  double Dk[63];
  double Bk0[45];
  double Ck[35];
  double Ai[25];
  double Rot[25];
  double inpk[9];
  double DXk[5];
  double b_b[5];
  double b_xk[5];
  double c_b[5];
  double p0[2];
  double R_tmp;
  double Rot_tmp_tmp;
  double b_Rot_tmp_tmp;
  double b_unnamed_idx_0;
  double b_unnamed_idx_1;
  double c_unnamed_idx_0;
  double c_unnamed_idx_1;
  double d_unnamed_idx_0;
  double s;
  double unnamed_idx_0;
  double unnamed_idx_1;
  int Coef;
  int k;

  // STEPLTVMPC Summary of this function goes here
  //    Detailed explanation goes here
  //  Compute current error
  for (int i{0}; i < 25; i++) {
    Rot[i] = b_iv[i];
  }

  Rot_tmp_tmp = std::cos(v[52]);
  Rot[0] = Rot_tmp_tmp;
  b_Rot_tmp_tmp = std::sin(v[52]);
  Rot[5] = b_Rot_tmp_tmp;
  Rot[1] = -b_Rot_tmp_tmp;
  Rot[6] = Rot_tmp_tmp;
  for (int i{0}; i < 5; i++) {
    b_xk[i] = xk[i] - v[26 * i];
  }

  for (int i{0}; i < 5; i++) {
    s = 0.0;
    for (k = 0; k < 5; k++) {
      s += Rot[i + 5 * k] * b_xk[k];
    }

    stateData->Plant[i] = s;
  }

  stateData->Plant[2] -= 6.2831853071795862 * std::floor((stateData->Plant[2] +
    3.1415926535897931) / 6.2831853071795862);
  p0[0] = xk[0] - param->q1[0];
  p0[1] = xk[1] - param->q1[1];
  if (coder::b_norm(p0) > param->safe_d) {
    p0[0] = xk[0] - param->q2[0];
    p0[1] = xk[1] - param->q2[1];
    if (coder::b_norm(p0) > param->safe_d) {
      p0[0] = xk[0] - param->q3[0];
      p0[1] = xk[1] - param->q3[1];
      if (coder::b_norm(p0) > param->safe_d) {
        p0[0] = xk[0] - param->q4[0];
        p0[1] = xk[1] - param->q4[1];
        if (coder::b_norm(p0) > param->safe_d) {
          p0[0] = xk[0] - param->q5[0];
          p0[1] = xk[1] - param->q5[1];
          if (coder::b_norm(p0) > param->safe_d) {
            param->x0[0] = xk[0];
            param->x0[1] = xk[1];
          }
        }
      }
    }
  }

  p0[0] = param->x0[0] - param->q1[0];
  p0[1] = param->x0[1] - param->q1[1];
  s = coder::b_norm(p0);
  param->q1ad[0] = param->q1[0] + param->safe_d * p0[0] / s;
  p0[0] = param->x0[0] - param->q2[0];
  param->q1ad[1] = param->q1[1] + param->safe_d * p0[1] / s;
  p0[1] = param->x0[1] - param->q2[1];
  s = coder::b_norm(p0);
  param->q2ad[0] = param->q2[0] + param->safe_d * p0[0] / s;
  p0[0] = param->x0[0] - param->q3[0];
  param->q2ad[1] = param->q2[1] + param->safe_d * p0[1] / s;
  p0[1] = param->x0[1] - param->q3[1];
  s = coder::b_norm(p0);
  param->q3ad[0] = param->q3[0] + param->safe_d * p0[0] / s;
  p0[0] = param->x0[0] - param->q4[0];
  param->q3ad[1] = param->q3[1] + param->safe_d * p0[1] / s;
  p0[1] = param->x0[1] - param->q4[1];
  s = coder::b_norm(p0);
  param->q4ad[0] = param->q4[0] + param->safe_d * p0[0] / s;
  p0[0] = param->x0[0] - param->q5[0];
  param->q4ad[1] = param->q4[1] + param->safe_d * p0[1] / s;
  p0[1] = param->x0[1] - param->q5[1];
  s = coder::b_norm(p0);
  param->q5ad[0] = param->q5[0] + param->safe_d * p0[0] / s;
  param->q5ad[1] = param->q5[1] + param->safe_d * p0[1] / s;

  //  Initialize output
  for (int b_i{0}; b_i < 5; b_i++) {
    b_xk[b_i] = stateData->Plant[b_i];
  }

  //    Detailed explanation goes here
  //  Initialize output
  for (int i{0}; i < 7; i++) {
    inpk[i + 2] = v[26 * i];
  }

  // PUSHINGCT Function to calculate the pushing error continuous time model
  //    Detailed explanation goes here
  //  Parameters
  //  Jtot = J_r+J_o+M_o*(sqrt((x_or)^2 + (y_or)^2));
  //  b = 0.195;
  //  k = 1;
  //  s_o = 0.3;
  //  theta_mu = atan(0.4);
  //  error variables
  //  input variables
  //  de/dt
  //  Output y
  //  State Matrix
  //  Input Matrix
  //  State Output Matrix
  //  Input Output Matrix
  std::memset(&onlineData->customconstraints.F[0], 0, 35U * sizeof(double));
  for (int b_i{0}; b_i < 5; b_i++) {
    onlineData->customconstraints.G[b_i] = 1000.0;
  }

  std::memset(&onlineData->customconstraints.S[0], 0, 35U * sizeof(double));
  s = std::sin(inpk[4]);
  R_tmp = std::cos(inpk[4]);
  if (param->constraints != 0.0) {
    double d_unnamed_idx_1;

    // obstacle avoidance
    //  Constraint-Output Matrix F
    b_unnamed_idx_0 = param->q1ad[0] - param->x0[0];
    b_unnamed_idx_1 = param->q1ad[1] - param->x0[1];
    onlineData->customconstraints.F[10] = 0.0;
    onlineData->customconstraints.F[15] = 0.0;
    onlineData->customconstraints.F[20] = 0.0;
    onlineData->customconstraints.F[25] = 0.0;
    onlineData->customconstraints.F[30] = 0.0;
    onlineData->customconstraints.F[0] = b_unnamed_idx_0 * R_tmp +
      b_unnamed_idx_1 * s;
    d_unnamed_idx_0 = param->q2ad[0] - param->x0[0];
    onlineData->customconstraints.F[5] = b_unnamed_idx_0 * -s + b_unnamed_idx_1 *
      R_tmp;
    c_unnamed_idx_1 = param->q2ad[1] - param->x0[1];
    onlineData->customconstraints.F[11] = 0.0;
    onlineData->customconstraints.F[16] = 0.0;
    onlineData->customconstraints.F[21] = 0.0;
    onlineData->customconstraints.F[26] = 0.0;
    onlineData->customconstraints.F[31] = 0.0;
    onlineData->customconstraints.F[1] = d_unnamed_idx_0 * R_tmp +
      c_unnamed_idx_1 * s;
    unnamed_idx_0 = param->q3ad[0] - param->x0[0];
    onlineData->customconstraints.F[6] = d_unnamed_idx_0 * -s + c_unnamed_idx_1 *
      R_tmp;
    unnamed_idx_1 = param->q3ad[1] - param->x0[1];
    onlineData->customconstraints.F[12] = 0.0;
    onlineData->customconstraints.F[17] = 0.0;
    onlineData->customconstraints.F[22] = 0.0;
    onlineData->customconstraints.F[27] = 0.0;
    onlineData->customconstraints.F[32] = 0.0;
    onlineData->customconstraints.F[2] = unnamed_idx_0 * R_tmp + unnamed_idx_1 *
      s;
    c_unnamed_idx_0 = param->q4ad[0] - param->x0[0];
    onlineData->customconstraints.F[7] = unnamed_idx_0 * -s + unnamed_idx_1 *
      R_tmp;
    d_unnamed_idx_1 = param->q4ad[1] - param->x0[1];
    onlineData->customconstraints.F[13] = 0.0;
    onlineData->customconstraints.F[18] = 0.0;
    onlineData->customconstraints.F[23] = 0.0;
    onlineData->customconstraints.F[28] = 0.0;
    onlineData->customconstraints.F[33] = 0.0;
    onlineData->customconstraints.F[3] = c_unnamed_idx_0 * R_tmp +
      d_unnamed_idx_1 * s;
    p0[0] = param->q5ad[0] - param->x0[0];
    onlineData->customconstraints.F[8] = c_unnamed_idx_0 * -s + d_unnamed_idx_1 *
      R_tmp;
    p0[1] = param->q5ad[1] - param->x0[1];
    onlineData->customconstraints.F[14] = 0.0;
    onlineData->customconstraints.F[19] = 0.0;
    onlineData->customconstraints.F[24] = 0.0;
    onlineData->customconstraints.F[29] = 0.0;
    onlineData->customconstraints.F[34] = 0.0;

    //  Constraint constant matrix G
    //  Constraint-disturbance Matrix S
    onlineData->customconstraints.S[10] = 0.0;
    onlineData->customconstraints.S[15] = 0.0;
    onlineData->customconstraints.S[20] = 0.0;
    onlineData->customconstraints.S[25] = 0.0;
    onlineData->customconstraints.S[30] = 0.0;
    onlineData->customconstraints.S[11] = 0.0;
    onlineData->customconstraints.S[16] = 0.0;
    onlineData->customconstraints.S[21] = 0.0;
    onlineData->customconstraints.S[26] = 0.0;
    onlineData->customconstraints.S[31] = 0.0;
    onlineData->customconstraints.S[12] = 0.0;
    onlineData->customconstraints.S[17] = 0.0;
    onlineData->customconstraints.S[22] = 0.0;
    onlineData->customconstraints.S[27] = 0.0;
    onlineData->customconstraints.S[32] = 0.0;
    onlineData->customconstraints.S[13] = 0.0;
    onlineData->customconstraints.S[18] = 0.0;
    onlineData->customconstraints.S[23] = 0.0;
    onlineData->customconstraints.S[28] = 0.0;
    onlineData->customconstraints.S[33] = 0.0;
    onlineData->customconstraints.F[4] = p0[0] * R_tmp + p0[1] * s;
    onlineData->customconstraints.S[0] = b_unnamed_idx_0;
    onlineData->customconstraints.S[1] = d_unnamed_idx_0;
    onlineData->customconstraints.S[2] = unnamed_idx_0;
    onlineData->customconstraints.S[3] = c_unnamed_idx_0;
    onlineData->customconstraints.S[4] = p0[0];
    onlineData->customconstraints.F[9] = p0[0] * -s + p0[1] * R_tmp;
    onlineData->customconstraints.S[5] = b_unnamed_idx_1;
    onlineData->customconstraints.S[6] = c_unnamed_idx_1;
    onlineData->customconstraints.S[7] = unnamed_idx_1;
    onlineData->customconstraints.S[8] = d_unnamed_idx_1;
    onlineData->customconstraints.S[9] = p0[1];
    onlineData->customconstraints.G[0] = b_unnamed_idx_0 * param->q1ad[0] +
      b_unnamed_idx_1 * param->q1ad[1];
    onlineData->customconstraints.G[1] = d_unnamed_idx_0 * param->q2ad[0] +
      c_unnamed_idx_1 * param->q2ad[1];
    onlineData->customconstraints.G[2] = unnamed_idx_0 * param->q3ad[0] +
      unnamed_idx_1 * param->q3ad[1];
    onlineData->customconstraints.G[3] = c_unnamed_idx_0 * param->q4ad[0] +
      d_unnamed_idx_1 * param->q4ad[1];
    onlineData->customconstraints.G[4] = p0[0] * param->q5ad[0] + p0[1] *
      param->q5ad[1];
    onlineData->customconstraints.S[14] = 0.0;
    onlineData->customconstraints.S[19] = 0.0;
    onlineData->customconstraints.S[24] = 0.0;
    onlineData->customconstraints.S[29] = 0.0;
    onlineData->customconstraints.S[34] = 0.0;
  }

  //  Optain time varying linear models via successive linearization
  unnamed_idx_0 = 1.0 / param->R;
  unnamed_idx_1 = param->L / param->R;
  c_unnamed_idx_0 = -param->L / param->R;
  for (int ct{0}; ct < 26; ct++) {
    double Bk[50];
    double b_Bk0[50];
    double Ak[25];
    double b_Rot[25];
    inpk[0] = oldu[ct];
    inpk[1] = oldu[ct + 26];
    for (int i{0}; i < 7; i++) {
      inpk[i + 2] = v[ct + 26 * i];
    }

    // PUSHINGCT Function to calculate the pushing error continuous time model
    //    Detailed explanation goes here
    //  Parameters
    //  Jtot = J_r+J_o+M_o*(sqrt((x_or)^2 + (y_or)^2));
    //  b = 0.195;
    //  k = 1;
    //  s_o = 0.3;
    //  theta_mu = atan(0.4);
    //  error variables
    //  input variables
    //  de/dt
    b_unnamed_idx_0 = std::cos(b_xk[2]);
    DXk[0] = ((b_xk[1] * inpk[6] - inpk[5]) + b_xk[3] * b_unnamed_idx_0) + inpk
      [5] * b_unnamed_idx_0;
    b_unnamed_idx_1 = std::sin(b_xk[2]);
    DXk[1] = (b_xk[3] * b_unnamed_idx_1 - b_xk[0] * inpk[6]) + inpk[5] *
      b_unnamed_idx_1;
    DXk[2] = b_xk[4];
    d_unnamed_idx_0 = inpk[0] - inpk[7];
    DXk[3] = d_unnamed_idx_0;
    c_unnamed_idx_1 = inpk[1] - inpk[8];
    DXk[4] = c_unnamed_idx_1;

    //  Output y
    for (int i{0}; i < 5; i++) {
      onlineData->model.Y[i + 7 * ct] = b_xk[i];
    }

    s = b_xk[3] + inpk[5];
    R_tmp = param->L * (b_xk[4] + inpk[6]);
    onlineData->model.Y[7 * ct + 5] = (s + R_tmp) / param->R;
    onlineData->model.Y[7 * ct + 6] = (s - R_tmp) / param->R;

    //  State Matrix
    std::memset(&Rot[0], 0, 25U * sizeof(double));
    Rot[0] = 0.0;
    Rot[5] = inpk[6];
    Rot[10] = -b_xk[3] * b_unnamed_idx_1 - inpk[5] * std::sin(b_xk[2]);
    Rot[15] = b_unnamed_idx_0;
    Rot[20] = 0.0;
    Rot[1] = -inpk[6];
    Rot[6] = 0.0;
    s = std::cos(b_xk[2]);
    Rot[11] = b_xk[3] * s + inpk[5] * s;
    Rot[16] = b_unnamed_idx_1;
    Rot[21] = 0.0;
    for (int i{0}; i < 5; i++) {
      Rot[5 * i + 2] = A_tmp[i];
      Rot[5 * i + 3] = 0.0;
      Rot[5 * i + 4] = 0.0;
    }

    //  Input Matrix
    std::memset(&Bk0[0], 0, 45U * sizeof(double));
    Bk0[0] = 0.0;
    Bk0[5] = 0.0;
    Bk0[10] = 0.0;
    Bk0[15] = 0.0;
    Bk0[20] = 0.0;
    Bk0[25] = b_unnamed_idx_0 - 1.0;
    Bk0[30] = b_xk[1];
    Bk0[35] = 0.0;
    Bk0[40] = 0.0;
    Bk0[1] = 0.0;
    Bk0[6] = 0.0;
    Bk0[11] = 0.0;
    Bk0[16] = 0.0;
    Bk0[21] = 0.0;
    Bk0[26] = b_unnamed_idx_1;
    Bk0[31] = -b_xk[0];
    Bk0[36] = 0.0;
    Bk0[41] = 0.0;
    for (int i{0}; i < 9; i++) {
      Bk0[5 * i + 2] = 0.0;
      Bk0[5 * i + 3] = b_iv1[i];
      Bk0[5 * i + 4] = b_iv2[i];
    }

    //  State Output Matrix
    std::memset(&Ck[0], 0, 35U * sizeof(double));
    for (int i{0}; i < 5; i++) {
      Ck[7 * i] = b_iv3[i];
      Ck[7 * i + 1] = b_iv4[i];
      Ck[7 * i + 2] = b_iv5[i];
      Ck[7 * i + 3] = b_iv6[i];
      Ck[7 * i + 4] = A_tmp[i];
    }

    Ck[5] = 0.0;
    Ck[12] = 0.0;
    Ck[19] = 0.0;
    Ck[26] = unnamed_idx_0;
    Ck[33] = unnamed_idx_1;
    Ck[6] = 0.0;
    Ck[13] = 0.0;
    Ck[20] = 0.0;
    Ck[27] = unnamed_idx_0;
    Ck[34] = c_unnamed_idx_0;

    //  Input Output Matrix
    std::memset(&Dk[0], 0, 63U * sizeof(double));
    Dk[40] = unnamed_idx_0;
    Dk[47] = unnamed_idx_1;
    Dk[41] = unnamed_idx_0;
    Dk[48] = c_unnamed_idx_0;

    //  convert A and B matrices from continuous time to discrete time
    //  Convert A, B to discrete time
    for (int i{0}; i < 25; i++) {
      b_Rot[i] = Rot[i] * 0.1;
    }

    coder::expm(b_Rot, Ak);

    //  Number of points for Simpson's Rule, an even integer >= 2.
    //  Use Simpson's rule to compute integral(0,Ts){expm(a*s)*ds*b}
    std::memset(&Ai[0], 0, 25U * sizeof(double));
    for (k = 0; k < 5; k++) {
      Ai[k + 5 * k] = 1.0;
    }

    for (int i{0}; i < 25; i++) {
      Ai[i] += Ak[i];
    }

    //  First and last terms;
    Coef = 2;
    for (int b_i{0}; b_i < 3; b_i++) {
      double b[25];
      if (Coef == 2) {
        Coef = 4;
      } else {
        Coef = 2;
      }

      for (int i{0}; i < 25; i++) {
        b_Rot[i] = Rot[i] * (static_cast<double>(b_i) + 1.0) * 0.025;
      }

      coder::expm(b_Rot, b);
      for (int i{0}; i < 25; i++) {
        Ai[i] += static_cast<double>(Coef) * b[i];
      }

      //  Intermediate terms
    }

    for (int i{0}; i < 9; i++) {
      for (k = 0; k < 5; k++) {
        Coef = k + 5 * i;
        b_Bk0[Coef] = Bk0[Coef];
      }
    }

    for (int i{0}; i < 5; i++) {
      b_Bk0[i + 45] = DXk[i];
    }

    //  obtain matrices
    for (int i{0}; i < 5; i++) {
      for (k = 0; k < 10; k++) {
        s = 0.0;
        for (Coef = 0; Coef < 5; Coef++) {
          s += 0.0083333333333333332 * Ai[i + 5 * Coef] * b_Bk0[Coef + 5 * k];
        }

        Bk[i + 5 * k] = s;
      }

      for (k = 0; k < 5; k++) {
        Coef = k + 5 * i;
        onlineData->model.A[Coef + 25 * ct] = Ak[Coef];
      }
    }

    for (int i{0}; i < 9; i++) {
      for (k = 0; k < 5; k++) {
        Coef = k + 5 * i;
        onlineData->model.B[Coef + 45 * ct] = Bk[Coef];
      }
    }

    for (int i{0}; i < 5; i++) {
      for (k = 0; k < 7; k++) {
        Coef = k + 7 * i;
        onlineData->model.C[Coef + 35 * ct] = Ck[Coef];
      }
    }

    for (int i{0}; i < 9; i++) {
      for (k = 0; k < 7; k++) {
        Coef = k + 7 * i;
        onlineData->model.D[Coef + 63 * ct] = Dk[Coef];
      }

      onlineData->model.U[i + 9 * ct] = inpk[i];
    }

    for (int i{0}; i < 5; i++) {
      k = i + 5 * ct;
      onlineData->model.X[k] = b_xk[i];
      onlineData->model.DX[k] = Bk[i + 45];
    }

    //  next prediction step
    // WMRDT Discrete-time Nonlinear Dynamic Model of Mobile robot
    //  Repeat application of Euler method sampled at Ts/M.
    c_b[3] = d_unnamed_idx_0;
    c_b[4] = c_unnamed_idx_1;
    for (Coef = 0; Coef < 10; Coef++) {
      // PUSHINGCT Function to calculate the pushing error continuous time model
      //    Detailed explanation goes here
      //  Parameters
      //  Jtot = J_r+J_o+M_o*(sqrt((x_or)^2 + (y_or)^2));
      //  b = 0.195;
      //  k = 1;
      //  s_o = 0.3;
      //  theta_mu = atan(0.4);
      //  error variables
      c_b[2] = b_xk[4];

      //  input variables
      //  de/dt
      s = std::cos(b_xk[2]);
      c_b[0] = ((b_xk[1] * inpk[6] - inpk[5]) + b_xk[3] * s) + inpk[5] * s;
      s = std::sin(b_xk[2]);
      c_b[1] = (b_xk[3] * s - b_xk[0] * inpk[6]) + inpk[5] * s;

      //  Output y
      //  State Matrix
      //  Input Matrix
      //  State Output Matrix
      //  Input Output Matrix
      for (int i{0}; i < 5; i++) {
        b_xk[i] += 0.01 * c_b[i];
      }
    }

    b_xk[2] -= 6.2831853071795862 * std::floor((b_xk[2] + 3.1415926535897931) /
      6.2831853071795862);
  }

  std::copy(&v[0], &v[182], &onlineData->signals.md[0]);
  std::memset(&onlineData->customconstraints.E[0], 0, 10U * sizeof(double));
  *newstateData = *stateData;
  coder::mpcmoveCodeGeneration(newstateData, onlineData->signals.ref,
    onlineData->signals.md, onlineData->weights.y, onlineData->weights.u,
    onlineData->weights.du, onlineData->customconstraints.E,
    onlineData->customconstraints.F, onlineData->customconstraints.G,
    onlineData->customconstraints.S, &onlineData->model, mv, info->Uopt,
    info->Yopt, info->Xopt, info->Topt, &info->Slack, &info->Iterations,
    &info->Cost);
  for (int b_i{0}; b_i < 26; b_i++) {
    for (int i{0}; i < 25; i++) {
      Rot[i] = b_iv[i];
    }

    Rot[0] = Rot_tmp_tmp;
    Rot[5] = b_Rot_tmp_tmp;
    Rot[1] = -b_Rot_tmp_tmp;
    Rot[6] = Rot_tmp_tmp;
    for (int i{0}; i < 5; i++) {
      Coef = i * 5;
      s = 0.0;
      for (k = 0; k < 5; k++) {
        s += Rot[Coef + k] * info->Xopt[b_i + 26 * k];
      }

      Coef = b_i + 26 * i;
      xopt[Coef] = s + v[Coef];
    }
  }

  std::copy(&info->Uopt[0], &info->Uopt[52], &seq[0]);
  *iter = info->Iterations;

  // WMRDT Discrete-time Nonlinear Dynamic Model of Mobile robot
  //  Repeat application of Euler method sampled at Ts/M.
  b_b[3] = mv[0];
  b_b[4] = mv[1];
  for (int ct{0}; ct < 10; ct++) {
    // PUSHSYSCT Summary of this function goes here
    //    Detailed explanation goes here
    //  Parameters
    //  state variables
    b_b[2] = xk[4];

    //  input
    //  f_RR = u(3);
    //  f_RL = u(4);
    //  f_LR = u(5);
    //  f_LL = u(6);
    //
    //  v_ox = cos(theta_r)*v_r-omega_r*(y_o-y_r);
    //  v_oy = sin(theta_r)*v_r+omega_r*(x_o-x_r);
    //  omega_o = omega_r;
    //  model
    b_b[0] = xk[3] * std::cos(xk[2]);
    b_b[1] = xk[3] * std::sin(xk[2]);

    //  output
    for (int i{0}; i < 5; i++) {
      xk[i] += 0.01 * b_b[i];
    }
  }

  vel_cmd[0] = xk[3];
  vel_cmd[1] = xk[4];
}

void pushMoveObj(const double xk[3], const double v[130], const double oldu[52],
                 struct14_T *stateData, struct15_T *onlineData, struct20_T
                 *param, double vel_cmd[2], double mv[2], double seq[52],
                 struct14_T *newstateData, struct21_T *info, double *iter,
                 double xopt[78])
{
  static const double dv7[48360]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
    -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
    1.0000000000000005E-7, -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000058E-18, 1.0000000000000011E-15,
    -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000011E-19,
    -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
    1.0000000000000011E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000066E-20, -1.000000000000001E-17, 1.000000000000001E-17,
    -1.000000000000001E-17, 1.000000000000001E-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000012E-21, 1.0000000000000012E-18, 1.0000000000000012E-18,
    -1.0000000000000012E-18, -1.0000000000000012E-18, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000073E-22, 1.0000000000000012E-19, -1.0000000000000012E-19,
    1.0000000000000012E-19, -1.0000000000000012E-19, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000013E-23, -1.0000000000000013E-20,
    -1.0000000000000013E-20, 1.0000000000000013E-20, 1.0000000000000013E-20, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000073E-24, -1.0000000000000012E-21,
    1.0000000000000012E-21, -1.0000000000000012E-21, 1.0000000000000012E-21, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000014E-25, 1.0000000000000013E-22,
    1.0000000000000013E-22, -1.0000000000000013E-22, -1.0000000000000013E-22,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5,
    34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345, -3.4499999999999997,
    -3.4499999999999997, 3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0020700000000000002, -0.34500000000000003,
    0.34500000000000003, -0.34500000000000003, 0.34500000000000003, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000004E-7, -3.4500000000000012E-5,
    3.4500000000000012E-5, -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000011E-9, 3.4500000000000013E-6,
    3.4500000000000013E-6, -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000009E-9, 3.4500000000000014E-7,
    -3.4500000000000014E-7, 3.4500000000000014E-7, -3.4500000000000014E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000017E-11, -3.4500000000000018E-8,
    -3.4500000000000018E-8, 3.4500000000000018E-8, 3.4500000000000018E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.070000000000001E-11, -3.4500000000000015E-9,
    3.4500000000000015E-9, -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.450000000000002E-13, 3.4500000000000015E-10,
    3.4500000000000015E-10, -3.4500000000000015E-10, -3.4500000000000015E-10,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.070000000000001E-13, 3.4500000000000017E-11,
    -3.4500000000000017E-11, 3.4500000000000017E-11, -3.4500000000000017E-11,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.450000000000002E-15,
    -3.4500000000000017E-12, -3.4500000000000017E-12, 3.4500000000000017E-12,
    3.4500000000000017E-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000013E-15, -3.4500000000000025E-13, 3.4500000000000025E-13,
    -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.4500000000000031E-17, 3.450000000000003E-14, 3.450000000000003E-14,
    -3.450000000000003E-14, -3.450000000000003E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000018E-17, 3.4500000000000032E-15, -3.4500000000000032E-15,
    3.4500000000000032E-15, -3.4500000000000032E-15, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.4500000000000033E-19, -3.4500000000000033E-16,
    -3.4500000000000033E-16, 3.4500000000000033E-16, 3.4500000000000033E-16, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000018E-19, -3.4500000000000031E-17,
    3.4500000000000031E-17, -3.4500000000000031E-17, 3.4500000000000031E-17, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000032E-21, 3.4500000000000032E-18,
    3.4500000000000032E-18, -3.4500000000000032E-18, -3.4500000000000032E-18,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000024E-21, 3.4500000000000038E-19,
    -3.4500000000000038E-19, 3.4500000000000038E-19, -3.4500000000000038E-19,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000044E-23,
    -3.4500000000000038E-20, -3.4500000000000038E-20, 3.4500000000000038E-20,
    3.4500000000000038E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000023E-23, -3.4500000000000039E-21, 3.4500000000000039E-21,
    -3.4500000000000039E-21, 3.4500000000000039E-21, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.450000000000004E-25, 3.4500000000000039E-22, 3.4500000000000039E-22,
    -3.4500000000000039E-22, -3.4500000000000039E-22, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.0700000000000024E-25, 3.4500000000000044E-23, -3.4500000000000044E-23,
    3.4500000000000044E-23, -3.4500000000000044E-23, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6,
    -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
    -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
    1.0000000000000005E-7, -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000058E-18, 1.0000000000000011E-15,
    -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000011E-19,
    -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
    1.0000000000000011E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000066E-20, -1.000000000000001E-17, 1.000000000000001E-17,
    -1.000000000000001E-17, 1.000000000000001E-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000012E-21, 1.0000000000000012E-18, 1.0000000000000012E-18,
    -1.0000000000000012E-18, -1.0000000000000012E-18, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000073E-22, 1.0000000000000012E-19, -1.0000000000000012E-19,
    1.0000000000000012E-19, -1.0000000000000012E-19, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000013E-23, -1.0000000000000013E-20,
    -1.0000000000000013E-20, 1.0000000000000013E-20, 1.0000000000000013E-20, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000073E-24, -1.0000000000000012E-21,
    1.0000000000000012E-21, -1.0000000000000012E-21, 1.0000000000000012E-21, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00345, -3.4499999999999997, -3.4499999999999997,
    3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0020700000000000002, -0.34500000000000003, 0.34500000000000003,
    -0.34500000000000003, 0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000004E-7, -3.4500000000000012E-5,
    3.4500000000000012E-5, -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000011E-9, 3.4500000000000013E-6,
    3.4500000000000013E-6, -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000009E-9, 3.4500000000000014E-7,
    -3.4500000000000014E-7, 3.4500000000000014E-7, -3.4500000000000014E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000017E-11, -3.4500000000000018E-8,
    -3.4500000000000018E-8, 3.4500000000000018E-8, 3.4500000000000018E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.070000000000001E-11, -3.4500000000000015E-9,
    3.4500000000000015E-9, -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.450000000000002E-13, 3.4500000000000015E-10,
    3.4500000000000015E-10, -3.4500000000000015E-10, -3.4500000000000015E-10,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.070000000000001E-13, 3.4500000000000017E-11,
    -3.4500000000000017E-11, 3.4500000000000017E-11, -3.4500000000000017E-11,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.450000000000002E-15,
    -3.4500000000000017E-12, -3.4500000000000017E-12, 3.4500000000000017E-12,
    3.4500000000000017E-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000013E-15, -3.4500000000000025E-13, 3.4500000000000025E-13,
    -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.4500000000000031E-17, 3.450000000000003E-14, 3.450000000000003E-14,
    -3.450000000000003E-14, -3.450000000000003E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000018E-17, 3.4500000000000032E-15, -3.4500000000000032E-15,
    3.4500000000000032E-15, -3.4500000000000032E-15, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.4500000000000033E-19, -3.4500000000000033E-16,
    -3.4500000000000033E-16, 3.4500000000000033E-16, 3.4500000000000033E-16, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000018E-19, -3.4500000000000031E-17,
    3.4500000000000031E-17, -3.4500000000000031E-17, 3.4500000000000031E-17, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000032E-21, 3.4500000000000032E-18,
    3.4500000000000032E-18, -3.4500000000000032E-18, -3.4500000000000032E-18,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000024E-21, 3.4500000000000038E-19,
    -3.4500000000000038E-19, 3.4500000000000038E-19, -3.4500000000000038E-19,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000044E-23,
    -3.4500000000000038E-20, -3.4500000000000038E-20, 3.4500000000000038E-20,
    3.4500000000000038E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000023E-23, -3.4500000000000039E-21, 3.4500000000000039E-21,
    -3.4500000000000039E-21, 3.4500000000000039E-21, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.450000000000004E-25, 3.4500000000000039E-22, 3.4500000000000039E-22,
    -3.4500000000000039E-22, -3.4500000000000039E-22, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0,
    -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0,
    100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0,
    100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0,
    -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002,
    -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00060000000000000016,
    -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5,
    0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6,
    0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7,
    -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8,
    -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9,
    1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
    -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10,
    1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000058E-18, 1.0000000000000011E-15,
    -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000011E-19,
    -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
    1.0000000000000011E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000066E-20, -1.000000000000001E-17, 1.000000000000001E-17,
    -1.000000000000001E-17, 1.000000000000001E-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000012E-21, 1.0000000000000012E-18, 1.0000000000000012E-18,
    -1.0000000000000012E-18, -1.0000000000000012E-18, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000073E-22, 1.0000000000000012E-19, -1.0000000000000012E-19,
    1.0000000000000012E-19, -1.0000000000000012E-19, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000013E-23, -1.0000000000000013E-20,
    -1.0000000000000013E-20, 1.0000000000000013E-20, 1.0000000000000013E-20, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00345, -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.450000000000002E-15, -3.4500000000000017E-12,
    -3.4500000000000017E-12, 3.4500000000000017E-12, 3.4500000000000017E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000013E-15, -3.4500000000000025E-13,
    3.4500000000000025E-13, -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000031E-17, 3.450000000000003E-14,
    3.450000000000003E-14, -3.450000000000003E-14, -3.450000000000003E-14, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000018E-17, 3.4500000000000032E-15,
    -3.4500000000000032E-15, 3.4500000000000032E-15, -3.4500000000000032E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000033E-19,
    -3.4500000000000033E-16, -3.4500000000000033E-16, 3.4500000000000033E-16,
    3.4500000000000033E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000018E-19, -3.4500000000000031E-17, 3.4500000000000031E-17,
    -3.4500000000000031E-17, 3.4500000000000031E-17, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.4500000000000032E-21, 3.4500000000000032E-18, 3.4500000000000032E-18,
    -3.4500000000000032E-18, -3.4500000000000032E-18, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.0700000000000024E-21, 3.4500000000000038E-19, -3.4500000000000038E-19,
    3.4500000000000038E-19, -3.4500000000000038E-19, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.4500000000000044E-23, -3.4500000000000038E-20,
    -3.4500000000000038E-20, 3.4500000000000038E-20, 3.4500000000000038E-20, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000023E-23, -3.4500000000000039E-21,
    3.4500000000000039E-21, -3.4500000000000039E-21, 3.4500000000000039E-21, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0,
    -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0,
    100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0,
    100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0,
    -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002,
    -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00060000000000000016,
    -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5,
    0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6,
    0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7,
    -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8,
    -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9,
    1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
    -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10,
    1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000058E-18, 1.0000000000000011E-15,
    -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000011E-19,
    -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
    1.0000000000000011E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000066E-20, -1.000000000000001E-17, 1.000000000000001E-17,
    -1.000000000000001E-17, 1.000000000000001E-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000012E-21, 1.0000000000000012E-18, 1.0000000000000012E-18,
    -1.0000000000000012E-18, -1.0000000000000012E-18, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000073E-22, 1.0000000000000012E-19, -1.0000000000000012E-19,
    1.0000000000000012E-19, -1.0000000000000012E-19, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345, -3.4499999999999997,
    -3.4499999999999997, 3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0020700000000000002, -0.34500000000000003,
    0.34500000000000003, -0.34500000000000003, 0.34500000000000003, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000004E-7, -3.4500000000000012E-5,
    3.4500000000000012E-5, -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000011E-9, 3.4500000000000013E-6,
    3.4500000000000013E-6, -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000009E-9, 3.4500000000000014E-7,
    -3.4500000000000014E-7, 3.4500000000000014E-7, -3.4500000000000014E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000017E-11, -3.4500000000000018E-8,
    -3.4500000000000018E-8, 3.4500000000000018E-8, 3.4500000000000018E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.070000000000001E-11, -3.4500000000000015E-9,
    3.4500000000000015E-9, -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.450000000000002E-13, 3.4500000000000015E-10,
    3.4500000000000015E-10, -3.4500000000000015E-10, -3.4500000000000015E-10,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.070000000000001E-13, 3.4500000000000017E-11,
    -3.4500000000000017E-11, 3.4500000000000017E-11, -3.4500000000000017E-11,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.450000000000002E-15,
    -3.4500000000000017E-12, -3.4500000000000017E-12, 3.4500000000000017E-12,
    3.4500000000000017E-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000013E-15, -3.4500000000000025E-13, 3.4500000000000025E-13,
    -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.4500000000000031E-17, 3.450000000000003E-14, 3.450000000000003E-14,
    -3.450000000000003E-14, -3.450000000000003E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000018E-17, 3.4500000000000032E-15, -3.4500000000000032E-15,
    3.4500000000000032E-15, -3.4500000000000032E-15, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.4500000000000033E-19, -3.4500000000000033E-16,
    -3.4500000000000033E-16, 3.4500000000000033E-16, 3.4500000000000033E-16, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000018E-19, -3.4500000000000031E-17,
    3.4500000000000031E-17, -3.4500000000000031E-17, 3.4500000000000031E-17, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000032E-21, 3.4500000000000032E-18,
    3.4500000000000032E-18, -3.4500000000000032E-18, -3.4500000000000032E-18,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000024E-21, 3.4500000000000038E-19,
    -3.4500000000000038E-19, 3.4500000000000038E-19, -3.4500000000000038E-19,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000044E-23,
    -3.4500000000000038E-20, -3.4500000000000038E-20, 3.4500000000000038E-20,
    3.4500000000000038E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
    -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
    -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0,
    -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002,
    -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00060000000000000016,
    -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5,
    0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6,
    0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7,
    -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8,
    -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9,
    1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
    -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10,
    1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000058E-18, 1.0000000000000011E-15,
    -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000011E-19,
    -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
    1.0000000000000011E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000066E-20, -1.000000000000001E-17, 1.000000000000001E-17,
    -1.000000000000001E-17, 1.000000000000001E-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000012E-21, 1.0000000000000012E-18, 1.0000000000000012E-18,
    -1.0000000000000012E-18, -1.0000000000000012E-18, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.00345, -3.4499999999999997, -3.4499999999999997,
    3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0020700000000000002, -0.34500000000000003, 0.34500000000000003,
    -0.34500000000000003, 0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000004E-7, -3.4500000000000012E-5,
    3.4500000000000012E-5, -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000011E-9, 3.4500000000000013E-6,
    3.4500000000000013E-6, -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000009E-9, 3.4500000000000014E-7,
    -3.4500000000000014E-7, 3.4500000000000014E-7, -3.4500000000000014E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000017E-11, -3.4500000000000018E-8,
    -3.4500000000000018E-8, 3.4500000000000018E-8, 3.4500000000000018E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.070000000000001E-11, -3.4500000000000015E-9,
    3.4500000000000015E-9, -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.450000000000002E-13, 3.4500000000000015E-10,
    3.4500000000000015E-10, -3.4500000000000015E-10, -3.4500000000000015E-10,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.070000000000001E-13, 3.4500000000000017E-11,
    -3.4500000000000017E-11, 3.4500000000000017E-11, -3.4500000000000017E-11,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.450000000000002E-15,
    -3.4500000000000017E-12, -3.4500000000000017E-12, 3.4500000000000017E-12,
    3.4500000000000017E-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000013E-15, -3.4500000000000025E-13, 3.4500000000000025E-13,
    -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.4500000000000031E-17, 3.450000000000003E-14, 3.450000000000003E-14,
    -3.450000000000003E-14, -3.450000000000003E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000018E-17, 3.4500000000000032E-15, -3.4500000000000032E-15,
    3.4500000000000032E-15, -3.4500000000000032E-15, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.4500000000000033E-19, -3.4500000000000033E-16,
    -3.4500000000000033E-16, 3.4500000000000033E-16, 3.4500000000000033E-16, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000018E-19, -3.4500000000000031E-17,
    3.4500000000000031E-17, -3.4500000000000031E-17, 3.4500000000000031E-17, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000032E-21, 3.4500000000000032E-18,
    3.4500000000000032E-18, -3.4500000000000032E-18, -3.4500000000000032E-18,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000024E-21, 3.4500000000000038E-19,
    -3.4500000000000038E-19, 3.4500000000000038E-19, -3.4500000000000038E-19,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
    -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
    1.0000000000000005E-7, -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000058E-18, 1.0000000000000011E-15,
    -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000011E-19,
    -1.0000000000000011E-16, -1.0000000000000011E-16, 1.0000000000000011E-16,
    1.0000000000000011E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000066E-20, -1.000000000000001E-17, 1.000000000000001E-17,
    -1.000000000000001E-17, 1.000000000000001E-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.450000000000002E-15, -3.4500000000000017E-12,
    -3.4500000000000017E-12, 3.4500000000000017E-12, 3.4500000000000017E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000013E-15, -3.4500000000000025E-13,
    3.4500000000000025E-13, -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000031E-17, 3.450000000000003E-14,
    3.450000000000003E-14, -3.450000000000003E-14, -3.450000000000003E-14, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000018E-17, 3.4500000000000032E-15,
    -3.4500000000000032E-15, 3.4500000000000032E-15, -3.4500000000000032E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000033E-19,
    -3.4500000000000033E-16, -3.4500000000000033E-16, 3.4500000000000033E-16,
    3.4500000000000033E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000018E-19, -3.4500000000000031E-17, 3.4500000000000031E-17,
    -3.4500000000000031E-17, 3.4500000000000031E-17, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.4500000000000032E-21, 3.4500000000000032E-18, 3.4500000000000032E-18,
    -3.4500000000000032E-18, -3.4500000000000032E-18, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0,
    100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0,
    -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002, -1.0000000000000002,
    -1.0000000000000002, 1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00060000000000000016, -0.10000000000000002,
    0.10000000000000002, -0.10000000000000002, 0.10000000000000002, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5, 0.010000000000000004,
    0.010000000000000004, -0.010000000000000004, -0.010000000000000004, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6, 0.0010000000000000005,
    -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7, -0.00010000000000000003,
    -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8, -1.0000000000000004E-5,
    1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9, 1.0000000000000006E-6,
    1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000006E-11, -1.0000000000000005E-8,
    -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000035E-12, -1.0000000000000007E-9,
    1.0000000000000007E-9, -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000007E-13, 1.0000000000000006E-10,
    1.0000000000000006E-10, -1.0000000000000006E-10, -1.0000000000000006E-10,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000035E-14, 1.0000000000000006E-11,
    -1.0000000000000006E-11, 1.0000000000000006E-11, -1.0000000000000006E-11,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000009E-15,
    -1.0000000000000008E-12, -1.0000000000000008E-12, 1.0000000000000008E-12,
    1.0000000000000008E-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000048E-16, -1.0000000000000009E-13, 1.0000000000000009E-13,
    -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.000000000000001E-17, 1.0000000000000009E-14, 1.0000000000000009E-14,
    -1.0000000000000009E-14, -1.0000000000000009E-14, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000058E-18, 1.0000000000000011E-15, -1.0000000000000011E-15,
    1.0000000000000011E-15, -1.0000000000000011E-15, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000011E-19, -1.0000000000000011E-16,
    -1.0000000000000011E-16, 1.0000000000000011E-16, 1.0000000000000011E-16, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.450000000000002E-15, -3.4500000000000017E-12,
    -3.4500000000000017E-12, 3.4500000000000017E-12, 3.4500000000000017E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000013E-15, -3.4500000000000025E-13,
    3.4500000000000025E-13, -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000031E-17, 3.450000000000003E-14,
    3.450000000000003E-14, -3.450000000000003E-14, -3.450000000000003E-14, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000018E-17, 3.4500000000000032E-15,
    -3.4500000000000032E-15, 3.4500000000000032E-15, -3.4500000000000032E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000033E-19,
    -3.4500000000000033E-16, -3.4500000000000033E-16, 3.4500000000000033E-16,
    3.4500000000000033E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000018E-19, -3.4500000000000031E-17, 3.4500000000000031E-17,
    -3.4500000000000031E-17, 3.4500000000000031E-17, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
    -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
    1.0000000000000005E-7, -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000058E-18, 1.0000000000000011E-15,
    -1.0000000000000011E-15, 1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5,
    -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.450000000000002E-15, -3.4500000000000017E-12,
    -3.4500000000000017E-12, 3.4500000000000017E-12, 3.4500000000000017E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000013E-15, -3.4500000000000025E-13,
    3.4500000000000025E-13, -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000031E-17, 3.450000000000003E-14,
    3.450000000000003E-14, -3.450000000000003E-14, -3.450000000000003E-14, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000018E-17, 3.4500000000000032E-15,
    -3.4500000000000032E-15, 3.4500000000000032E-15, -3.4500000000000032E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000033E-19,
    -3.4500000000000033E-16, -3.4500000000000033E-16, 3.4500000000000033E-16,
    3.4500000000000033E-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
    -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
    -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0,
    -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002,
    -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00060000000000000016,
    -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5,
    0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6,
    0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7,
    -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8,
    -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9,
    1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
    -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10,
    1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-17, 1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, -1.0000000000000009E-14,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345, -3.4499999999999997,
    -3.4499999999999997, 3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0020700000000000002, -0.34500000000000003,
    0.34500000000000003, -0.34500000000000003, 0.34500000000000003, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000004E-7, -3.4500000000000012E-5,
    3.4500000000000012E-5, -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000011E-9, 3.4500000000000013E-6,
    3.4500000000000013E-6, -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000009E-9, 3.4500000000000014E-7,
    -3.4500000000000014E-7, 3.4500000000000014E-7, -3.4500000000000014E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000017E-11, -3.4500000000000018E-8,
    -3.4500000000000018E-8, 3.4500000000000018E-8, 3.4500000000000018E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.070000000000001E-11, -3.4500000000000015E-9,
    3.4500000000000015E-9, -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.450000000000002E-13, 3.4500000000000015E-10,
    3.4500000000000015E-10, -3.4500000000000015E-10, -3.4500000000000015E-10,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.070000000000001E-13, 3.4500000000000017E-11,
    -3.4500000000000017E-11, 3.4500000000000017E-11, -3.4500000000000017E-11,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.450000000000002E-15,
    -3.4500000000000017E-12, -3.4500000000000017E-12, 3.4500000000000017E-12,
    3.4500000000000017E-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000013E-15, -3.4500000000000025E-13, 3.4500000000000025E-13,
    -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 3.4500000000000031E-17, 3.450000000000003E-14, 3.450000000000003E-14,
    -3.450000000000003E-14, -3.450000000000003E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000018E-17, 3.4500000000000032E-15, -3.4500000000000032E-15,
    3.4500000000000032E-15, -3.4500000000000032E-15, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
    -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
    -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0,
    -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002,
    -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00060000000000000016,
    -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5,
    0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6,
    0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7,
    -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8,
    -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9,
    1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
    -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10,
    1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000048E-16, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.00345, -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.450000000000002E-15, -3.4500000000000017E-12,
    -3.4500000000000017E-12, 3.4500000000000017E-12, 3.4500000000000017E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000013E-15, -3.4500000000000025E-13,
    3.4500000000000025E-13, -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000031E-17, 3.450000000000003E-14,
    3.450000000000003E-14, -3.450000000000003E-14, -3.450000000000003E-14, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
    -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
    -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0,
    -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002,
    -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00060000000000000016,
    -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5,
    0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6,
    0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7,
    -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8,
    -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9,
    1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
    -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10,
    1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000035E-14, 1.0000000000000006E-11, -1.0000000000000006E-11,
    1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000009E-15, -1.0000000000000008E-12,
    -1.0000000000000008E-12, 1.0000000000000008E-12, 1.0000000000000008E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.450000000000002E-15, -3.4500000000000017E-12,
    -3.4500000000000017E-12, 3.4500000000000017E-12, 3.4500000000000017E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000013E-15, -3.4500000000000025E-13,
    3.4500000000000025E-13, -3.4500000000000025E-13, 3.4500000000000025E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0,
    100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0,
    -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002, -1.0000000000000002,
    -1.0000000000000002, 1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00060000000000000016, -0.10000000000000002,
    0.10000000000000002, -0.10000000000000002, 0.10000000000000002, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5, 0.010000000000000004,
    0.010000000000000004, -0.010000000000000004, -0.010000000000000004, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6, 0.0010000000000000005,
    -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7, -0.00010000000000000003,
    -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8, -1.0000000000000004E-5,
    1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9, 1.0000000000000006E-6,
    1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000006E-11, -1.0000000000000005E-8,
    -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000035E-12, -1.0000000000000007E-9,
    1.0000000000000007E-9, -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000007E-13, 1.0000000000000006E-10,
    1.0000000000000006E-10, -1.0000000000000006E-10, -1.0000000000000006E-10,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000035E-14, 1.0000000000000006E-11,
    -1.0000000000000006E-11, 1.0000000000000006E-11, -1.0000000000000006E-11,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5,
    -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.450000000000002E-15, -3.4500000000000017E-12,
    -3.4500000000000017E-12, 3.4500000000000017E-12, 3.4500000000000017E-12, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
    -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
    1.0000000000000005E-7, -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000007E-13, 1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, -1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00345, -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 2.070000000000001E-13, 3.4500000000000017E-11, -3.4500000000000017E-11,
    3.4500000000000017E-11, -3.4500000000000017E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1,
    -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
    -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0,
    -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002,
    -1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00060000000000000016,
    -0.10000000000000002, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5,
    0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6,
    0.0010000000000000005, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7,
    -0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8,
    -1.0000000000000004E-5, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9,
    1.0000000000000006E-6, 1.0000000000000006E-6, -1.0000000000000006E-6,
    -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10,
    1.0000000000000005E-7, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-11, -1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, 1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-12, -1.0000000000000007E-9, 1.0000000000000007E-9,
    -1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5,
    -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.450000000000002E-13, 3.4500000000000015E-10, 3.4500000000000015E-10,
    -3.4500000000000015E-10, -3.4500000000000015E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0,
    100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0,
    -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002, -1.0000000000000002,
    -1.0000000000000002, 1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00060000000000000016, -0.10000000000000002,
    0.10000000000000002, -0.10000000000000002, 0.10000000000000002, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5, 0.010000000000000004,
    0.010000000000000004, -0.010000000000000004, -0.010000000000000004, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6, 0.0010000000000000005,
    -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7, -0.00010000000000000003,
    -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8, -1.0000000000000004E-5,
    1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000005E-9, 1.0000000000000006E-6,
    1.0000000000000006E-6, -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000031E-10, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 1.0000000000000005E-7, -1.0000000000000005E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000006E-11, -1.0000000000000005E-8,
    -1.0000000000000005E-8, 1.0000000000000005E-8, 1.0000000000000005E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207,
    34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000017E-11, -3.4500000000000018E-8, -3.4500000000000018E-8,
    3.4500000000000018E-8, 3.4500000000000018E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.070000000000001E-11, -3.4500000000000015E-9, 3.4500000000000015E-9,
    -3.4500000000000015E-9, 3.4500000000000015E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
    -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000031E-10, 1.0000000000000005E-7, -1.0000000000000005E-7,
    1.0000000000000005E-7, -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.00345, -3.4499999999999997, -3.4499999999999997,
    3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0020700000000000002, -0.34500000000000003, 0.34500000000000003,
    -0.34500000000000003, 0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000004E-7, -3.4500000000000012E-5,
    3.4500000000000012E-5, -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000011E-9, 3.4500000000000013E-6,
    3.4500000000000013E-6, -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000009E-9, 3.4500000000000014E-7,
    -3.4500000000000014E-7, 3.4500000000000014E-7, -3.4500000000000014E-7, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000017E-11, -3.4500000000000018E-8,
    -3.4500000000000018E-8, 3.4500000000000018E-8, 3.4500000000000018E-8, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000021E-8, -1.0000000000000004E-5, 1.0000000000000004E-5,
    -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-9, 1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, -1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000009E-9, 3.4500000000000014E-7, -3.4500000000000014E-7,
    3.4500000000000014E-7, -3.4500000000000014E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0,
    100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0,
    -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002, -1.0000000000000002,
    -1.0000000000000002, 1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00060000000000000016, -0.10000000000000002,
    0.10000000000000002, -0.10000000000000002, 0.10000000000000002, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5, 0.010000000000000004,
    0.010000000000000004, -0.010000000000000004, -0.010000000000000004, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6, 0.0010000000000000005,
    -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000005E-7, -0.00010000000000000003,
    -0.00010000000000000003, 0.00010000000000000003, 0.00010000000000000003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000021E-8, -1.0000000000000004E-5,
    1.0000000000000004E-5, -1.0000000000000004E-5, 1.0000000000000004E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00345, -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.4500000000000014E-7, -0.00034500000000000015, -0.00034500000000000015,
    0.00034500000000000015, 0.00034500000000000015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0700000000000004E-7, -3.4500000000000012E-5, 3.4500000000000012E-5,
    -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000011E-9, 3.4500000000000013E-6, 3.4500000000000013E-6,
    -3.4500000000000013E-6, -3.4500000000000013E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000027E-6, 0.0010000000000000005, -0.0010000000000000005,
    0.0010000000000000005, -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-7, -0.00010000000000000003, -0.00010000000000000003,
    0.00010000000000000003, 0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00345, -3.4499999999999997, -3.4499999999999997,
    3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0020700000000000002, -0.34500000000000003, 0.34500000000000003,
    -0.34500000000000003, 0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.0700000000000004E-7, -3.4500000000000012E-5,
    3.4500000000000012E-5, -3.4500000000000012E-5, 3.4500000000000012E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0010000000000000002, -1.0000000000000002,
    -1.0000000000000002, 1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00060000000000000016, -0.10000000000000002,
    0.10000000000000002, -0.10000000000000002, 0.10000000000000002, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-5, 0.010000000000000004,
    0.010000000000000004, -0.010000000000000004, -0.010000000000000004, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 6.0000000000000027E-6, 0.0010000000000000005,
    -0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345, -3.4499999999999997,
    -3.4499999999999997, 3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0020700000000000002, -0.34500000000000003,
    0.34500000000000003, -0.34500000000000003, 0.34500000000000003, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5, 0.0345, 0.0345, -0.0345, -0.0345,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0700000000000002E-5, 0.0034500000000000004,
    -0.0034500000000000004, 0.0034500000000000004, -0.0034500000000000004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.4500000000000014E-7, -0.00034500000000000015,
    -0.00034500000000000015, 0.00034500000000000015, 0.00034500000000000015, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00060000000000000016, -0.10000000000000002, 0.10000000000000002,
    -0.10000000000000002, 0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000004E-5, 0.010000000000000004, 0.010000000000000004,
    -0.010000000000000004, -0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.0700000000000002E-5, 0.0034500000000000004, -0.0034500000000000004,
    0.0034500000000000004, -0.0034500000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0,
    100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0,
    -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0010000000000000002, -1.0000000000000002,
    -1.0000000000000002, 1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00060000000000000016, -0.10000000000000002,
    0.10000000000000002, -0.10000000000000002, 0.10000000000000002, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020700000000000002,
    -0.34500000000000003, 0.34500000000000003, -0.34500000000000003,
    0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.4500000000000005E-5,
    0.0345, 0.0345, -0.0345, -0.0345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0010000000000000002, -1.0000000000000002, -1.0000000000000002,
    1.0000000000000002, 1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00345, -3.4499999999999997, -3.4499999999999997,
    3.4499999999999997, 3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0020700000000000002, -0.34500000000000003, 0.34500000000000003,
    -0.34500000000000003, 0.34500000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6,
    -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.06, 10.0, -10.0, 10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00345,
    -3.4499999999999997, -3.4499999999999997, 3.4499999999999997,
    3.4499999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 100.0, 100.0, -100.0, -100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.207, 34.5, -34.5, 34.5, -34.5, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0,
    100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0, -100.0, 100.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const double dv11[2170]{ -1.0, -0.0, -1.0, -0.0, -1.0, -0.0, 1.0, 0.0,
    1.0, 0.0, 1.0, 0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.0, -0.0, -0.0,
    -0.0, -0.0, -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1, -100.0,
    -100.0, 100.0, 100.0, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.16, -110.0, -90.0, 90.0, 110.0, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.159, -109.0, -89.0, 89.0, 109.0,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1584, -108.9,
    -89.1, 89.1, 108.9, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841, -108.91, -89.109999999999985,
    89.109999999999985, 108.91, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.158416, -108.91099999999999, -89.109, 89.109,
    108.91099999999999, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.1584159, -108.9109, -89.1089, 89.1089, 108.9109,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.15841584,
    -108.91089, -89.108910000000009, 89.108910000000009, 108.91089,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.158415841,
    -108.91089099999999, -89.108911, 89.108911, 108.91089099999999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1584158416,
    -108.9108911, -89.1089109, 89.1089109, 108.9108911, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584159, -108.91089109,
    -89.10891089, 89.10891089, 108.91089109, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158400002, -108.910891089,
    -89.108910891000008, 89.108910891000008, 108.910891089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584158415841,
    -108.91089108909999, -89.1089108911, 89.1089108911, 108.91089108909999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158416, -108.91089108911, -89.108910891089991, 89.108910891089991,
    108.91089108911, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.158415841584159, -108.910891089109, -89.108910891089,
    89.108910891089, 108.910891089109, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415839, -108.9108910891089,
    -89.1089108910891, 89.1089108910891, 108.9108910891089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415842, -108.91089108910892,
    -89.10891089108911, 89.10891089108911, 108.91089108910892,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158415842, -108.91089108910892, -89.10891089108911,
    89.10891089108911, 108.91089108910892, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415842, -108.91089108910892,
    -89.10891089108911, 89.10891089108911, 108.91089108910892,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158415842, -108.91089108910892, -89.10891089108911,
    89.10891089108911, 108.91089108910892, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415842, -108.91089108910892,
    -89.10891089108911, 89.10891089108911, 108.91089108910892,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158415842, -108.91089108910892, -89.10891089108911,
    89.10891089108911, 108.91089108910892, -0.0, -1.0, -0.0, -1.0, -0.0, -1.0,
    0.0, 1.0, 0.0, 1.0, 0.0, 1.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.207, -34.5, 34.5, -34.5, 34.5,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20354999999999998, -31.049999999999997,
    37.949999999999996, -37.949999999999996, 31.049999999999997,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20147999999999996, -30.705, 37.605,
    -37.605, 30.705, -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20151449999999996, -30.739499999999996,
    37.570499999999996, -37.570499999999996, 30.739499999999996,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153519999999997, -30.742949999999997,
    37.573949999999996, -37.573949999999996, 30.742949999999997,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153485499999996, -30.742604999999998,
    37.574294999999992, -37.574294999999992, 30.742604999999998,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153464799999996, -30.742570499999996,
    37.574260499999994, -37.574260499999994, 30.742570499999996,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465144999996, -30.742573949999993,
    37.574257049999993, -37.574257049999993, 30.742573949999993,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465351999997, -30.742574294999997,
    37.574257395, -37.574257395, 30.742574294999997, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465348549995, -30.742574260499996, 37.574257429499994,
    -37.574257429499994, 30.742574260499996, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346479996, -30.742574257049995, 37.574257426049996,
    -37.574257426049996, 30.742574257049995, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346514496, -30.742574257394992, 37.574257425704992,
    -37.574257425704992, 30.742574257394992, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346535196, -30.742574257429492, 37.574257425739496,
    -37.574257425739496, 30.742574257429492, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346534852, -30.742574257426043, 37.574257425742942,
    -37.574257425742942, 30.742574257426043, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346534644, -30.7425742574257, 37.5742574257426, -37.5742574257426,
    30.7425742574257, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534646,
    -30.742574257425733, 37.574257425742566, -37.574257425742566,
    30.742574257425733, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -0.0, -0.0, -1.0, -0.0, -1.0, -0.0, 0.0, 0.0, 1.0, 0.0,
    1.0, 0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1, -100.0, -100.0, 100.0, 100.0,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.16, -110.0,
    -90.0, 90.0, 110.0, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.159, -109.0, -89.0, 89.0, 109.0, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584, -108.9, -89.1, 89.1, 108.9,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.15841,
    -108.91, -89.109999999999985, 89.109999999999985, 108.91,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.158416,
    -108.91099999999999, -89.109, 89.109, 108.91099999999999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1584159,
    -108.9109, -89.1089, 89.1089, 108.9109, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584, -108.91089,
    -89.108910000000009, 89.108910000000009, 108.91089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.158415841, -108.91089099999999,
    -89.108911, 89.108911, 108.91089099999999, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584158416, -108.9108911,
    -89.1089109, 89.1089109, 108.9108911, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584159, -108.91089109,
    -89.10891089, 89.10891089, 108.91089109, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158400002, -108.910891089,
    -89.108910891000008, 89.108910891000008, 108.910891089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584158415841,
    -108.91089108909999, -89.1089108911, 89.1089108911, 108.91089108909999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158416, -108.91089108911, -89.108910891089991, 89.108910891089991,
    108.91089108911, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.158415841584159, -108.910891089109, -89.108910891089,
    89.108910891089, 108.910891089109, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415839, -108.9108910891089,
    -89.1089108910891, 89.1089108910891, 108.9108910891089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415842, -108.91089108910892,
    -89.10891089108911, 89.10891089108911, 108.91089108910892,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158415842, -108.91089108910892, -89.10891089108911,
    89.10891089108911, 108.91089108910892, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -0.0, -0.0, -0.0, -1.0, -0.0, -1.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 1.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.207, -34.5, 34.5, -34.5, 34.5,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20354999999999998, -31.049999999999997,
    37.949999999999996, -37.949999999999996, 31.049999999999997,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20147999999999996, -30.705, 37.605,
    -37.605, 30.705, -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20151449999999996, -30.739499999999996,
    37.570499999999996, -37.570499999999996, 30.739499999999996,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153519999999997, -30.742949999999997,
    37.573949999999996, -37.573949999999996, 30.742949999999997,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153485499999996, -30.742604999999998,
    37.574294999999992, -37.574294999999992, 30.742604999999998,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153464799999996, -30.742570499999996,
    37.574260499999994, -37.574260499999994, 30.742570499999996,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465144999996, -30.742573949999993,
    37.574257049999993, -37.574257049999993, 30.742573949999993,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465351999997, -30.742574294999997,
    37.574257395, -37.574257395, 30.742574294999997, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465348549995, -30.742574260499996, 37.574257429499994,
    -37.574257429499994, 30.742574260499996, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346479996, -30.742574257049995, 37.574257426049996,
    -37.574257426049996, 30.742574257049995, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346514496, -30.742574257394992, 37.574257425704992,
    -37.574257425704992, 30.742574257394992, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346535196, -30.742574257429492, 37.574257425739496,
    -37.574257425739496, 30.742574257429492, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346534852, -30.742574257426043, 37.574257425742942,
    -37.574257425742942, 30.742574257426043, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346534644, -30.7425742574257, 37.5742574257426, -37.5742574257426,
    30.7425742574257, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534646,
    -30.742574257425733, 37.574257425742566, -37.574257425742566,
    30.742574257425733, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534652,
    -30.742574257425741, 37.574257425742573, -37.574257425742573,
    30.742574257425741, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.0, -0.0, -0.0, -0.0, -0.0, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1, -100.0, -100.0, 100.0, 100.0,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.16, -110.0,
    -90.0, 90.0, 110.0, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.159, -109.0, -89.0, 89.0, 109.0, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584, -108.9, -89.1, 89.1, 108.9,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.15841,
    -108.91, -89.109999999999985, 89.109999999999985, 108.91,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.158416,
    -108.91099999999999, -89.109, 89.109, 108.91099999999999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1584159,
    -108.9109, -89.1089, 89.1089, 108.9109, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584, -108.91089,
    -89.108910000000009, 89.108910000000009, 108.91089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.158415841, -108.91089099999999,
    -89.108911, 89.108911, 108.91089099999999, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584158416, -108.9108911,
    -89.1089109, 89.1089109, 108.9108911, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584159, -108.91089109,
    -89.10891089, 89.10891089, 108.91089109, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158400002, -108.910891089,
    -89.108910891000008, 89.108910891000008, 108.910891089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584158415841,
    -108.91089108909999, -89.1089108911, 89.1089108911, 108.91089108909999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158416, -108.91089108911, -89.108910891089991, 89.108910891089991,
    108.91089108911, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.158415841584159, -108.910891089109, -89.108910891089,
    89.108910891089, 108.910891089109, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.207, -34.5, 34.5,
    -34.5, 34.5, -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20354999999999998, -31.049999999999997,
    37.949999999999996, -37.949999999999996, 31.049999999999997,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20147999999999996, -30.705, 37.605,
    -37.605, 30.705, -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20151449999999996, -30.739499999999996,
    37.570499999999996, -37.570499999999996, 30.739499999999996,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153519999999997, -30.742949999999997,
    37.573949999999996, -37.573949999999996, 30.742949999999997,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153485499999996, -30.742604999999998,
    37.574294999999992, -37.574294999999992, 30.742604999999998,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153464799999996, -30.742570499999996,
    37.574260499999994, -37.574260499999994, 30.742570499999996,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465144999996, -30.742573949999993,
    37.574257049999993, -37.574257049999993, 30.742573949999993,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465351999997, -30.742574294999997,
    37.574257395, -37.574257395, 30.742574294999997, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465348549995, -30.742574260499996, 37.574257429499994,
    -37.574257429499994, 30.742574260499996, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346479996, -30.742574257049995, 37.574257426049996,
    -37.574257426049996, 30.742574257049995, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346514496, -30.742574257394992, 37.574257425704992,
    -37.574257425704992, 30.742574257394992, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346535196, -30.742574257429492, 37.574257425739496,
    -37.574257425739496, 30.742574257429492, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346534852, -30.742574257426043, 37.574257425742942,
    -37.574257425742942, 30.742574257426043, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346534644, -30.7425742574257, 37.5742574257426, -37.5742574257426,
    30.7425742574257, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const double dv3[930]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -100.0, -100.0, 100.0, 100.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.06, -10.0, 10.0, -10.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0010000000000000002, 1.0000000000000002, 1.0000000000000002,
    -1.0000000000000002, -1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00060000000000000016, 0.10000000000000002, -0.10000000000000002,
    0.10000000000000002, -0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000004E-5, -0.010000000000000004, -0.010000000000000004,
    0.010000000000000004, 0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000027E-6, -0.0010000000000000005, 0.0010000000000000005,
    -0.0010000000000000005, 0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000005E-7, 0.00010000000000000003, 0.00010000000000000003,
    -0.00010000000000000003, -0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000021E-8, 1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, -1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-9, -1.0000000000000006E-6, -1.0000000000000006E-6,
    1.0000000000000006E-6, 1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000031E-10, -1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, 1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000006E-11, 1.0000000000000005E-8, 1.0000000000000005E-8,
    -1.0000000000000005E-8, -1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000035E-12, 1.0000000000000007E-9, -1.0000000000000007E-9,
    1.0000000000000007E-9, -1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000007E-13, -1.0000000000000006E-10, -1.0000000000000006E-10,
    1.0000000000000006E-10, 1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000035E-14, -1.0000000000000006E-11, 1.0000000000000006E-11,
    -1.0000000000000006E-11, 1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0000000000000009E-15, 1.0000000000000008E-12, 1.0000000000000008E-12,
    -1.0000000000000008E-12, -1.0000000000000008E-12, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000048E-16, 1.0000000000000009E-13, -1.0000000000000009E-13,
    1.0000000000000009E-13, -1.0000000000000009E-13, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.000000000000001E-17, -1.0000000000000009E-14,
    -1.0000000000000009E-14, 1.0000000000000009E-14, 1.0000000000000009E-14, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000058E-18, -1.0000000000000011E-15,
    1.0000000000000011E-15, -1.0000000000000011E-15, 1.0000000000000011E-15, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000011E-19, 1.0000000000000011E-16,
    1.0000000000000011E-16, -1.0000000000000011E-16, -1.0000000000000011E-16,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000066E-20, 1.000000000000001E-17,
    -1.000000000000001E-17, 1.000000000000001E-17, -1.000000000000001E-17, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000012E-21, -1.0000000000000012E-18,
    -1.0000000000000012E-18, 1.0000000000000012E-18, 1.0000000000000012E-18, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000073E-22, -1.0000000000000012E-19,
    1.0000000000000012E-19, -1.0000000000000012E-19, 1.0000000000000012E-19, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000013E-23, 1.0000000000000013E-20,
    1.0000000000000013E-20, -1.0000000000000013E-20, -1.0000000000000013E-20,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000073E-24, 1.0000000000000012E-21,
    -1.0000000000000012E-21, 1.0000000000000012E-21, -1.0000000000000012E-21,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000014E-25,
    -1.0000000000000013E-22, -1.0000000000000013E-22, 1.0000000000000013E-22,
    1.0000000000000013E-22, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000083E-26, -1.0000000000000014E-23, 1.0000000000000014E-23,
    -1.0000000000000014E-23, 1.0000000000000014E-23, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6, -100.0, 100.0,
    -100.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010000000000000002, 10.0,
    10.0, -10.0, -10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006000000000000001,
    1.0000000000000002, -1.0000000000000002, 1.0000000000000002,
    -1.0000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00010000000000000003,
    -0.10000000000000002, -0.10000000000000002, 0.10000000000000002,
    0.10000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000015E-5,
    -0.010000000000000004, 0.010000000000000004, -0.010000000000000004,
    0.010000000000000004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000004E-6,
    0.0010000000000000005, 0.0010000000000000005, -0.0010000000000000005,
    -0.0010000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000018E-7,
    0.00010000000000000003, -0.00010000000000000003, 0.00010000000000000003,
    -0.00010000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000005E-8, -1.0000000000000004E-5, -1.0000000000000004E-5,
    1.0000000000000004E-5, 1.0000000000000004E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000033E-9, -1.0000000000000006E-6, 1.0000000000000006E-6,
    -1.0000000000000006E-6, 1.0000000000000006E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0000000000000006E-10, 1.0000000000000005E-7, 1.0000000000000005E-7,
    -1.0000000000000005E-7, -1.0000000000000005E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000025E-11, 1.0000000000000005E-8, -1.0000000000000005E-8,
    1.0000000000000005E-8, -1.0000000000000005E-8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0000000000000006E-12, -1.0000000000000007E-9, -1.0000000000000007E-9,
    1.0000000000000007E-9, 1.0000000000000007E-9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.0000000000000037E-13, -1.0000000000000006E-10, 1.0000000000000006E-10,
    -1.0000000000000006E-10, 1.0000000000000006E-10, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0000000000000008E-14, 1.0000000000000006E-11, 1.0000000000000006E-11,
    -1.0000000000000006E-11, -1.0000000000000006E-11, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 6.0000000000000044E-15, 1.0000000000000008E-12, -1.0000000000000008E-12,
    1.0000000000000008E-12, -1.0000000000000008E-12, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.000000000000001E-16, -1.0000000000000009E-13,
    -1.0000000000000009E-13, 1.0000000000000009E-13, 1.0000000000000009E-13, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000051E-17, -1.0000000000000009E-14,
    1.0000000000000009E-14, -1.0000000000000009E-14, 1.0000000000000009E-14, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.000000000000001E-18, 1.0000000000000011E-15,
    1.0000000000000011E-15, -1.0000000000000011E-15, -1.0000000000000011E-15,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0000000000000056E-19, 1.0000000000000011E-16,
    -1.0000000000000011E-16, 1.0000000000000011E-16, -1.0000000000000011E-16,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0000000000000011E-20,
    -1.000000000000001E-17, -1.000000000000001E-17, 1.000000000000001E-17,
    1.000000000000001E-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000066E-21,
    -1.0000000000000012E-18, 1.0000000000000012E-18, -1.0000000000000012E-18,
    1.0000000000000012E-18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000012E-22,
    1.0000000000000012E-19, 1.0000000000000012E-19, -1.0000000000000012E-19,
    -1.0000000000000012E-19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.0000000000000071E-23, 1.0000000000000013E-20, -1.0000000000000013E-20,
    1.0000000000000013E-20, -1.0000000000000013E-20, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0000000000000014E-24, -1.0000000000000012E-21,
    -1.0000000000000012E-21, 1.0000000000000012E-21, 1.0000000000000012E-21, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -6.0000000000000078E-25, -1.0000000000000013E-22,
    1.0000000000000013E-22, -1.0000000000000013E-22, 1.0000000000000013E-22, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000000015E-26, 1.0000000000000014E-23,
    1.0000000000000014E-23, -1.0000000000000014E-23, -1.0000000000000014E-23,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const double b_B[858]{ 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,
    -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
    0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0,
    0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,
    -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0,
    0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345,
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0,
    0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,
    -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.345, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.345, -1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const double dv5[620]{ -1.0, -0.0, -1.0, -0.0, -1.0, -0.0, 1.0, 0.0,
    1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, 0.0, 0.0, 0.0,
    0.0, 0.0, -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1, -100.0,
    -100.0, 100.0, 100.0, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.16, -110.0, -90.0, 90.0, 110.0, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.159, -109.0, -89.0, 89.0, 109.0,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1584, -108.9,
    -89.1, 89.1, 108.9, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841, -108.91, -89.109999999999985,
    89.109999999999985, 108.91, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.158416, -108.91099999999999, -89.109, 89.109,
    108.91099999999999, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.1584159, -108.9109, -89.1089, 89.1089, 108.9109,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.15841584,
    -108.91089, -89.108910000000009, 89.108910000000009, 108.91089,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.158415841,
    -108.91089099999999, -89.108911, 89.108911, 108.91089099999999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181, -0.1584158416,
    -108.9108911, -89.1089109, 89.1089109, 108.9108911, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584159, -108.91089109,
    -89.10891089, 89.10891089, 108.91089109, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158400002, -108.910891089,
    -89.108910891000008, 89.108910891000008, 108.910891089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.1584158415841,
    -108.91089108909999, -89.1089108911, 89.1089108911, 108.91089108909999,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158416, -108.91089108911, -89.108910891089991, 89.108910891089991,
    108.91089108911, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.158415841584159, -108.910891089109, -89.108910891089,
    89.108910891089, 108.910891089109, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415839, -108.9108910891089,
    -89.1089108910891, 89.1089108910891, 108.9108910891089, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415842, -108.91089108910892,
    -89.10891089108911, 89.10891089108911, 108.91089108910892,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158415842, -108.91089108910892, -89.10891089108911,
    89.10891089108911, 108.91089108910892, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415842, -108.91089108910892,
    -89.10891089108911, 89.10891089108911, 108.91089108910892,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158415842, -108.91089108910892, -89.10891089108911,
    89.10891089108911, 108.91089108910892, -48.780487804878049,
    -48.780487804878049, 48.780487804878049, 48.780487804878049,
    1.8181818181818181, 1.8181818181818181, -0.15841584158415842,
    -108.91089108910892, -89.10891089108911, 89.10891089108911,
    108.91089108910892, -48.780487804878049, -48.780487804878049,
    48.780487804878049, 48.780487804878049, 1.8181818181818181,
    1.8181818181818181, -0.15841584158415842, -108.91089108910892,
    -89.10891089108911, 89.10891089108911, 108.91089108910892,
    -48.780487804878049, -48.780487804878049, 48.780487804878049,
    48.780487804878049, 1.8181818181818181, 1.8181818181818181,
    -0.15841584158415842, -108.91089108910892, -89.10891089108911,
    89.10891089108911, 108.91089108910892, -0.0, -1.0, -0.0, -1.0, -0.0, -1.0,
    0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.207, -34.5, 34.5, -34.5, 34.5, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20354999999999998,
    -31.05, 37.95, -37.95, 31.05, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20147999999999996,
    -30.704999999999995, 37.605, -37.605, 30.704999999999995,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20151449999999999, -30.739499999999992,
    37.570499999999996, -37.570499999999996, 30.739499999999992,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153519999999997, -30.742949999999993,
    37.573949999999996, -37.573949999999996, 30.742949999999993,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153485499999996, -30.742604999999994,
    37.574294999999992, -37.574294999999992, 30.742604999999994,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153464799999996, -30.742570499999996,
    37.574260499999994, -37.574260499999994, 30.742570499999996,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465144999996, -30.742573949999997,
    37.57425705, -37.57425705, 30.742573949999997, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465351999997, -30.742574294999994, 37.574257394999989,
    -37.574257394999989, 30.742574294999994, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465348549995, -30.742574260499993, 37.574257429499994,
    -37.574257429499994, 30.742574260499993, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346479996, -30.742574257049995, 37.574257426049996,
    -37.574257426049996, 30.742574257049995, -1.2926829268292681,
    1.2926829268292681, 1.2926829268292681, -1.2926829268292681, 1.0, -1.0,
    -0.20153465346514496, -30.742574257394995, 37.574257425705, -37.574257425705,
    30.742574257394995, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346535196,
    -30.742574257429492, 37.574257425739489, -37.574257425739489,
    30.742574257429492, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534852,
    -30.742574257426043, 37.574257425742942, -37.574257425742942,
    30.742574257426043, -1.2926829268292681, 1.2926829268292681,
    1.2926829268292681, -1.2926829268292681, 1.0, -1.0, -0.20153465346534644,
    -30.7425742574257, 37.5742574257426, -37.5742574257426, 30.7425742574257,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534646, -30.742574257425737,
    37.574257425742566, -37.574257425742566, 30.742574257425737,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425744,
    37.574257425742573, -37.574257425742573, 30.742574257425744,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425744,
    37.574257425742573, -37.574257425742573, 30.742574257425744,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425744,
    37.574257425742573, -37.574257425742573, 30.742574257425744,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425744,
    37.574257425742573, -37.574257425742573, 30.742574257425744,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425744,
    37.574257425742573, -37.574257425742573, 30.742574257425744,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425744,
    37.574257425742573, -37.574257425742573, 30.742574257425744,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425744,
    37.574257425742573, -37.574257425742573, 30.742574257425744,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425741,
    37.574257425742573, -37.574257425742573, 30.742574257425741,
    -1.2926829268292681, 1.2926829268292681, 1.2926829268292681,
    -1.2926829268292681, 1.0, -1.0, -0.20153465346534652, -30.742574257425741,
    37.574257425742573, -37.574257425742573, 30.742574257425741 };

  static const double dv[310]{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0,
    31.415926535897931, 31.415926535897931, 31.415926535897931,
    31.415926535897931, -0.0, -0.0, 0.37, 20000.0, 20000.0, 20000.0, 20000.0 };

  static const double dv9[49]{ 95212.099536821042, 2503.7171176190263,
    94079.920577588491, 2487.5939439402723, 92952.481378751982,
    2458.0012297390331, 0.0, 2503.7171176190259, 30526.061559662259,
    2466.4562676726455, 30160.2007021616, 2436.8635961716677, 29795.528534086054,
    0.0, 94079.920577588491, 2466.4562676726455, 94084.660560250122,
    2474.1244306275548, 92952.481601017571, 2458.001256948769, 0.0,
    2487.5939439402719, 30160.2007021616, 2474.1244306275548, 30161.389438056536,
    2436.8635806812276, 29795.528580555874, 0.0, 92952.481378751982,
    2436.8635961716686, 92952.481601017571, 2436.8635806812285, 92957.2215836792,
    2444.5317436361061, 0.0, 2458.0012297390331, 29795.528534086054,
    2458.001256948769, 29795.528580555874, 2444.5317436361061,
    29796.717316450806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100000.0 };

  static double dv8[48360];
  static const short Mrows[24]{ 151, 152, 161, 162, 171, 172, 201, 202, 211, 212,
    221, 222, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262 };

  static const signed char b_D[858]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 };

  double dv12[2170];
  double dv4[930];
  double dv6[620];
  double Bv[468];
  double Dv[468];
  double Mlim[310];
  double A[234];
  double C[234];
  double Bu[156];
  double b_v[156];
  double b_b[78];
  double yopt[78];
  double b_onlineData[75];
  double r[75];
  double dv2[55];
  double uopt[52];
  double c_onlineData[50];
  double uopt_dim[50];
  double utarget0[50];
  double dv10[49];
  double B[33];
  double dv1[22];
  double Rot[9];
  double U[7];
  double Y[3];
  double b_xk[3];
  double c_xk[2];
  double Bv_tmp_idx_0;
  double Bv_tmp_idx_1;
  double Bv_tmp_idx_2;
  double Rot_tmp_tmp;
  double b_Rot_tmp_tmp;
  double d;
  double d1;
  double d2;
  int B_tmp;
  int aoffset;
  int b_i;
  int ct;
  int i;
  int ibtile;

  // STEPLTVMPC Summary of this function goes here
  //    Detailed explanation goes here
  //  Compute current error
  for (i = 0; i < 9; i++) {
    Rot[i] = iv[i];
  }

  Rot_tmp_tmp = std::cos(v[52]);
  Rot[0] = Rot_tmp_tmp;
  b_Rot_tmp_tmp = std::sin(v[52]);
  Rot[3] = b_Rot_tmp_tmp;
  Rot[1] = -b_Rot_tmp_tmp;
  Rot[4] = Rot_tmp_tmp;
  d = xk[0] - v[0];
  d1 = xk[1] - v[26];
  d2 = xk[2] - v[52];
  for (i = 0; i < 3; i++) {
    stateData->Plant[i] = (Rot[i] * d + Rot[i + 3] * d1) + Rot[i + 6] * d2;
  }

  stateData->Plant[2] -= 6.2831853071795862 * std::floor((stateData->Plant[2] +
    3.1415926535897931) / 6.2831853071795862);
  c_xk[0] = xk[0] - param->q1[0];
  c_xk[1] = xk[1] - param->q1[1];
  if (coder::b_norm(c_xk) > param->safe_d) {
    c_xk[0] = xk[0] - param->q2[0];
    c_xk[1] = xk[1] - param->q2[1];
    if (coder::b_norm(c_xk) > param->safe_d) {
      c_xk[0] = xk[0] - param->q3[0];
      c_xk[1] = xk[1] - param->q3[1];
      if (coder::b_norm(c_xk) > param->safe_d) {
        c_xk[0] = xk[0] - param->q4[0];
        c_xk[1] = xk[1] - param->q4[1];
        if (coder::b_norm(c_xk) > param->safe_d) {
          c_xk[0] = xk[0] - param->q5[0];
          c_xk[1] = xk[1] - param->q5[1];
          if (coder::b_norm(c_xk) > param->safe_d) {
            param->x0[0] = xk[0];
            param->x0[1] = xk[1];
          }
        }
      }
    }
  }

  c_xk[0] = param->x0[0] - param->q1[0];
  c_xk[1] = param->x0[1] - param->q1[1];
  d = coder::b_norm(c_xk);
  param->q1ad[0] = param->q1[0] + param->safe_d * c_xk[0] / d;
  c_xk[0] = param->x0[0] - param->q2[0];
  param->q1ad[1] = param->q1[1] + param->safe_d * c_xk[1] / d;
  c_xk[1] = param->x0[1] - param->q2[1];
  d = coder::b_norm(c_xk);
  param->q2ad[0] = param->q2[0] + param->safe_d * c_xk[0] / d;
  c_xk[0] = param->x0[0] - param->q3[0];
  param->q2ad[1] = param->q2[1] + param->safe_d * c_xk[1] / d;
  c_xk[1] = param->x0[1] - param->q3[1];
  d = coder::b_norm(c_xk);
  param->q3ad[0] = param->q3[0] + param->safe_d * c_xk[0] / d;
  c_xk[0] = param->x0[0] - param->q4[0];
  param->q3ad[1] = param->q3[1] + param->safe_d * c_xk[1] / d;
  c_xk[1] = param->x0[1] - param->q4[1];
  d = coder::b_norm(c_xk);
  param->q4ad[0] = param->q4[0] + param->safe_d * c_xk[0] / d;
  c_xk[0] = param->x0[0] - param->q5[0];
  param->q4ad[1] = param->q4[1] + param->safe_d * c_xk[1] / d;
  c_xk[1] = param->x0[1] - param->q5[1];
  d = coder::b_norm(c_xk);
  param->q5ad[0] = param->q5[0] + param->safe_d * c_xk[0] / d;
  param->q5ad[1] = param->q5[1] + param->safe_d * c_xk[1] / d;

  //  Initialize output
  b_xk[0] = stateData->Plant[0];
  b_xk[1] = stateData->Plant[1];
  b_xk[2] = stateData->Plant[2];
  predLinObj(b_xk, oldu, v, param, onlineData->model.A, onlineData->model.B,
             onlineData->model.C, onlineData->model.D, onlineData->model.U,
             onlineData->model.Y, onlineData->model.X, onlineData->model.DX,
             onlineData->customconstraints.E, onlineData->customconstraints.F,
             onlineData->customconstraints.G, onlineData->customconstraints.S);
  std::copy(&v[0], &v[130], &onlineData->signals.md[0]);
  *newstateData = *stateData;
  for (b_i = 0; b_i < 26; b_i++) {
    double D[33];
    double b[21];
    for (i = 0; i < 3; i++) {
      aoffset = 3 * i + 9 * b_i;
      A[aoffset] = onlineData->model.A[aoffset];
      A[aoffset + 1] = onlineData->model.A[aoffset + 1];
      A[aoffset + 2] = onlineData->model.A[aoffset + 2];
    }

    for (i = 0; i < 11; i++) {
      aoffset = 3 * i + 33 * b_i;
      B[3 * i] = b_B[aoffset];
      D[3 * i] = b_D[aoffset];
      B_tmp = 3 * i + 1;
      B[B_tmp] = b_B[aoffset + 1];
      D[B_tmp] = b_D[aoffset + 1];
      B_tmp = 3 * i + 2;
      B[B_tmp] = b_B[aoffset + 2];
      D[B_tmp] = b_D[aoffset + 2];
    }

    for (i = 0; i < 7; i++) {
      aoffset = 3 * i + 21 * b_i;
      b[3 * i] = onlineData->model.B[aoffset];
      b[3 * i + 1] = onlineData->model.B[aoffset + 1];
      b[3 * i + 2] = onlineData->model.B[aoffset + 2];
    }

    for (i = 0; i < 3; i++) {
      aoffset = 3 * i + 9 * b_i;
      C[aoffset] = onlineData->model.C[aoffset];
      C[aoffset + 1] = onlineData->model.C[aoffset + 1];
      C[aoffset + 2] = onlineData->model.C[aoffset + 2];
    }

    for (i = 0; i < 2; i++) {
      B[3 * i] = b[3 * i];
      aoffset = 3 * i + 1;
      B[aoffset] = b[aoffset];
      aoffset = 3 * i + 2;
      B[aoffset] = b[aoffset];
    }

    for (ct = 0; ct < 5; ct++) {
      aoffset = 3 * (ct + 2);
      B_tmp = 3 * (ct + 2);
      B[B_tmp] = b[aoffset];
      ibtile = aoffset + 21 * b_i;
      D[B_tmp] = onlineData->model.D[ibtile];
      B[B_tmp + 1] = b[aoffset + 1];
      D[B_tmp + 1] = onlineData->model.D[ibtile + 1];
      B[B_tmp + 2] = b[aoffset + 2];
      D[B_tmp + 2] = onlineData->model.D[ibtile + 2];
    }

    for (i = 0; i < 2; i++) {
      aoffset = 3 * i + 6 * b_i;
      Bu[aoffset] = B[3 * i];
      Bu[aoffset + 1] = B[3 * i + 1];
      Bu[aoffset + 2] = B[3 * i + 2];
    }

    for (i = 0; i < 6; i++) {
      ct = 3 * (i + 2);
      aoffset = 3 * i + 18 * b_i;
      Bv[aoffset] = B[ct];
      Dv[aoffset] = D[ct];
      Bv[aoffset + 1] = B[ct + 1];
      Dv[aoffset + 1] = D[ct + 1];
      Bv[aoffset + 2] = B[ct + 2];
      Dv[aoffset + 2] = D[ct + 2];
    }
  }

  std::copy(&dv[0], &dv[310], &Mlim[0]);
  std::memset(&utarget0[0], 0, 50U * sizeof(double));
  for (i = 0; i < 7; i++) {
    U[i] = onlineData->model.U[i];
  }

  Y[0] = onlineData->model.Y[0];
  Y[1] = onlineData->model.Y[1];
  Y[2] = onlineData->model.Y[2];
  for (ct = 0; ct < 24; ct++) {
    i = Mrows[ct];
    if (i <= 200) {
      Mlim[ct] += 0.0 - U[(i - (((i - 151) >> 1) << 1)) - 151];
    } else if (i <= 250) {
      Mlim[ct] -= 0.0 - U[(i - (((i - 201) >> 1) << 1)) - 201];
    }
  }

  for (ct = 0; ct < 2; ct++) {
    for (i = 0; i < 25; i++) {
      aoffset = (i << 1) + ct;
      utarget0[aoffset] -= U[ct];
    }
  }

  Bv[15] = onlineData->model.DX[0];
  Bv[16] = onlineData->model.DX[1];
  Bv[17] = onlineData->model.DX[2];
  for (int k{0}; k < 25; k++) {
    double Bv_tmp[5];
    aoffset = 3 * (k + 1);
    Bv_tmp_idx_0 = onlineData->model.X[0] - onlineData->model.X[aoffset];
    Bv_tmp_idx_1 = onlineData->model.X[1] - onlineData->model.X[aoffset + 1];
    Bv_tmp_idx_2 = onlineData->model.X[2] - onlineData->model.X[aoffset + 2];
    ibtile = 7 * (k + 1);
    d = U[0] - onlineData->model.U[ibtile];
    d1 = U[1] - onlineData->model.U[ibtile + 1];
    for (i = 0; i < 3; i++) {
      b_i = i + 9 * (k + 1);
      B_tmp = i + 6 * (k + 1);
      ct = i + aoffset;
      Bv[(i + 18 * (k + 1)) + 15] = (((onlineData->model.DX[ct] +
        onlineData->model.X[ct]) - onlineData->model.X[i]) + ((A[b_i] *
        Bv_tmp_idx_0 + A[b_i + 3] * Bv_tmp_idx_1) + A[b_i + 6] * Bv_tmp_idx_2))
        + (Bu[B_tmp] * d + Bu[B_tmp + 3] * d1);
    }

    for (i = 0; i < 5; i++) {
      Bv_tmp[i] = U[i + 2] - onlineData->model.U[(i + ibtile) + 2];
    }

    ibtile = 18 * (k + 1);
    for (i = 0; i < 3; i++) {
      d = 0.0;
      ct = (i + ibtile) + 15;
      b_i = i + 9 * (k + 1);
      Dv[ct] = (onlineData->model.Y[i + aoffset] - Y[i]) + ((C[b_i] *
        Bv_tmp_idx_0 + C[b_i + 3] * Bv_tmp_idx_1) + C[b_i + 6] * Bv_tmp_idx_2);
      d1 = 0.0;
      for (b_i = 0; b_i < 5; b_i++) {
        d2 = Bv_tmp[b_i];
        d += Bv[(i + 3 * b_i) + ibtile] * d2;
        d1 += Dv[(i + 3 * b_i) + ibtile] * d2;
      }

      Bv[ct] += d;
      Dv[ct] += d1;
    }
  }

  std::memset(&r[0], 0, 75U * sizeof(double));
  Bv_tmp_idx_2 = onlineData->signals.ref[0] - Y[0];
  Bv_tmp_idx_0 = Bv_tmp_idx_2;
  r[0] = Bv_tmp_idx_2;
  Bv_tmp_idx_2 = onlineData->signals.ref[1] - Y[1];
  Bv_tmp_idx_1 = Bv_tmp_idx_2;
  r[1] = Bv_tmp_idx_2;
  Bv_tmp_idx_2 = onlineData->signals.ref[2] - Y[2];
  r[2] = Bv_tmp_idx_2;
  for (b_i = 0; b_i < 24; b_i++) {
    aoffset = 3 * (b_i + 1);
    r[aoffset] = Bv_tmp_idx_0;
    r[aoffset + 1] = Bv_tmp_idx_1;
    r[aoffset + 2] = Bv_tmp_idx_2;
  }

  for (b_i = 0; b_i < 156; b_i++) {
    b_v[b_i] = 1.0;
  }

  for (b_i = 0; b_i < 26; b_i++) {
    aoffset = 6 * b_i;
    for (i = 0; i < 5; i++) {
      b_v[i + aoffset] = v[b_i + 26 * i] - U[i + 2];
    }
  }

  stateData->Plant[0] -= onlineData->model.X[0];
  stateData->Plant[1] -= onlineData->model.X[1];
  stateData->Plant[2] -= onlineData->model.X[2];
  for (i = 0; i < 25; i++) {
    b_onlineData[3 * i] = onlineData->weights.y[i];
    b_onlineData[3 * i + 1] = onlineData->weights.y[i + 25];
    b_onlineData[3 * i + 2] = onlineData->weights.y[i + 50];
    aoffset = i << 1;
    uopt_dim[aoffset] = onlineData->weights.u[i];
    c_onlineData[aoffset] = onlineData->weights.du[i];
    uopt_dim[aoffset + 1] = onlineData->weights.u[i + 25];
    c_onlineData[aoffset + 1] = onlineData->weights.du[i + 25];
  }

  c_xk[0] = stateData->LastMove[0] - U[0];
  c_xk[1] = stateData->LastMove[1] - U[1];
  std::copy(&onlineData->customconstraints.E[0],
            &onlineData->customconstraints.E[22], &dv1[0]);
  std::copy(&onlineData->customconstraints.F[0],
            &onlineData->customconstraints.F[33], &B[0]);
  std::copy(&onlineData->customconstraints.S[0],
            &onlineData->customconstraints.S[55], &dv2[0]);
  std::copy(&dv3[0], &dv3[930], &dv4[0]);
  std::copy(&dv5[0], &dv5[620], &dv6[0]);
  std::copy(&dv7[0], &dv7[48360], &dv8[0]);
  std::copy(&dv9[0], &dv9[49], &dv10[0]);
  std::copy(&dv11[0], &dv11[2170], &dv12[0]);
  coder::b_mpcblock_optimizer(r, b_v, stateData->Plant, c_xk, stateData->iA,
    Mlim, dv4, dv6, dv8, utarget0, *(double (*)[2])&U[0], *(double (*)[5])&U[2],
    Y, dv10, dv12, b_onlineData, uopt_dim, c_onlineData, A, Bu, Bv, C, Dv, dv1,
    B, dv2, onlineData->customconstraints.G, mv, &info->Cost, uopt,
    &info->Iterations, newstateData->iA, &info->Slack);
  for (i = 0; i < 26; i++) {
    info->Topt[i] = 0.1 * static_cast<double>(i);
  }

  d = U[0];
  d1 = U[1];
  for (aoffset = 0; aoffset < 25; aoffset++) {
    ibtile = aoffset << 1;
    utarget0[ibtile] = d;
    utarget0[ibtile + 1] = d1;
  }

  for (i = 0; i < 2; i++) {
    for (b_i = 0; b_i < 25; b_i++) {
      uopt_dim[b_i + 25 * i] = uopt[b_i + 26 * i] - utarget0[i + (b_i << 1)];
    }
  }

  for (int k{0}; k < 26; k++) {
    double vk[6];
    xopt[k] = stateData->Plant[0];
    xopt[k + 26] = stateData->Plant[1];
    xopt[k + 52] = stateData->Plant[2];
    for (aoffset = 0; aoffset < 6; aoffset++) {
      vk[aoffset] = b_v[k * 6 + aoffset];
    }

    for (i = 0; i < 3; i++) {
      b_i = i + 9 * k;
      d = 0.0;
      for (B_tmp = 0; B_tmp < 6; B_tmp++) {
        d += Dv[(i + 3 * B_tmp) + 18 * k] * vk[B_tmp];
      }

      yopt[k + 26 * i] = ((C[b_i] * stateData->Plant[0] + C[b_i + 3] *
                           stateData->Plant[1]) + C[b_i + 6] * stateData->Plant
                          [2]) + d;
    }

    if (k < 25) {
      double b_Bu[3];
      d = stateData->Plant[0];
      d1 = stateData->Plant[1];
      d2 = stateData->Plant[2];
      Bv_tmp_idx_0 = uopt_dim[k];
      Bv_tmp_idx_1 = uopt_dim[k + 25];
      for (i = 0; i < 3; i++) {
        b_i = i + 9 * k;
        b_xk[i] = (A[b_i] * d + A[b_i + 3] * d1) + A[b_i + 6] * d2;
        b_i = i + 6 * k;
        b_Bu[i] = Bu[b_i] * Bv_tmp_idx_0 + Bu[b_i + 3] * Bv_tmp_idx_1;
      }

      for (i = 0; i < 3; i++) {
        d = 0.0;
        for (b_i = 0; b_i < 6; b_i++) {
          d += Bv[(i + 3 * b_i) + 18 * k] * vk[b_i];
        }

        stateData->Plant[i] = (b_xk[i] + b_Bu[i]) + d;
      }
    }

    ibtile = k * 3;
    b_b[ibtile] = Y[0];
    b_b[ibtile + 1] = Y[1];
    b_b[ibtile + 2] = Y[2];
  }

  for (i = 0; i < 3; i++) {
    for (b_i = 0; b_i < 26; b_i++) {
      aoffset = b_i + 26 * i;
      yopt[aoffset] += b_b[i + 3 * b_i];
    }
  }

  for (aoffset = 0; aoffset < 26; aoffset++) {
    ibtile = aoffset * 3;
    b_b[ibtile] = onlineData->model.X[0];
    b_b[ibtile + 1] = onlineData->model.X[1];
    b_b[ibtile + 2] = onlineData->model.X[2];
  }

  for (i = 0; i < 3; i++) {
    for (b_i = 0; b_i < 26; b_i++) {
      B_tmp = b_i + 26 * i;
      info->Xopt[B_tmp] = xopt[B_tmp] + b_b[i + 3 * b_i];
      info->Yopt[B_tmp] = yopt[B_tmp];
    }
  }

  for (b_i = 0; b_i < 2; b_i++) {
    std::copy(&uopt[b_i * 26], &uopt[static_cast<int>(b_i * 26 + 26U)],
              &info->Uopt[b_i * 26]);
    newstateData->LastMove[b_i] = mv[b_i];
  }

  for (b_i = 0; b_i < 26; b_i++) {
    for (i = 0; i < 9; i++) {
      Rot[i] = iv[i];
    }

    Rot[0] = Rot_tmp_tmp;
    Rot[3] = b_Rot_tmp_tmp;
    Rot[1] = -b_Rot_tmp_tmp;
    Rot[4] = Rot_tmp_tmp;
    d = info->Xopt[b_i];
    d1 = info->Xopt[b_i + 26];
    d2 = info->Xopt[b_i + 52];
    for (B_tmp = 0; B_tmp < 3; B_tmp++) {
      aoffset = B_tmp * 3;
      ibtile = b_i + 26 * B_tmp;
      xopt[ibtile] = ((Rot[aoffset] * d + Rot[aoffset + 1] * d1) + Rot[aoffset +
                      2] * d2) + v[ibtile];
    }
  }

  std::copy(&info->Uopt[0], &info->Uopt[52], &seq[0]);
  *iter = info->Iterations;
  vel_cmd[0] = mv[0];
  vel_cmd[1] = mv[1];
}

// End of code generation (PushingMPClib.cpp)
